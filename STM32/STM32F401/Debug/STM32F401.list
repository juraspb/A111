
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e36c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a164  0800e50c  0800e50c  0001e50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018670  08018670  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08018670  08018670  00028670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018678  08018678  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018678  08018678  00028678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801867c  0801867c  0002867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08018680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  2000016c  080187ec  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  080187ec  00030af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000582be  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c53a  00000000  00000000  0008845a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021c0  00000000  00000000  00094998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004708  00000000  00000000  00096b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018400  00000000  00000000  0009b260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca09  00000000  00000000  000b3660  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d597  00000000  00000000  000d0069  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0016d600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c4  00000000  00000000  0016d6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000129a6  00000000  00000000  00175bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e4f4 	.word	0x0800e4f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800e4f4 	.word	0x0800e4f4

080001e0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001e0:	f06f 0c03 	mvn.w	ip, #3
 80001e4:	3904      	subs	r1, #4
 80001e6:	e004      	b.n	80001f2 <head_complex>

080001e8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001e8:	f04f 0c04 	mov.w	ip, #4
 80001ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001f0:	4252      	negs	r2, r2

080001f2 <head_complex>:
 80001f2:	0092      	lsls	r2, r2, #2
 80001f4:	d100      	bne.n	80001f8 <init_complex>
 80001f6:	4770      	bx	lr

080001f8 <init_complex>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 8000200:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 8000204:	f8b0 a000 	ldrh.w	sl, [r0]
 8000208:	8844      	ldrh	r4, [r0, #2]
 800020a:	8883      	ldrh	r3, [r0, #4]
 800020c:	88c5      	ldrh	r5, [r0, #6]
 800020e:	8900      	ldrh	r0, [r0, #8]
 8000210:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000214:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000218:	4663      	mov	r3, ip
 800021a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800021e:	b234      	sxth	r4, r6
 8000220:	b23d      	sxth	r5, r7
 8000222:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000226:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800022a:	0034      	movs	r4, r6
 800022c:	003d      	movs	r5, r7

0800022e <loop_complex>:
 800022e:	5888      	ldr	r0, [r1, r2]
 8000230:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000234:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000238:	fb2c 8804 	smlad	r8, ip, r4, r8
 800023c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000240:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000244:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000248:	0026      	movs	r6, r4
 800024a:	002f      	movs	r7, r5
 800024c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000250:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000254:	0428      	lsls	r0, r5, #16
 8000256:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800025a:	5088      	str	r0, [r1, r2]
 800025c:	18d2      	adds	r2, r2, r3
 800025e:	d1e6      	bne.n	800022e <loop_complex>
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000264 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000264:	f06f 0c01 	mvn.w	ip, #1
 8000268:	3902      	subs	r1, #2
 800026a:	e004      	b.n	8000276 <head_real>

0800026c <acc_alg_biquad_q3_12_direct_form_1>:
 800026c:	f05f 0c02 	movs.w	ip, #2
 8000270:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000274:	4252      	negs	r2, r2

08000276 <head_real>:
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	d100      	bne.n	800027c <init_real>
 800027a:	4770      	bx	lr

0800027c <init_real>:
 800027c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000280:	4667      	mov	r7, ip
 8000282:	f8b0 a000 	ldrh.w	sl, [r0]
 8000286:	8844      	ldrh	r4, [r0, #2]
 8000288:	8885      	ldrh	r5, [r0, #4]
 800028a:	88c6      	ldrh	r6, [r0, #6]
 800028c:	8900      	ldrh	r0, [r0, #8]
 800028e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000292:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000296:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800029a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800029e:	0025      	movs	r5, r4
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	031e      	lsls	r6, r3, #12

080002a4 <loop_real>:
 80002a4:	5a88      	ldrh	r0, [r1, r2]
 80002a6:	fb1a 6600 	smlabb	r6, sl, r0, r6
 80002aa:	fb2c 6604 	smlad	r6, ip, r4, r6
 80002ae:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002b2:	0025      	movs	r5, r4
 80002b4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002b8:	1420      	asrs	r0, r4, #16
 80002ba:	5288      	strh	r0, [r1, r2]
 80002bc:	19d2      	adds	r2, r2, r7
 80002be:	d1f1      	bne.n	80002a4 <loop_real>
 80002c0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <acc_hal_integration_sleep_us>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sleep_us(uint32_t time_usec)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint32_t time_ms = time_usec / 1000;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <acc_hal_integration_sleep_us+0x30>)
 8000ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_ms ? time_ms : 1);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <acc_hal_integration_sleep_us+0x1e>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	e000      	b.n	8000edc <acc_hal_integration_sleep_us+0x20>
 8000eda:	2301      	movs	r3, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ffe1 	bl	8001ea4 <HAL_Delay>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	10624dd3 	.word	0x10624dd3

08000ef0 <acc_hal_integration_sensor_transfer>:


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f00:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <acc_hal_integration_sensor_transfer+0x44>)
 8000f08:	f001 fda4 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <acc_hal_integration_sensor_transfer+0x48>)
 8000f1c:	f002 fa6e 	bl	80033fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <acc_hal_integration_sensor_transfer+0x44>)
 8000f26:	f001 fd95 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000a90 	.word	0x20000a90

08000f3c <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	if (sensor_state == SENSOR_STATE_BUSY)
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <acc_hal_integration_sensor_power_on+0x40>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d012      	beq.n	8000f72 <acc_hal_integration_sensor_power_on+0x36>
	{
		return;
	}

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <acc_hal_integration_sensor_power_on+0x44>)
 8000f54:	f001 fd7e 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <acc_hal_integration_sensor_power_on+0x48>)
 8000f5e:	f001 fd79 	bl	8002a54 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	acc_hal_integration_sleep_us(2000);
 8000f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f66:	f7ff ffa9 	bl	8000ebc <acc_hal_integration_sleep_us>

	sensor_state = SENSOR_STATE_BUSY;
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <acc_hal_integration_sensor_power_on+0x40>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e000      	b.n	8000f74 <acc_hal_integration_sensor_power_on+0x38>
		return;
 8000f72:	bf00      	nop
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000188 	.word	0x20000188
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020000 	.word	0x40020000

08000f88 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	if (sensor_state != SENSOR_STATE_BUSY)
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <acc_hal_integration_sensor_power_off+0x40>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d112      	bne.n	8000fbe <acc_hal_integration_sensor_power_off+0x36>
	{
		return;
	}

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <acc_hal_integration_sensor_power_off+0x44>)
 8000f9e:	f001 fd59 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <acc_hal_integration_sensor_power_off+0x48>)
 8000faa:	f001 fd53 	bl	8002a54 <HAL_GPIO_WritePin>

	sensor_state = SENSOR_STATE_UNKNOWN;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <acc_hal_integration_sensor_power_off+0x40>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_hal_integration_sleep_us(2000);
 8000fb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fb8:	f7ff ff80 	bl	8000ebc <acc_hal_integration_sleep_us>
 8000fbc:	e000      	b.n	8000fc0 <acc_hal_integration_sensor_power_off+0x38>
		return;
 8000fbe:	bf00      	nop
}
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000188 	.word	0x20000188
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8000fde:	f000 ff55 	bl	8001e8c <HAL_GetTick>
 8000fe2:	60f8      	str	r0, [r7, #12]
	while (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8000fe4:	e00d      	b.n	8001002 <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	{
		if (timeout_ms == 0 || HAL_GetTick() - wait_begin_ms > timeout_ms)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <acc_hal_integration_wait_for_sensor_interrupt+0x28>
 8000fec:	f000 ff4e 	bl	8001e8c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d201      	bcs.n	8001000 <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
		{
			return false;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e009      	b.n	8001014 <acc_hal_integration_wait_for_sensor_interrupt+0x40>
		}

		// Wait for the next tick interrupt
		__WFI();
 8001000:	bf30      	wfi
	while (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <acc_hal_integration_wait_for_sensor_interrupt+0x48>)
 8001008:	f001 fd0c 	bl	8002a24 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d1e9      	bne.n	8000fe6 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return true;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020400 	.word	0x40020400

08001020 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <acc_hal_integration_get_reference_frequency+0x18>)
 8001026:	ee07 3a90 	vmov	s15, r3
}
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	4bb71b00 	.word	0x4bb71b00

0800103c <acc_hal_integration_get_current_time>:


static uint32_t acc_hal_integration_get_current_time(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001040:	f000 ff24 	bl	8001e8c <HAL_GetTick>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <acc_hal_integration_log>:


static void acc_hal_integration_log(acc_log_level_t level, const char *module, const char *buffer)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b092      	sub	sp, #72	; 0x48
 8001050:	af06      	add	r7, sp, #24
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	uint32_t time_ms = acc_hal_integration_get_current_time();
 8001058:	f7ff fff0 	bl	800103c <acc_hal_integration_get_current_time>
 800105c:	62f8      	str	r0, [r7, #44]	; 0x2c
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <acc_hal_integration_log+0xb0>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0d5b      	lsrs	r3, r3, #21
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	4a23      	ldr	r2, [pc, #140]	; (8001100 <acc_hal_integration_log+0xb4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0b9a      	lsrs	r2, r3, #14
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <acc_hal_integration_log+0xb8>)
 800107a:	fba3 1302 	umull	r1, r3, r3, r2
 800107e:	0959      	lsrs	r1, r3, #5
 8001080:	460b      	mov	r3, r1
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	623b      	str	r3, [r7, #32]
	unsigned int seconds      = timestamp / 1000 % 60;
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <acc_hal_integration_log+0xbc>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	099a      	lsrs	r2, r3, #6
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <acc_hal_integration_log+0xb8>)
 8001098:	fba3 1302 	umull	r1, r3, r3, r2
 800109c:	0959      	lsrs	r1, r3, #5
 800109e:	460b      	mov	r3, r1
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	61fb      	str	r3, [r7, #28]
	unsigned int milliseconds = timestamp % 1000;
 80010aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <acc_hal_integration_log+0xbc>)
 80010ae:	fba2 1203 	umull	r1, r2, r2, r3
 80010b2:	0992      	lsrs	r2, r2, #6
 80010b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b8:	fb01 f202 	mul.w	r2, r1, r2
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	61bb      	str	r3, [r7, #24]

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d804      	bhi.n	80010d0 <acc_hal_integration_log+0x84>
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <acc_hal_integration_log+0xc0>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	e000      	b.n	80010d2 <acc_hal_integration_log+0x86>
 80010d0:	233f      	movs	r3, #63	; 0x3f
 80010d2:	75fb      	strb	r3, [r7, #23]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, 0, level_ch, module, buffer);
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	9204      	str	r2, [sp, #16]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	9203      	str	r2, [sp, #12]
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	6a3a      	ldr	r2, [r7, #32]
 80010ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ee:	4808      	ldr	r0, [pc, #32]	; (8001110 <acc_hal_integration_log+0xc4>)
 80010f0:	f00b fbde 	bl	800c8b0 <iprintf>
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	95217cb1 	.word	0x95217cb1
 8001100:	45e7b273 	.word	0x45e7b273
 8001104:	88888889 	.word	0x88888889
 8001108:	10624dd3 	.word	0x10624dd3
 800110c:	0800e538 	.word	0x0800e538
 8001110:	0800e50c 	.word	0x0800e50c

08001114 <acc_hal_integration_get_implementation>:


acc_hal_t acc_hal_integration_get_implementation(void)
{
 8001114:	b4b0      	push	{r4, r5, r7}
 8001116:	b08f      	sub	sp, #60	; 0x3c
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	acc_hal_t hal =
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <acc_hal_integration_get_implementation+0x44>)
 800111e:	f107 0408 	add.w	r4, r7, #8
 8001122:	461d      	mov	r5, r3
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		.log.log_level = ACC_LOG_LEVEL_INFO,
		.log.log       = acc_hal_integration_log
	};

	return hal;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	461d      	mov	r5, r3
 8001138:	f107 0408 	add.w	r4, r7, #8
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001148:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	373c      	adds	r7, #60	; 0x3c
 8001150:	46bd      	mov	sp, r7
 8001152:	bcb0      	pop	{r4, r5, r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	0800e540 	.word	0x0800e540

0800115c <acc_example_service_power_bins>:

static bool execute_power_bins(acc_service_configuration_t power_bins_configuration);


bool acc_example_service_power_bins(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af00      	add	r7, sp, #0
	//printf("Acconeer software version %s\n", acc_version_get());

	acc_hal_t hal = acc_hal_integration_get_implementation();
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffd5 	bl	8001114 <acc_hal_integration_get_implementation>

	if (!acc_rss_activate(&hal))
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fdc5 	bl	8004cfc <acc_rss_activate>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <acc_example_service_power_bins+0x26>
	{
		//fprintf(stderr, "acc_rss_activate() failed\n");
		return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e03c      	b.n	80011fc <acc_example_service_power_bins+0xa0>
	}

	acc_service_configuration_t power_bins_configuration = acc_service_power_bins_configuration_create();
 8001182:	f004 f865 	bl	8005250 <acc_service_power_bins_configuration_create>
 8001186:	4603      	mov	r3, r0
 8001188:	603b      	str	r3, [r7, #0]

	if (power_bins_configuration == NULL)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <acc_example_service_power_bins+0x3c>
	{
		//fprintf(stderr, "acc_service_power_bins_configuration_create() failed\n");
		acc_rss_deactivate();
 8001190:	f003 fdea 	bl	8004d68 <acc_rss_deactivate>
		return false;
 8001194:	2300      	movs	r3, #0
 8001196:	e031      	b.n	80011fc <acc_example_service_power_bins+0xa0>
	}

	acc_service_power_bins_requested_bin_count_set(power_bins_configuration,10);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	210a      	movs	r1, #10
 800119c:	4618      	mov	r0, r3
 800119e:	f004 f8e7 	bl	8005370 <acc_service_power_bins_requested_bin_count_set>

	acc_base_configuration_t base_configuration = acc_service_get_base_configuration(power_bins_configuration);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fdfb 	bl	8004da0 <acc_service_get_base_configuration>
 80011aa:	63f8      	str	r0, [r7, #60]	; 0x3c

	float start_m  = 0.2f;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <acc_example_service_power_bins+0xa8>)
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
	float length_m = 0.5f;
 80011b0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34

	acc_base_configuration_requested_start_set(base_configuration, start_m);
 80011b6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80011ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011bc:	f005 f9d8 	bl	8006570 <acc_base_configuration_requested_start_set>
	acc_base_configuration_requested_length_set(base_configuration, length_m);
 80011c0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80011c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011c6:	f005 f9f5 	bl	80065b4 <acc_base_configuration_requested_length_set>


	if (!execute_power_bins(power_bins_configuration))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f81b 	bl	8001208 <execute_power_bins>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <acc_example_service_power_bins+0x92>
	{
		acc_service_power_bins_configuration_destroy(&power_bins_configuration);
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 f8b5 	bl	8005350 <acc_service_power_bins_configuration_destroy>
		acc_rss_deactivate();
 80011e6:	f003 fdbf 	bl	8004d68 <acc_rss_deactivate>
		return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e006      	b.n	80011fc <acc_example_service_power_bins+0xa0>
	}

	acc_service_power_bins_configuration_destroy(&power_bins_configuration);
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 f8ad 	bl	8005350 <acc_service_power_bins_configuration_destroy>

	acc_rss_deactivate();
 80011f6:	f003 fdb7 	bl	8004d68 <acc_rss_deactivate>

	return true;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3740      	adds	r7, #64	; 0x40
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	3e4ccccd 	.word	0x3e4ccccd

08001208 <execute_power_bins>:


bool execute_power_bins(acc_service_configuration_t power_bins_configuration)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	466b      	mov	r3, sp
 8001212:	461d      	mov	r5, r3
	acc_service_handle_t handle = acc_service_create(power_bins_configuration);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f003 ff89 	bl	800512c <acc_service_create>
 800121a:	4603      	mov	r3, r0
 800121c:	623b      	str	r3, [r7, #32]

	if (handle == NULL)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <execute_power_bins+0x20>
	{
		//fprintf(stderr, "acc_service_create() failed\n");
		return false;
 8001224:	2300      	movs	r3, #0
 8001226:	e084      	b.n	8001332 <execute_power_bins+0x12a>
	}

	acc_service_power_bins_metadata_t power_bins_metadata;
	acc_service_power_bins_get_metadata(handle, &power_bins_metadata);
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	f107 0210 	add.w	r2, r7, #16
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f8a9 	bl	8005388 <acc_service_power_bins_get_metadata>

	//printf("Start: %d mm\n", (int)(power_bins_metadata.start_m * 1000.0f));
	//printf("Length: %u mm\n", (unsigned int)(power_bins_metadata.length_m * 1000.0f));
	//printf("Bin count: %u\n", (unsigned int)(power_bins_metadata.bin_count));

	uint16_t data[power_bins_metadata.bin_count];
 8001236:	8b38      	ldrh	r0, [r7, #24]
 8001238:	4603      	mov	r3, r0
 800123a:	3b01      	subs	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
 800123e:	b281      	uxth	r1, r0
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	f04f 0400 	mov.w	r4, #0
 800124c:	0114      	lsls	r4, r2, #4
 800124e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001252:	010b      	lsls	r3, r1, #4
 8001254:	b281      	uxth	r1, r0
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	f04f 0400 	mov.w	r4, #0
 8001262:	0114      	lsls	r4, r2, #4
 8001264:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001268:	010b      	lsls	r3, r1, #4
 800126a:	4603      	mov	r3, r0
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	3301      	adds	r3, #1
 8001270:	3307      	adds	r3, #7
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	ebad 0d03 	sub.w	sp, sp, r3
 800127a:	466b      	mov	r3, sp
 800127c:	3301      	adds	r3, #1
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c

	acc_service_power_bins_result_info_t result_info;

	if (!acc_service_activate(handle))
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fd9a 	bl	8004dc0 <acc_service_activate>
 800128c:	4603      	mov	r3, r0
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <execute_power_bins+0x9e>
	{
		//printf("acc_service_activate() failed\n");
		acc_service_destroy(&handle);
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f003 ff5f 	bl	8005160 <acc_service_destroy>
		return false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e045      	b.n	8001332 <execute_power_bins+0x12a>
	}

	bool      success    = true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	const int iterations = 5;
 80012ac:	2305      	movs	r3, #5
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i = 0; i < iterations; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80012b4:	e01d      	b.n	80012f2 <execute_power_bins+0xea>
	{
		success = acc_service_power_bins_get_next(handle, data, power_bins_metadata.bin_count, &result_info);
 80012b6:	6a38      	ldr	r0, [r7, #32]
 80012b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ba:	8b3a      	ldrh	r2, [r7, #24]
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	f004 f86e 	bl	80053a0 <acc_service_power_bins_get_next>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if (!success)
 80012ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012ce:	f083 0301 	eor.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <execute_power_bins+0xf4>
			break;
		}

		//printf("Power Bins data:\n");

		for (uint16_t j = 0; j < power_bins_metadata.bin_count; j++)
 80012d8:	2300      	movs	r3, #0
 80012da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80012dc:	e002      	b.n	80012e4 <execute_power_bins+0xdc>
 80012de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012e0:	3301      	adds	r3, #1
 80012e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80012e4:	8b3b      	ldrh	r3, [r7, #24]
 80012e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3f8      	bcc.n	80012de <execute_power_bins+0xd6>
	for (int i = 0; i < iterations; i++)
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	3301      	adds	r3, #1
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbdd      	blt.n	80012b6 <execute_power_bins+0xae>
 80012fa:	e000      	b.n	80012fe <execute_power_bins+0xf6>
			break;
 80012fc:	bf00      	nop
		}

		//printf("\n");
	}

	bool deactivated = acc_service_deactivate(handle);
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fd8d 	bl	8004e20 <acc_service_deactivate>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	acc_service_destroy(&handle);
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f003 ff25 	bl	8005160 <acc_service_destroy>

	return deactivated && success;
 8001316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <execute_power_bins+0x122>
 800131e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <execute_power_bins+0x122>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <execute_power_bins+0x124>
 800132a:	2300      	movs	r3, #0
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	46ad      	mov	sp, r5
}
 8001334:	4618      	mov	r0, r3
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bdb0      	pop	{r4, r5, r7, pc}

0800133c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001344:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001348:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001354:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001358:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800135c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001364:	e000      	b.n	8001368 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001366:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001368:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001372:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_write>:
bool hal_test_spi_read_chipid(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
	int i=0;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ffc7 	bl	800133c <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x16>
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013cc:	f000 fcfe 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f842 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f000 f9b8 	bl	8001748 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013d8:	f000 f8aa 	bl	8001530 <MX_SPI1_Init>
  MX_TIM4_Init();
 80013dc:	f000 f8de 	bl	800159c <MX_TIM4_Init>
  MX_DMA_Init();
 80013e0:	f000 f992 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013e4:	f000 f966 	bl	80016b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80013e8:	2104      	movs	r1, #4
 80013ea:	4817      	ldr	r0, [pc, #92]	; (8001448 <main+0x80>)
 80013ec:	f002 fbd2 	bl	8003b94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80013f0:	2108      	movs	r1, #8
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <main+0x80>)
 80013f4:	f002 fbce 	bl	8003b94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013f8:	210c      	movs	r1, #12
 80013fa:	4813      	ldr	r0, [pc, #76]	; (8001448 <main+0x80>)
 80013fc:	f002 fbca 	bl	8003b94 <HAL_TIM_PWM_Start>
  TIM4->CCR2=500;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <main+0x84>)
 8001402:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3=750;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <main+0x84>)
 800140a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4=1500;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <main+0x84>)
 8001412:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (hal_test_spi_read_chipid()) {
 8001418:	f000 fa22 	bl	8001860 <hal_test_spi_read_chipid>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <main+0x5e>
//    	HAL_GPIO_WritePin(GPIOA,test,1);
    	acc_example_service_power_bins();
 8001422:	f7ff fe9b 	bl	800115c <acc_example_service_power_bins>
//    	HAL_GPIO_WritePin(GPIOA,test,0);
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (count++>100) {
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <main+0x88>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	4908      	ldr	r1, [pc, #32]	; (8001450 <main+0x88>)
 800142e:	600a      	str	r2, [r1, #0]
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	ddf1      	ble.n	8001418 <main+0x50>
    	count=0;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <main+0x88>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA,test_Pin);
 800143a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <main+0x8c>)
 8001440:	f001 fb21 	bl	8002a86 <HAL_GPIO_TogglePin>
	if (hal_test_spi_read_chipid()) {
 8001444:	e7e8      	b.n	8001418 <main+0x50>
 8001446:	bf00      	nop
 8001448:	200009b0 	.word	0x200009b0
 800144c:	40000800 	.word	0x40000800
 8001450:	2000018c 	.word	0x2000018c
 8001454:	40020000 	.word	0x40020000

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f00a feaa 	bl	800c1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <SystemClock_Config+0xd0>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <SystemClock_Config+0xd0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a4:	4a21      	ldr	r2, [pc, #132]	; (800152c <SystemClock_Config+0xd4>)
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014cc:	230c      	movs	r3, #12
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014d0:	2350      	movs	r3, #80	; 0x50
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d8:	2304      	movs	r3, #4
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 faeb 	bl	8002abc <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ec:	f000 f9f6 	bl	80018dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fd44 	bl	8002f9c <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800151a:	f000 f9df 	bl	80018dc <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	; 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_SPI1_Init+0x64>)
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <MX_SPI1_Init+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_SPI1_Init+0x64>)
 800153c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001560:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_SPI1_Init+0x64>)
 8001564:	2210      	movs	r2, #16
 8001566:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_SPI1_Init+0x64>)
 800157c:	220a      	movs	r2, #10
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_SPI1_Init+0x64>)
 8001582:	f001 fed7 	bl	8003334 <HAL_SPI_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800158c:	f000 f9a6 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000a90 	.word	0x20000a90
 8001598:	40013000 	.word	0x40013000

0800159c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <MX_TIM4_Init+0x110>)
 80015ce:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <MX_TIM4_Init+0x114>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MX_TIM4_Init+0x110>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <MX_TIM4_Init+0x110>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_TIM4_Init+0x110>)
 80015e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <MX_TIM4_Init+0x110>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <MX_TIM4_Init+0x110>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015f2:	482e      	ldr	r0, [pc, #184]	; (80016ac <MX_TIM4_Init+0x110>)
 80015f4:	f002 fa6e 	bl	8003ad4 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015fe:	f000 f96d 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160c:	4619      	mov	r1, r3
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <MX_TIM4_Init+0x110>)
 8001610:	f002 fbb8 	bl	8003d84 <HAL_TIM_ConfigClockSource>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800161a:	f000 f95f 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800161e:	4823      	ldr	r0, [pc, #140]	; (80016ac <MX_TIM4_Init+0x110>)
 8001620:	f002 fa83 	bl	8003b2a <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800162a:	f000 f957 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4619      	mov	r1, r3
 800163c:	481b      	ldr	r0, [pc, #108]	; (80016ac <MX_TIM4_Init+0x110>)
 800163e:	f002 ff25 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001648:	f000 f948 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	; 0x60
 800164e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2204      	movs	r2, #4
 8001660:	4619      	mov	r1, r3
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <MX_TIM4_Init+0x110>)
 8001664:	f002 fac8 	bl	8003bf8 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800166e:	f000 f935 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2208      	movs	r2, #8
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <MX_TIM4_Init+0x110>)
 800167a:	f002 fabd 	bl	8003bf8 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001684:	f000 f92a 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	220c      	movs	r2, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <MX_TIM4_Init+0x110>)
 8001690:	f002 fab2 	bl	8003bf8 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800169a:	f000 f91f 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <MX_TIM4_Init+0x110>)
 80016a0:	f000 f9be 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80016a4:	bf00      	nop
 80016a6:	3738      	adds	r7, #56	; 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200009b0 	.word	0x200009b0
 80016b0:	40000800 	.word	0x40000800

080016b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART1_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ec:	f002 ff3c 	bl	8004568 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f8f1 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000a50 	.word	0x20000a50
 8001704:	40011000 	.word	0x40011000

08001708 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <MX_DMA_Init+0x3c>)
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_DMA_Init+0x3c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2046      	movs	r0, #70	; 0x46
 8001730:	f000 fcb5 	bl	800209e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001734:	2046      	movs	r0, #70	; 0x46
 8001736:	f000 fcce 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <MX_GPIO_Init+0x108>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a3a      	ldr	r2, [pc, #232]	; (8001850 <MX_GPIO_Init+0x108>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <MX_GPIO_Init+0x108>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <MX_GPIO_Init+0x108>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <MX_GPIO_Init+0x108>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <MX_GPIO_Init+0x108>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_GPIO_Init+0x108>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <MX_GPIO_Init+0x108>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_GPIO_Init+0x108>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2110      	movs	r1, #16
 80017b6:	4827      	ldr	r0, [pc, #156]	; (8001854 <MX_GPIO_Init+0x10c>)
 80017b8:	f001 f94c 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c2:	4825      	ldr	r0, [pc, #148]	; (8001858 <MX_GPIO_Init+0x110>)
 80017c4:	f001 f946 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ce:	4821      	ldr	r0, [pc, #132]	; (8001854 <MX_GPIO_Init+0x10c>)
 80017d0:	f001 f940 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin;
 80017d4:	2310      	movs	r3, #16
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A111_CS_N_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <MX_GPIO_Init+0x10c>)
 80017ec:	f000 ff98 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 80017f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_GPIO_Init+0x114>)
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_GPIO_Init+0x110>)
 8001806:	f000 ff8b 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_GPIO_Init+0x110>)
 8001824:	f000 ff7c 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001842:	f000 ff6d 	bl	8002720 <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	10110000 	.word	0x10110000

08001860 <hal_test_spi_read_chipid>:

/* USER CODE BEGIN 4 */
bool hal_test_spi_read_chipid(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
  const uint32_t sensor = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t buffer[6] = {0x30, 0x0, 0x0, 0x0, 0x0, 0x0};
 800186a:	2330      	movs	r3, #48	; 0x30
 800186c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

  acc_hal_t hal = acc_hal_integration_get_implementation();
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fc3f 	bl	8001114 <acc_hal_integration_get_implementation>
  hal.sensor_device.power_on(sensor);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800189a:	4798      	blx	r3
  hal.sensor_device.transfer(sensor, buffer, sizeof(buffer));
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018a2:	2206      	movs	r2, #6
 80018a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018a6:	4798      	blx	r3
  hal.sensor_device.power_off(sensor);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018ac:	4798      	blx	r3
  if (buffer[2] == 0x0 && buffer[3] == 0x0 && buffer[4] == 0x11 && buffer[5] == 0x12) {
 80018ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <hal_test_spi_read_chipid+0x72>
 80018b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <hal_test_spi_read_chipid+0x72>
 80018be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018c2:	2b11      	cmp	r3, #17
 80018c4:	d105      	bne.n	80018d2 <hal_test_spi_read_chipid+0x72>
 80018c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d101      	bne.n	80018d2 <hal_test_spi_read_chipid+0x72>
    //printf("Test OK!\n");
    return true;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <hal_test_spi_read_chipid+0x74>
  }
  else {
    //printf("Cannot read chip id!\n");
    return false;
 80018d2:	2300      	movs	r3, #0
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3740      	adds	r7, #64	; 0x40
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_SPI_MspInit+0x94>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d133      	bne.n	80019c6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_SPI_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001996:	23e0      	movs	r3, #224	; 0xe0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a6:	2305      	movs	r3, #5
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_SPI_MspInit+0x9c>)
 80019b2:	f000 feb5 	bl	8002720 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2023      	movs	r0, #35	; 0x23
 80019bc:	f000 fb6f 	bl	800209e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019c0:	2023      	movs	r0, #35	; 0x23
 80019c2:	f000 fb88 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_TIM_Base_MspInit+0x3c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_Base_MspInit+0x40>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_TIM_Base_MspInit+0x40>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_TIM_Base_MspInit+0x40>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_TIM_MspPostInit+0x68>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11e      	bne.n	8001a80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_TIM_MspPostInit+0x6c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a5e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_TIM_MspPostInit+0x70>)
 8001a7c:	f000 fe50 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020400 	.word	0x40020400

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_UART_MspInit+0xe0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d15a      	bne.n	8001b6c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a2e      	ldr	r2, [pc, #184]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_UART_MspInit+0xe4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b00:	2307      	movs	r3, #7
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481c      	ldr	r0, [pc, #112]	; (8001b7c <HAL_UART_MspInit+0xe8>)
 8001b0c:	f000 fe08 	bl	8002720 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_UART_MspInit+0xf0>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b52:	f000 fadb 	bl	800210c <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b5c:	f7ff febe 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
 8001b66:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_UART_MspInit+0xec>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	200009f0 	.word	0x200009f0
 8001b84:	400264b8 	.word	0x400264b8

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f942 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <SPI1_IRQHandler+0x10>)
 8001bea:	f001 fda9 	bl	8003740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000a90 	.word	0x20000a90

08001bf8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA2_Stream7_IRQHandler+0x10>)
 8001bfe:	f000 fb55 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200009f0 	.word	0x200009f0

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_kill>:

int _kill(int pid, int sig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c26:	f00a fa5b 	bl	800c0e0 <__errno>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	2316      	movs	r3, #22
 8001c2e:	6013      	str	r3, [r2, #0]
	return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_exit>:

void _exit (int status)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c4e:	e7fe      	b.n	8001c4e <_exit+0x12>

08001c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}

return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_isatty>:

int _isatty(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x50>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x16>
		heap_end = &end;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <_sbrk+0x50>)
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <_sbrk+0x54>)
 8001d08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <_sbrk+0x50>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <_sbrk+0x50>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	466a      	mov	r2, sp
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d907      	bls.n	8001d2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d1e:	f00a f9df 	bl	800c0e0 <__errno>
 8001d22:	4602      	mov	r2, r0
 8001d24:	230c      	movs	r3, #12
 8001d26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	e006      	b.n	8001d3c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <_sbrk+0x50>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <_sbrk+0x50>)
 8001d38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000190 	.word	0x20000190
 8001d48:	20000af0 	.word	0x20000af0

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <SystemInit+0x28>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x28>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x28>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
  ldr  r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd3 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f00a f9b3 	bl	800c110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fb0d 	bl	80013c8 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001db4:	08018680 	.word	0x08018680
  ldr  r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dbc:	2000016c 	.word	0x2000016c
  ldr  r2, =_sbss
 8001dc0:	2000016c 	.word	0x2000016c
  ldr  r3, = _ebss
 8001dc4:	20000af0 	.word	0x20000af0

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_Init+0x34>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_Init+0x34>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_Init+0x34>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f94d 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 f808 	bl	8001e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fd7a 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x54>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x58>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f965 	bl	80020f2 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f92d 	bl	800209e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000ae8 	.word	0x20000ae8

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000ae8 	.word	0x20000ae8

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_Delay+0x40>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <__NVIC_SetPriorityGrouping>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <SysTick_Config>:
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002054:	d301      	bcc.n	800205a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002056:	2301      	movs	r3, #1
 8002058:	e00f      	b.n	800207a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <SysTick_Config+0x40>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002062:	210f      	movs	r1, #15
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f7ff ff8e 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x40>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x40>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff29 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff3e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff8e 	bl	8001fdc <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff31 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffa2 	bl	8002044 <SysTick_Config>
 8002100:	4603      	mov	r3, r0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff feb8 	bl	8001e8c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e099      	b.n	800225c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002148:	e00f      	b.n	800216a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214a:	f7ff fe9f 	bl	8001e8c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b05      	cmp	r3, #5
 8002156:	d908      	bls.n	800216a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e078      	b.n	800225c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e8      	bne.n	800214a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_DMA_Init+0x158>)
 8002184:	4013      	ands	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4313      	orrs	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d117      	bne.n	800222e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fa0b 	bl	800262c <DMA_CheckFifoParam>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800222a:	2301      	movs	r3, #1
 800222c:	e016      	b.n	800225c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9c2 	bl	80025c0 <DMA_CalcBaseAndBitshift>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	223f      	movs	r2, #63	; 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	f010803f 	.word	0xf010803f

08002268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00c      	b.n	80022a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022b8:	4b92      	ldr	r3, [pc, #584]	; (8002504 <HAL_DMA_IRQHandler+0x258>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a92      	ldr	r2, [pc, #584]	; (8002508 <HAL_DMA_IRQHandler+0x25c>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2208      	movs	r2, #8
 80022d8:	409a      	lsls	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01a      	beq.n	8002318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2208      	movs	r2, #8
 8002306:	409a      	lsls	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2201      	movs	r2, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d012      	beq.n	800234e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2201      	movs	r2, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0202 	orr.w	r2, r3, #2
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2204      	movs	r2, #4
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2204      	movs	r2, #4
 8002372:	409a      	lsls	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2210      	movs	r2, #16
 800238a:	409a      	lsls	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d03c      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2210      	movs	r2, #16
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d018      	beq.n	80023ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
 80023da:	e01f      	b.n	800241c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e016      	b.n	800241c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0208 	bic.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2220      	movs	r2, #32
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 808e 	beq.w	800254a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8086 	beq.w	800254a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2220      	movs	r2, #32
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b05      	cmp	r3, #5
 8002454:	d136      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0216 	bic.w	r2, r2, #22
 8002464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_DMA_IRQHandler+0x1da>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0208 	bic.w	r2, r2, #8
 8002494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	223f      	movs	r2, #63	; 0x3f
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07d      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
        }
        return;
 80024c2:	e078      	b.n	80025b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01c      	beq.n	800250c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d030      	beq.n	800254a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
 80024f0:	e02b      	b.n	800254a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d027      	beq.n	800254a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
 8002502:	e022      	b.n	800254a <HAL_DMA_IRQHandler+0x29e>
 8002504:	20000000 	.word	0x20000000
 8002508:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	2b00      	cmp	r3, #0
 8002550:	d032      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d022      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2205      	movs	r2, #5
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	429a      	cmp	r2, r3
 8002580:	d307      	bcc.n	8002592 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f2      	bne.n	8002576 <HAL_DMA_IRQHandler+0x2ca>
 8002590:	e000      	b.n	8002594 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002592:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025b6:	bf00      	nop
    }
  }
}
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop

080025c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3b10      	subs	r3, #16
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <DMA_CalcBaseAndBitshift+0x64>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025da:	4a13      	ldr	r2, [pc, #76]	; (8002628 <DMA_CalcBaseAndBitshift+0x68>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d909      	bls.n	8002602 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	1d1a      	adds	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002600:	e007      	b.n	8002612 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	aaaaaaab 	.word	0xaaaaaaab
 8002628:	08011e80 	.word	0x08011e80

0800262c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11f      	bne.n	8002686 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d855      	bhi.n	80026f8 <DMA_CheckFifoParam+0xcc>
 800264c:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <DMA_CheckFifoParam+0x28>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002665 	.word	0x08002665
 8002658:	08002677 	.word	0x08002677
 800265c:	08002665 	.word	0x08002665
 8002660:	080026f9 	.word	0x080026f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d045      	beq.n	80026fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e042      	b.n	80026fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800267e:	d13f      	bne.n	8002700 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002684:	e03c      	b.n	8002700 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268e:	d121      	bne.n	80026d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d836      	bhi.n	8002704 <DMA_CheckFifoParam+0xd8>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <DMA_CheckFifoParam+0x70>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026b3 	.word	0x080026b3
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	080026c5 	.word	0x080026c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e02f      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d024      	beq.n	8002708 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e021      	b.n	8002708 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026cc:	d11e      	bne.n	800270c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026d2:	e01b      	b.n	800270c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <DMA_CheckFifoParam+0xb4>
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d003      	beq.n	80026e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026de:	e018      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e015      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      break;
 80026f6:	e00b      	b.n	8002710 <DMA_CheckFifoParam+0xe4>
      break;
 80026f8:	bf00      	nop
 80026fa:	e00a      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 80026fc:	bf00      	nop
 80026fe:	e008      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 8002700:	bf00      	nop
 8002702:	e006      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 8002704:	bf00      	nop
 8002706:	e004      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 8002708:	bf00      	nop
 800270a:	e002      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;   
 800270c:	bf00      	nop
 800270e:	e000      	b.n	8002712 <DMA_CheckFifoParam+0xe6>
      break;
 8002710:	bf00      	nop
    }
  } 
  
  return status; 
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00b      	beq.n	800277a <HAL_GPIO_Init+0x5a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276e:	2b11      	cmp	r3, #17
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b12      	cmp	r3, #18
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0xfc>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_GPIO_Init+0x2e4>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a51      	ldr	r2, [pc, #324]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a47      	ldr	r2, [pc, #284]	; (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a45      	ldr	r2, [pc, #276]	; (8002a18 <HAL_GPIO_Init+0x2f8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <HAL_GPIO_Init+0x2fc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4934      	ldr	r1, [pc, #208]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002966:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_GPIO_Init+0x300>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_GPIO_Init+0x300>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_GPIO_Init+0x300>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3724      	adds	r7, #36	; 0x24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e001      	b.n	8002a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	619a      	str	r2, [r3, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	401a      	ands	r2, r3
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d104      	bne.n	8002aaa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	041a      	lsls	r2, r3, #16
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	619a      	str	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e25b      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d075      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ada:	4ba3      	ldr	r3, [pc, #652]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d00c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4ba0      	ldr	r3, [pc, #640]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d112      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af2:	4b9d      	ldr	r3, [pc, #628]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	4b99      	ldr	r3, [pc, #612]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05b      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x108>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d157      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e236      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d106      	bne.n	8002b30 <HAL_RCC_OscConfig+0x74>
 8002b22:	4b91      	ldr	r3, [pc, #580]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a90      	ldr	r2, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e01d      	b.n	8002b6c <HAL_RCC_OscConfig+0xb0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x98>
 8002b3a:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a87      	ldr	r2, [pc, #540]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0xb0>
 8002b54:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a80      	ldr	r2, [pc, #512]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff f98a 	bl	8001e8c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f986 	bl	8001e8c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1fb      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0xc0>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff f976 	bl	8001e8c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7ff f972 	bl	8001e8c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1e7      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xe8>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d063      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d11c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b5f      	ldr	r3, [pc, #380]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	4b5c      	ldr	r3, [pc, #368]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x152>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e1bb      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4952      	ldr	r1, [pc, #328]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	e03a      	b.n	8002c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c2c:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <HAL_RCC_OscConfig+0x2b0>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7ff f92b 	bl	8001e8c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7ff f927 	bl	8001e8c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e19c      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4940      	ldr	r1, [pc, #256]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6e:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_OscConfig+0x2b0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7ff f90a 	bl	8001e8c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7ff f906 	bl	8001e8c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e17b      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d030      	beq.n	8002d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <HAL_RCC_OscConfig+0x2b4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff f8ea 	bl	8001e8c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f8e6 	bl	8001e8c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e15b      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x200>
 8002cda:	e015      	b.n	8002d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_OscConfig+0x2b4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f8d3 	bl	8001e8c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cea:	f7ff f8cf 	bl	8001e8c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e144      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a0 	beq.w	8002e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_OscConfig+0x2b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d121      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_RCC_OscConfig+0x2b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <HAL_RCC_OscConfig+0x2b8>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f895 	bl	8001e8c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e011      	b.n	8002d8a <HAL_RCC_OscConfig+0x2ce>
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	42470000 	.word	0x42470000
 8002d70:	42470e80 	.word	0x42470e80
 8002d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7ff f888 	bl	8001e8c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0fd      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b81      	ldr	r3, [pc, #516]	; (8002f90 <HAL_RCC_OscConfig+0x4d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x2f0>
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	e01c      	b.n	8002de6 <HAL_RCC_OscConfig+0x32a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x312>
 8002db4:	4b77      	ldr	r3, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	4b74      	ldr	r3, [pc, #464]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4a73      	ldr	r2, [pc, #460]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	; 0x70
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x32a>
 8002dce:	4b71      	ldr	r3, [pc, #452]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a70      	ldr	r2, [pc, #448]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a6d      	ldr	r2, [pc, #436]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7ff f84d 	bl	8001e8c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7ff f849 	bl	8001e8c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0bc      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ee      	beq.n	8002df6 <HAL_RCC_OscConfig+0x33a>
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7ff f837 	bl	8001e8c <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7ff f833 	bl	8001e8c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0a6      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a51      	ldr	r2, [pc, #324]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8092 	beq.w	8002f84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d05c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d141      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <HAL_RCC_OscConfig+0x4dc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff f807 	bl	8001e8c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e82:	f7ff f803 	bl	8001e8c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e078      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	019b      	lsls	r3, r3, #6
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	4933      	ldr	r1, [pc, #204]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x4dc>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe ffdc 	bl	8001e8c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe ffd8 	bl	8001e8c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04d      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x41c>
 8002ef6:	e045      	b.n	8002f84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_OscConfig+0x4dc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe ffc5 	bl	8001e8c <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe ffc1 	bl	8001e8c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e036      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x44a>
 8002f24:	e02e      	b.n	8002f84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e029      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_RCC_OscConfig+0x4d8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d115      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10d      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470060 	.word	0x42470060

08002f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cc      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90c      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d044      	beq.n	80030bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d119      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	2b03      	cmp	r3, #3
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e067      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7fe fefe 	bl	8001e8c <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fefa 	bl	8001e8c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e04f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20c      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4601      	mov	r1, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	fa21 f303 	lsr.w	r3, r1, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fe5e 	bl	8001e04 <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00
 8003158:	40023800 	.word	0x40023800
 800315c:	08011e68 	.word	0x08011e68
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	2300      	movs	r3, #0
 8003178:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d007      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x32>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d008      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x38>
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 808d 	bne.w	80032ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003196:	60bb      	str	r3, [r7, #8]
       break;
 8003198:	e08c      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800319a:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800319c:	60bb      	str	r3, [r7, #8]
      break;
 800319e:	e089      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031aa:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	ea03 0501 	and.w	r5, r3, r1
 80031cc:	ea04 0602 	and.w	r6, r4, r2
 80031d0:	4a3d      	ldr	r2, [pc, #244]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031d2:	fb02 f106 	mul.w	r1, r2, r6
 80031d6:	2200      	movs	r2, #0
 80031d8:	fb02 f205 	mul.w	r2, r2, r5
 80031dc:	440a      	add	r2, r1
 80031de:	493a      	ldr	r1, [pc, #232]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031e0:	fba5 0101 	umull	r0, r1, r5, r1
 80031e4:	1853      	adds	r3, r2, r1
 80031e6:	4619      	mov	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f04f 0400 	mov.w	r4, #0
 80031ee:	461a      	mov	r2, r3
 80031f0:	4623      	mov	r3, r4
 80031f2:	f7fd fce3 	bl	8000bbc <__aeabi_uldivmod>
 80031f6:	4603      	mov	r3, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e049      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	f04f 0400 	mov.w	r4, #0
 8003208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	ea03 0501 	and.w	r5, r3, r1
 8003214:	ea04 0602 	and.w	r6, r4, r2
 8003218:	4629      	mov	r1, r5
 800321a:	4632      	mov	r2, r6
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f04f 0400 	mov.w	r4, #0
 8003224:	0154      	lsls	r4, r2, #5
 8003226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800322a:	014b      	lsls	r3, r1, #5
 800322c:	4619      	mov	r1, r3
 800322e:	4622      	mov	r2, r4
 8003230:	1b49      	subs	r1, r1, r5
 8003232:	eb62 0206 	sbc.w	r2, r2, r6
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	0194      	lsls	r4, r2, #6
 8003240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003244:	018b      	lsls	r3, r1, #6
 8003246:	1a5b      	subs	r3, r3, r1
 8003248:	eb64 0402 	sbc.w	r4, r4, r2
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	00e2      	lsls	r2, r4, #3
 8003256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800325a:	00d9      	lsls	r1, r3, #3
 800325c:	460b      	mov	r3, r1
 800325e:	4614      	mov	r4, r2
 8003260:	195b      	adds	r3, r3, r5
 8003262:	eb44 0406 	adc.w	r4, r4, r6
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	02a2      	lsls	r2, r4, #10
 8003270:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003274:	0299      	lsls	r1, r3, #10
 8003276:	460b      	mov	r3, r1
 8003278:	4614      	mov	r4, r2
 800327a:	4618      	mov	r0, r3
 800327c:	4621      	mov	r1, r4
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 0400 	mov.w	r4, #0
 8003284:	461a      	mov	r2, r3
 8003286:	4623      	mov	r3, r4
 8003288:	f7fd fc98 	bl	8000bbc <__aeabi_uldivmod>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	3301      	adds	r3, #1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	60bb      	str	r3, [r7, #8]
      break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80032b0:	60bb      	str	r3, [r7, #8]
      break;
 80032b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b4:	68bb      	ldr	r3, [r7, #8]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	016e3600 	.word	0x016e3600

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff0 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ec:	4601      	mov	r1, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08011e78 	.word	0x08011e78

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003310:	f7ff ffdc 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003314:	4601      	mov	r1, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0b5b      	lsrs	r3, r3, #13
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4a03      	ldr	r2, [pc, #12]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	08011e78 	.word	0x08011e78

08003334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e056      	b.n	80033f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe faeb 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	ea42 0103 	orr.w	r1, r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0104 	and.w	r1, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08c      	sub	sp, #48	; 0x30
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800340a:	2301      	movs	r3, #1
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x26>
 800341e:	2302      	movs	r3, #2
 8003420:	e18a      	b.n	8003738 <HAL_SPI_TransmitReceive+0x33c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800342a:	f7fe fd2f 	bl	8001e8c <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003440:	887b      	ldrh	r3, [r7, #2]
 8003442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003448:	2b01      	cmp	r3, #1
 800344a:	d00f      	beq.n	800346c <HAL_SPI_TransmitReceive+0x70>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003452:	d107      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x68>
 800345c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003460:	2b04      	cmp	r3, #4
 8003462:	d003      	beq.n	800346c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003464:	2302      	movs	r3, #2
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800346a:	e15b      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_SPI_TransmitReceive+0x82>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_TransmitReceive+0x82>
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003484:	e14e      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b04      	cmp	r3, #4
 8003490:	d003      	beq.n	800349a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2205      	movs	r2, #5
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	887a      	ldrh	r2, [r7, #2]
 80034c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d007      	beq.n	80034ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f6:	d178      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_SPI_TransmitReceive+0x10a>
 8003500:	8b7b      	ldrh	r3, [r7, #26]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d166      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352a:	e053      	b.n	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d11b      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x176>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d016      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x176>
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d113      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	881a      	ldrh	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d119      	bne.n	80035b4 <HAL_SPI_TransmitReceive+0x1b8>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d014      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	b292      	uxth	r2, r2
 8003596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035b0:	2301      	movs	r3, #1
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035b4:	f7fe fc6a 	bl	8001e8c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d807      	bhi.n	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d003      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035d2:	e0a7      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1a6      	bne.n	800352c <HAL_SPI_TransmitReceive+0x130>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1a1      	bne.n	800352c <HAL_SPI_TransmitReceive+0x130>
 80035e8:	e07c      	b.n	80036e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x1fc>
 80035f2:	8b7b      	ldrh	r3, [r7, #26]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d16b      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800361e:	e057      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d11c      	bne.n	8003668 <HAL_SPI_TransmitReceive+0x26c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d017      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x26c>
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d114      	bne.n	8003668 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d119      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x2ae>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d014      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036a6:	2301      	movs	r3, #1
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036aa:	f7fe fbef 	bl	8001e8c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d803      	bhi.n	80036c2 <HAL_SPI_TransmitReceive+0x2c6>
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x2cc>
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036ce:	e029      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1a2      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x224>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d19d      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f9b1 	bl	8003a50 <SPI_EndRxTxTransaction>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003700:	e010      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	e000      	b.n	8003724 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003738:	4618      	mov	r0, r3
 800373a:	3730      	adds	r7, #48	; 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10f      	bne.n	8003784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
    return;
 8003782:	e0d8      	b.n	8003936 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_SPI_IRQHandler+0x66>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	09db      	lsrs	r3, r3, #7
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d004      	beq.n	80037a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
    return;
 80037a4:	e0c7      	b.n	8003936 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_SPI_IRQHandler+0x8c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80b5 	beq.w	8003936 <HAL_SPI_IRQHandler+0x1f6>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80ae 	beq.w	8003936 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d023      	beq.n	800382e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d011      	beq.n	8003816 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	e00b      	b.n	800382e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	693b      	ldr	r3, [r7, #16]
        return;
 800382c:	e083      	b.n	8003936 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	f043 0208 	orr.w	r2, r3, #8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	2b00      	cmp	r3, #0
 8003890:	d050      	beq.n	8003934 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_SPI_IRQHandler+0x17e>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d034      	beq.n	8003928 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0203 	bic.w	r2, r2, #3
 80038cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_SPI_IRQHandler+0x1fc>)
 80038dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fcc0 	bl	8002268 <HAL_DMA_Abort_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_SPI_IRQHandler+0x1fc>)
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fcaa 	bl	8002268 <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003926:	e003      	b.n	8003930 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f809 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800392e:	e000      	b.n	8003932 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003930:	bf00      	nop
    return;
 8003932:	bf00      	nop
 8003934:	bf00      	nop
  }
}
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08003955 	.word	0x08003955

08003940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff ffe6 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800398c:	e04c      	b.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d048      	beq.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003996:	f7fe fa79 	bl	8001e8c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d902      	bls.n	80039ac <SPI_WaitFlagStateUntilTimeout+0x30>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13d      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c4:	d111      	bne.n	80039ea <SPI_WaitFlagStateUntilTimeout+0x6e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ce:	d004      	beq.n	80039da <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	d107      	bne.n	80039ea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f2:	d10f      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e00f      	b.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d1a3      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <SPI_EndRxTxTransaction+0x7c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <SPI_EndRxTxTransaction+0x80>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0d5b      	lsrs	r3, r3, #21
 8003a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7a:	d112      	bne.n	8003aa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff ff78 	bl	800397c <SPI_WaitFlagStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d0f2      	beq.n	8003aa2 <SPI_EndRxTxTransaction+0x52>
 8003abc:	e000      	b.n	8003ac0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003abe:	bf00      	nop
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	165e9f81 	.word	0x165e9f81

08003ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e01d      	b.n	8003b22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd ff6e 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f000 f9ee 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e01d      	b.n	8003b78 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f815 	bl	8003b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 f9c3 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fc4a 	bl	8004440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <HAL_TIM_PWM_Start+0x60>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000

08003bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0b4      	b.n	8003d7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	f200 809f 	bhi.w	8003d68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003d69 	.word	0x08003d69
 8003c38:	08003d69 	.word	0x08003d69
 8003c3c:	08003d69 	.word	0x08003d69
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003d69 	.word	0x08003d69
 8003c48:	08003d69 	.word	0x08003d69
 8003c4c:	08003d69 	.word	0x08003d69
 8003c50:	08003ce7 	.word	0x08003ce7
 8003c54:	08003d69 	.word	0x08003d69
 8003c58:	08003d69 	.word	0x08003d69
 8003c5c:	08003d69 	.word	0x08003d69
 8003c60:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f9c2 	bl	8003ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	619a      	str	r2, [r3, #24]
      break;
 8003ca2:	e062      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa08 	bl	80040c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	021a      	lsls	r2, r3, #8
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]
      break;
 8003ce4:	e041      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fa53 	bl	8004198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0208 	orr.w	r2, r2, #8
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
      break;
 8003d24:	e021      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fa9d 	bl	800426c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_ConfigClockSource+0x18>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0a6      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x166>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d067      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0x120>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d80b      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x6c>
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d073      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x140>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d802      	bhi.n	8003de6 <HAL_TIM_ConfigClockSource+0x62>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d06f      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003de4:	e078      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d06c      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x140>
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d06a      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dee:	e073      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003df0:	2b70      	cmp	r3, #112	; 0x70
 8003df2:	d00d      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x8c>
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d804      	bhi.n	8003e02 <HAL_TIM_ConfigClockSource+0x7e>
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d033      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0xe0>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d041      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e00:	e06a      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	d066      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x152>
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d017      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e0e:	e063      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f000 faee 	bl	8004400 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e04c      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f000 fad7 	bl	8004400 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e60:	609a      	str	r2, [r3, #8]
      break;
 8003e62:	e039      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f000 fa4b 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2150      	movs	r1, #80	; 0x50
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 faa4 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003e82:	e029      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 fa6a 	bl	800436a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2160      	movs	r1, #96	; 0x60
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fa94 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003ea2:	e019      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 fa2b 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fa84 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e009      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 fa7b 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a34      	ldr	r2, [pc, #208]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00f      	beq.n	8003f2c <TIM_Base_SetConfig+0x38>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d00b      	beq.n	8003f2c <TIM_Base_SetConfig+0x38>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0x38>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <TIM_Base_SetConfig+0xec>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0x38>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01b      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d017      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <TIM_Base_SetConfig+0xe8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <TIM_Base_SetConfig+0xec>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00f      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <TIM_Base_SetConfig+0xf0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00b      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <TIM_Base_SetConfig+0xf4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <TIM_Base_SetConfig+0xf8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d003      	beq.n	8003f7e <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <TIM_Base_SetConfig+0xfc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d108      	bne.n	8003f90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <TIM_Base_SetConfig+0xe4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d103      	bne.n	8003fc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	615a      	str	r2, [r3, #20]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800

08003ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <TIM_OC1_SetConfig+0xc8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10c      	bne.n	800406a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0308 	bic.w	r3, r3, #8
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <TIM_OC1_SetConfig+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d111      	bne.n	8004096 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40010000 	.word	0x40010000

080040c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f023 0210 	bic.w	r2, r3, #16
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0320 	bic.w	r3, r3, #32
 800410a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <TIM_OC2_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10d      	bne.n	800413c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <TIM_OC2_SetConfig+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d113      	bne.n	800416c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000

08004198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <TIM_OC3_SetConfig+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10d      	bne.n	8004212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <TIM_OC3_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d113      	bne.n	8004242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40010000 	.word	0x40010000

0800426c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <TIM_OC4_SetConfig+0x9c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	019b      	lsls	r3, r3, #6
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f023 0210 	bic.w	r2, r3, #16
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800441a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e050      	b.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d013      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10c      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4313      	orrs	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e03f      	b.n	80045fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fa80 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f829 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004646:	f023 030c 	bic.w	r3, r3, #12
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	430b      	orrs	r3, r1
 8004652:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004672:	f040 818b 	bne.w	800498c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4ac1      	ldr	r2, [pc, #772]	; (8004980 <UART_SetConfig+0x37c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d005      	beq.n	800468c <UART_SetConfig+0x88>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4abf      	ldr	r2, [pc, #764]	; (8004984 <UART_SetConfig+0x380>)
 8004686:	4293      	cmp	r3, r2
 8004688:	f040 80bd 	bne.w	8004806 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe fe3e 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8004690:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	461d      	mov	r5, r3
 8004696:	f04f 0600 	mov.w	r6, #0
 800469a:	46a8      	mov	r8, r5
 800469c:	46b1      	mov	r9, r6
 800469e:	eb18 0308 	adds.w	r3, r8, r8
 80046a2:	eb49 0409 	adc.w	r4, r9, r9
 80046a6:	4698      	mov	r8, r3
 80046a8:	46a1      	mov	r9, r4
 80046aa:	eb18 0805 	adds.w	r8, r8, r5
 80046ae:	eb49 0906 	adc.w	r9, r9, r6
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046c6:	4688      	mov	r8, r1
 80046c8:	4691      	mov	r9, r2
 80046ca:	eb18 0005 	adds.w	r0, r8, r5
 80046ce:	eb49 0106 	adc.w	r1, r9, r6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	461d      	mov	r5, r3
 80046d8:	f04f 0600 	mov.w	r6, #0
 80046dc:	196b      	adds	r3, r5, r5
 80046de:	eb46 0406 	adc.w	r4, r6, r6
 80046e2:	461a      	mov	r2, r3
 80046e4:	4623      	mov	r3, r4
 80046e6:	f7fc fa69 	bl	8000bbc <__aeabi_uldivmod>
 80046ea:	4603      	mov	r3, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	461a      	mov	r2, r3
 80046f0:	4ba5      	ldr	r3, [pc, #660]	; (8004988 <UART_SetConfig+0x384>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	461d      	mov	r5, r3
 8004700:	f04f 0600 	mov.w	r6, #0
 8004704:	46a9      	mov	r9, r5
 8004706:	46b2      	mov	sl, r6
 8004708:	eb19 0309 	adds.w	r3, r9, r9
 800470c:	eb4a 040a 	adc.w	r4, sl, sl
 8004710:	4699      	mov	r9, r3
 8004712:	46a2      	mov	sl, r4
 8004714:	eb19 0905 	adds.w	r9, r9, r5
 8004718:	eb4a 0a06 	adc.w	sl, sl, r6
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800472c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004730:	4689      	mov	r9, r1
 8004732:	4692      	mov	sl, r2
 8004734:	eb19 0005 	adds.w	r0, r9, r5
 8004738:	eb4a 0106 	adc.w	r1, sl, r6
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	461d      	mov	r5, r3
 8004742:	f04f 0600 	mov.w	r6, #0
 8004746:	196b      	adds	r3, r5, r5
 8004748:	eb46 0406 	adc.w	r4, r6, r6
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	f7fc fa34 	bl	8000bbc <__aeabi_uldivmod>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	461a      	mov	r2, r3
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <UART_SetConfig+0x384>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	; 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	3332      	adds	r3, #50	; 0x32
 800476e:	4a86      	ldr	r2, [pc, #536]	; (8004988 <UART_SetConfig+0x384>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800477c:	4498      	add	r8, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	461d      	mov	r5, r3
 8004782:	f04f 0600 	mov.w	r6, #0
 8004786:	46a9      	mov	r9, r5
 8004788:	46b2      	mov	sl, r6
 800478a:	eb19 0309 	adds.w	r3, r9, r9
 800478e:	eb4a 040a 	adc.w	r4, sl, sl
 8004792:	4699      	mov	r9, r3
 8004794:	46a2      	mov	sl, r4
 8004796:	eb19 0905 	adds.w	r9, r9, r5
 800479a:	eb4a 0a06 	adc.w	sl, sl, r6
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047b2:	4689      	mov	r9, r1
 80047b4:	4692      	mov	sl, r2
 80047b6:	eb19 0005 	adds.w	r0, r9, r5
 80047ba:	eb4a 0106 	adc.w	r1, sl, r6
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	461d      	mov	r5, r3
 80047c4:	f04f 0600 	mov.w	r6, #0
 80047c8:	196b      	adds	r3, r5, r5
 80047ca:	eb46 0406 	adc.w	r4, r6, r6
 80047ce:	461a      	mov	r2, r3
 80047d0:	4623      	mov	r3, r4
 80047d2:	f7fc f9f3 	bl	8000bbc <__aeabi_uldivmod>
 80047d6:	4603      	mov	r3, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	461a      	mov	r2, r3
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <UART_SetConfig+0x384>)
 80047de:	fba3 1302 	umull	r1, r3, r3, r2
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2164      	movs	r1, #100	; 0x64
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	3332      	adds	r3, #50	; 0x32
 80047f0:	4a65      	ldr	r2, [pc, #404]	; (8004988 <UART_SetConfig+0x384>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	f003 0207 	and.w	r2, r3, #7
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4442      	add	r2, r8
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	e26f      	b.n	8004ce6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004806:	f7fe fd6d 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 800480a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	461d      	mov	r5, r3
 8004810:	f04f 0600 	mov.w	r6, #0
 8004814:	46a8      	mov	r8, r5
 8004816:	46b1      	mov	r9, r6
 8004818:	eb18 0308 	adds.w	r3, r8, r8
 800481c:	eb49 0409 	adc.w	r4, r9, r9
 8004820:	4698      	mov	r8, r3
 8004822:	46a1      	mov	r9, r4
 8004824:	eb18 0805 	adds.w	r8, r8, r5
 8004828:	eb49 0906 	adc.w	r9, r9, r6
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004838:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800483c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004840:	4688      	mov	r8, r1
 8004842:	4691      	mov	r9, r2
 8004844:	eb18 0005 	adds.w	r0, r8, r5
 8004848:	eb49 0106 	adc.w	r1, r9, r6
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	461d      	mov	r5, r3
 8004852:	f04f 0600 	mov.w	r6, #0
 8004856:	196b      	adds	r3, r5, r5
 8004858:	eb46 0406 	adc.w	r4, r6, r6
 800485c:	461a      	mov	r2, r3
 800485e:	4623      	mov	r3, r4
 8004860:	f7fc f9ac 	bl	8000bbc <__aeabi_uldivmod>
 8004864:	4603      	mov	r3, r0
 8004866:	460c      	mov	r4, r1
 8004868:	461a      	mov	r2, r3
 800486a:	4b47      	ldr	r3, [pc, #284]	; (8004988 <UART_SetConfig+0x384>)
 800486c:	fba3 2302 	umull	r2, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	461d      	mov	r5, r3
 800487a:	f04f 0600 	mov.w	r6, #0
 800487e:	46a9      	mov	r9, r5
 8004880:	46b2      	mov	sl, r6
 8004882:	eb19 0309 	adds.w	r3, r9, r9
 8004886:	eb4a 040a 	adc.w	r4, sl, sl
 800488a:	4699      	mov	r9, r3
 800488c:	46a2      	mov	sl, r4
 800488e:	eb19 0905 	adds.w	r9, r9, r5
 8004892:	eb4a 0a06 	adc.w	sl, sl, r6
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048aa:	4689      	mov	r9, r1
 80048ac:	4692      	mov	sl, r2
 80048ae:	eb19 0005 	adds.w	r0, r9, r5
 80048b2:	eb4a 0106 	adc.w	r1, sl, r6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	461d      	mov	r5, r3
 80048bc:	f04f 0600 	mov.w	r6, #0
 80048c0:	196b      	adds	r3, r5, r5
 80048c2:	eb46 0406 	adc.w	r4, r6, r6
 80048c6:	461a      	mov	r2, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	f7fc f977 	bl	8000bbc <__aeabi_uldivmod>
 80048ce:	4603      	mov	r3, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <UART_SetConfig+0x384>)
 80048d6:	fba3 1302 	umull	r1, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2164      	movs	r1, #100	; 0x64
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a27      	ldr	r2, [pc, #156]	; (8004988 <UART_SetConfig+0x384>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f6:	4498      	add	r8, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	461d      	mov	r5, r3
 80048fc:	f04f 0600 	mov.w	r6, #0
 8004900:	46a9      	mov	r9, r5
 8004902:	46b2      	mov	sl, r6
 8004904:	eb19 0309 	adds.w	r3, r9, r9
 8004908:	eb4a 040a 	adc.w	r4, sl, sl
 800490c:	4699      	mov	r9, r3
 800490e:	46a2      	mov	sl, r4
 8004910:	eb19 0905 	adds.w	r9, r9, r5
 8004914:	eb4a 0a06 	adc.w	sl, sl, r6
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004924:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004928:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800492c:	4689      	mov	r9, r1
 800492e:	4692      	mov	sl, r2
 8004930:	eb19 0005 	adds.w	r0, r9, r5
 8004934:	eb4a 0106 	adc.w	r1, sl, r6
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	461d      	mov	r5, r3
 800493e:	f04f 0600 	mov.w	r6, #0
 8004942:	196b      	adds	r3, r5, r5
 8004944:	eb46 0406 	adc.w	r4, r6, r6
 8004948:	461a      	mov	r2, r3
 800494a:	4623      	mov	r3, r4
 800494c:	f7fc f936 	bl	8000bbc <__aeabi_uldivmod>
 8004950:	4603      	mov	r3, r0
 8004952:	460c      	mov	r4, r1
 8004954:	461a      	mov	r2, r3
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <UART_SetConfig+0x384>)
 8004958:	fba3 1302 	umull	r1, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2164      	movs	r1, #100	; 0x64
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <UART_SetConfig+0x384>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	f003 0207 	and.w	r2, r3, #7
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4442      	add	r2, r8
 800497c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800497e:	e1b2      	b.n	8004ce6 <UART_SetConfig+0x6e2>
 8004980:	40011000 	.word	0x40011000
 8004984:	40011400 	.word	0x40011400
 8004988:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4ad7      	ldr	r2, [pc, #860]	; (8004cf0 <UART_SetConfig+0x6ec>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d005      	beq.n	80049a2 <UART_SetConfig+0x39e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4ad6      	ldr	r2, [pc, #856]	; (8004cf4 <UART_SetConfig+0x6f0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	f040 80d1 	bne.w	8004b44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a2:	f7fe fcb3 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 80049a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	469a      	mov	sl, r3
 80049ac:	f04f 0b00 	mov.w	fp, #0
 80049b0:	46d0      	mov	r8, sl
 80049b2:	46d9      	mov	r9, fp
 80049b4:	eb18 0308 	adds.w	r3, r8, r8
 80049b8:	eb49 0409 	adc.w	r4, r9, r9
 80049bc:	4698      	mov	r8, r3
 80049be:	46a1      	mov	r9, r4
 80049c0:	eb18 080a 	adds.w	r8, r8, sl
 80049c4:	eb49 090b 	adc.w	r9, r9, fp
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049dc:	4688      	mov	r8, r1
 80049de:	4691      	mov	r9, r2
 80049e0:	eb1a 0508 	adds.w	r5, sl, r8
 80049e4:	eb4b 0609 	adc.w	r6, fp, r9
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4619      	mov	r1, r3
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f04f 0400 	mov.w	r4, #0
 80049fa:	0094      	lsls	r4, r2, #2
 80049fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a00:	008b      	lsls	r3, r1, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	4623      	mov	r3, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	4631      	mov	r1, r6
 8004a0a:	f7fc f8d7 	bl	8000bbc <__aeabi_uldivmod>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	461a      	mov	r2, r3
 8004a14:	4bb8      	ldr	r3, [pc, #736]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004a16:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	469b      	mov	fp, r3
 8004a24:	f04f 0c00 	mov.w	ip, #0
 8004a28:	46d9      	mov	r9, fp
 8004a2a:	46e2      	mov	sl, ip
 8004a2c:	eb19 0309 	adds.w	r3, r9, r9
 8004a30:	eb4a 040a 	adc.w	r4, sl, sl
 8004a34:	4699      	mov	r9, r3
 8004a36:	46a2      	mov	sl, r4
 8004a38:	eb19 090b 	adds.w	r9, r9, fp
 8004a3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a54:	4689      	mov	r9, r1
 8004a56:	4692      	mov	sl, r2
 8004a58:	eb1b 0509 	adds.w	r5, fp, r9
 8004a5c:	eb4c 060a 	adc.w	r6, ip, sl
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f04f 0400 	mov.w	r4, #0
 8004a72:	0094      	lsls	r4, r2, #2
 8004a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	4631      	mov	r1, r6
 8004a82:	f7fc f89b 	bl	8000bbc <__aeabi_uldivmod>
 8004a86:	4603      	mov	r3, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b9a      	ldr	r3, [pc, #616]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2164      	movs	r1, #100	; 0x64
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	; 0x32
 8004aa0:	4a95      	ldr	r2, [pc, #596]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aac:	4498      	add	r8, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	469b      	mov	fp, r3
 8004ab2:	f04f 0c00 	mov.w	ip, #0
 8004ab6:	46d9      	mov	r9, fp
 8004ab8:	46e2      	mov	sl, ip
 8004aba:	eb19 0309 	adds.w	r3, r9, r9
 8004abe:	eb4a 040a 	adc.w	r4, sl, sl
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	46a2      	mov	sl, r4
 8004ac6:	eb19 090b 	adds.w	r9, r9, fp
 8004aca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ada:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ade:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ae2:	4689      	mov	r9, r1
 8004ae4:	4692      	mov	sl, r2
 8004ae6:	eb1b 0509 	adds.w	r5, fp, r9
 8004aea:	eb4c 060a 	adc.w	r6, ip, sl
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4619      	mov	r1, r3
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	0094      	lsls	r4, r2, #2
 8004b02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	4631      	mov	r1, r6
 8004b10:	f7fc f854 	bl	8000bbc <__aeabi_uldivmod>
 8004b14:	4603      	mov	r3, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b77      	ldr	r3, [pc, #476]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	2164      	movs	r1, #100	; 0x64
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	3332      	adds	r3, #50	; 0x32
 8004b2e:	4a72      	ldr	r2, [pc, #456]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4442      	add	r2, r8
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	e0d0      	b.n	8004ce6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7fe fbce 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8004b48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	f04f 0b00 	mov.w	fp, #0
 8004b52:	46d0      	mov	r8, sl
 8004b54:	46d9      	mov	r9, fp
 8004b56:	eb18 0308 	adds.w	r3, r8, r8
 8004b5a:	eb49 0409 	adc.w	r4, r9, r9
 8004b5e:	4698      	mov	r8, r3
 8004b60:	46a1      	mov	r9, r4
 8004b62:	eb18 080a 	adds.w	r8, r8, sl
 8004b66:	eb49 090b 	adc.w	r9, r9, fp
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b7e:	4688      	mov	r8, r1
 8004b80:	4691      	mov	r9, r2
 8004b82:	eb1a 0508 	adds.w	r5, sl, r8
 8004b86:	eb4b 0609 	adc.w	r6, fp, r9
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	0094      	lsls	r4, r2, #2
 8004b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	4631      	mov	r1, r6
 8004bac:	f7fc f806 	bl	8000bbc <__aeabi_uldivmod>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	469b      	mov	fp, r3
 8004bc6:	f04f 0c00 	mov.w	ip, #0
 8004bca:	46d9      	mov	r9, fp
 8004bcc:	46e2      	mov	sl, ip
 8004bce:	eb19 0309 	adds.w	r3, r9, r9
 8004bd2:	eb4a 040a 	adc.w	r4, sl, sl
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	46a2      	mov	sl, r4
 8004bda:	eb19 090b 	adds.w	r9, r9, fp
 8004bde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bf6:	4689      	mov	r9, r1
 8004bf8:	4692      	mov	sl, r2
 8004bfa:	eb1b 0509 	adds.w	r5, fp, r9
 8004bfe:	eb4c 060a 	adc.w	r6, ip, sl
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4619      	mov	r1, r3
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	f04f 0400 	mov.w	r4, #0
 8004c14:	0094      	lsls	r4, r2, #2
 8004c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c1a:	008b      	lsls	r3, r1, #2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4623      	mov	r3, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	4631      	mov	r1, r6
 8004c24:	f7fb ffca 	bl	8000bbc <__aeabi_uldivmod>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004c30:	fba3 1302 	umull	r1, r3, r3, r2
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	2164      	movs	r1, #100	; 0x64
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	3332      	adds	r3, #50	; 0x32
 8004c42:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4e:	4498      	add	r8, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	469b      	mov	fp, r3
 8004c54:	f04f 0c00 	mov.w	ip, #0
 8004c58:	46d9      	mov	r9, fp
 8004c5a:	46e2      	mov	sl, ip
 8004c5c:	eb19 0309 	adds.w	r3, r9, r9
 8004c60:	eb4a 040a 	adc.w	r4, sl, sl
 8004c64:	4699      	mov	r9, r3
 8004c66:	46a2      	mov	sl, r4
 8004c68:	eb19 090b 	adds.w	r9, r9, fp
 8004c6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c84:	4689      	mov	r9, r1
 8004c86:	4692      	mov	sl, r2
 8004c88:	eb1b 0509 	adds.w	r5, fp, r9
 8004c8c:	eb4c 060a 	adc.w	r6, ip, sl
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4619      	mov	r1, r3
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	0094      	lsls	r4, r2, #2
 8004ca4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ca8:	008b      	lsls	r3, r1, #2
 8004caa:	461a      	mov	r2, r3
 8004cac:	4623      	mov	r3, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	f7fb ff83 	bl	8000bbc <__aeabi_uldivmod>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2164      	movs	r1, #100	; 0x64
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <UART_SetConfig+0x6f4>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4442      	add	r2, r8
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	e7ff      	b.n	8004ce6 <UART_SetConfig+0x6e2>
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40011400 	.word	0x40011400
 8004cf8:	51eb851f 	.word	0x51eb851f

08004cfc <acc_rss_activate>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d15      	ldr	r5, [pc, #84]	; (8004d54 <acc_rss_activate+0x58>)
 8004d00:	782c      	ldrb	r4, [r5, #0]
 8004d02:	b92c      	cbnz	r4, 8004d10 <acc_rss_activate+0x14>
 8004d04:	b110      	cbz	r0, 8004d0c <acc_rss_activate+0x10>
 8004d06:	f001 ff33 	bl	8006b70 <acc_integration_register>
 8004d0a:	b948      	cbnz	r0, 8004d20 <acc_rss_activate+0x24>
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <acc_rss_activate+0x5c>)
 8004d12:	4912      	ldr	r1, [pc, #72]	; (8004d5c <acc_rss_activate+0x60>)
 8004d14:	2002      	movs	r0, #2
 8004d16:	f001 ffdf 	bl	8006cd8 <acc_log_rss>
 8004d1a:	782c      	ldrb	r4, [r5, #0]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	f000 f9e2 	bl	80050e8 <acc_service_manager_activate>
 8004d24:	b930      	cbnz	r0, 8004d34 <acc_rss_activate+0x38>
 8004d26:	7828      	ldrb	r0, [r5, #0]
 8004d28:	b970      	cbnz	r0, 8004d48 <acc_rss_activate+0x4c>
 8004d2a:	4a0d      	ldr	r2, [pc, #52]	; (8004d60 <acc_rss_activate+0x64>)
 8004d2c:	490b      	ldr	r1, [pc, #44]	; (8004d5c <acc_rss_activate+0x60>)
 8004d2e:	f001 ffd3 	bl	8006cd8 <acc_log_rss>
 8004d32:	e7f2      	b.n	8004d1a <acc_rss_activate+0x1e>
 8004d34:	f000 fbba 	bl	80054ac <acc_session_manager_activate>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d0f4      	beq.n	8004d26 <acc_rss_activate+0x2a>
 8004d3c:	f000 fd90 	bl	8005860 <acc_sensor_manager_activate>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0f0      	beq.n	8004d26 <acc_rss_activate+0x2a>
 8004d44:	2301      	movs	r3, #1
 8004d46:	702b      	strb	r3, [r5, #0]
 8004d48:	4a06      	ldr	r2, [pc, #24]	; (8004d64 <acc_rss_activate+0x68>)
 8004d4a:	4904      	ldr	r1, [pc, #16]	; (8004d5c <acc_rss_activate+0x60>)
 8004d4c:	2002      	movs	r0, #2
 8004d4e:	f001 ffc3 	bl	8006cd8 <acc_log_rss>
 8004d52:	e7e2      	b.n	8004d1a <acc_rss_activate+0x1e>
 8004d54:	20000194 	.word	0x20000194
 8004d58:	08011ec4 	.word	0x08011ec4
 8004d5c:	08011ea8 	.word	0x08011ea8
 8004d60:	08011eac 	.word	0x08011eac
 8004d64:	08011e88 	.word	0x08011e88

08004d68 <acc_rss_deactivate>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4c0a      	ldr	r4, [pc, #40]	; (8004d94 <acc_rss_deactivate+0x2c>)
 8004d6c:	7823      	ldrb	r3, [r4, #0]
 8004d6e:	b903      	cbnz	r3, 8004d72 <acc_rss_deactivate+0xa>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	f000 f9cf 	bl	8005114 <acc_service_manager_deactivate>
 8004d76:	f000 fba3 	bl	80054c0 <acc_session_manager_deactivate>
 8004d7a:	f000 fdbb 	bl	80058f4 <acc_sensor_manager_deactivate>
 8004d7e:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <acc_rss_deactivate+0x30>)
 8004d80:	4906      	ldr	r1, [pc, #24]	; (8004d9c <acc_rss_deactivate+0x34>)
 8004d82:	2002      	movs	r0, #2
 8004d84:	f001 ffa8 	bl	8006cd8 <acc_log_rss>
 8004d88:	f001 ff28 	bl	8006bdc <acc_integration_unregister>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	7023      	strb	r3, [r4, #0]
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	20000194 	.word	0x20000194
 8004d98:	08011eec 	.word	0x08011eec
 8004d9c:	08011ea8 	.word	0x08011ea8

08004da0 <acc_service_get_base_configuration>:
 8004da0:	b108      	cbz	r0, 8004da6 <acc_service_get_base_configuration+0x6>
 8004da2:	6980      	ldr	r0, [r0, #24]
 8004da4:	4770      	bx	lr
 8004da6:	b510      	push	{r4, lr}
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <acc_service_get_base_configuration+0x18>)
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <acc_service_get_base_configuration+0x1c>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	2001      	movs	r0, #1
 8004db0:	f001 ff92 	bl	8006cd8 <acc_log_rss>
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd10      	pop	{r4, pc}
 8004db8:	08011fc8 	.word	0x08011fc8
 8004dbc:	08011fe4 	.word	0x08011fe4

08004dc0 <acc_service_activate>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <acc_service_activate+0x48>)
 8004dc4:	781c      	ldrb	r4, [r3, #0]
 8004dc6:	b1bc      	cbz	r4, 8004df8 <acc_service_activate+0x38>
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b118      	cbz	r0, 8004dd4 <acc_service_activate+0x14>
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <acc_service_activate+0x4c>)
 8004dce:	6802      	ldr	r2, [r0, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d007      	beq.n	8004de4 <acc_service_activate+0x24>
 8004dd4:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <acc_service_activate+0x50>)
 8004dd6:	490f      	ldr	r1, [pc, #60]	; (8004e14 <acc_service_activate+0x54>)
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f001 ff7d 	bl	8006cd8 <acc_log_rss>
 8004dde:	2400      	movs	r4, #0
 8004de0:	4620      	mov	r0, r4
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	7b03      	ldrb	r3, [r0, #12]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d1fa      	bne.n	8004de0 <acc_service_activate+0x20>
 8004dea:	69c0      	ldr	r0, [r0, #28]
 8004dec:	b108      	cbz	r0, 8004df2 <acc_service_activate+0x32>
 8004dee:	f000 fc43 	bl	8005678 <acc_session_sweep_and_processing_activate>
 8004df2:	2300      	movs	r3, #0
 8004df4:	732b      	strb	r3, [r5, #12]
 8004df6:	e7f3      	b.n	8004de0 <acc_service_activate+0x20>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <acc_service_activate+0x58>)
 8004dfc:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <acc_service_activate+0x5c>)
 8004dfe:	4905      	ldr	r1, [pc, #20]	; (8004e14 <acc_service_activate+0x54>)
 8004e00:	f001 ff6a 	bl	8006cd8 <acc_log_rss>
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	20000195 	.word	0x20000195
 8004e0c:	acc09ee8 	.word	0xacc09ee8
 8004e10:	08011f40 	.word	0x08011f40
 8004e14:	08011fe4 	.word	0x08011fe4
 8004e18:	08011f10 	.word	0x08011f10
 8004e1c:	08011f60 	.word	0x08011f60

08004e20 <acc_service_deactivate>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <acc_service_deactivate+0x50>)
 8004e24:	781c      	ldrb	r4, [r3, #0]
 8004e26:	b1d4      	cbz	r4, 8004e5e <acc_service_deactivate+0x3e>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	b118      	cbz	r0, 8004e34 <acc_service_deactivate+0x14>
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <acc_service_deactivate+0x54>)
 8004e2e:	6802      	ldr	r2, [r0, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d007      	beq.n	8004e44 <acc_service_deactivate+0x24>
 8004e34:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <acc_service_deactivate+0x58>)
 8004e36:	4911      	ldr	r1, [pc, #68]	; (8004e7c <acc_service_deactivate+0x5c>)
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f001 ff4d 	bl	8006cd8 <acc_log_rss>
 8004e3e:	2400      	movs	r4, #0
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	7b03      	ldrb	r3, [r0, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1fa      	bne.n	8004e40 <acc_service_deactivate+0x20>
 8004e4a:	69c0      	ldr	r0, [r0, #28]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	732b      	strb	r3, [r5, #12]
 8004e50:	b108      	cbz	r0, 8004e56 <acc_service_deactivate+0x36>
 8004e52:	f000 fc4d 	bl	80056f0 <acc_session_sweep_and_processing_deactivate>
 8004e56:	2302      	movs	r3, #2
 8004e58:	732b      	strb	r3, [r5, #12]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <acc_service_deactivate+0x60>)
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <acc_service_deactivate+0x64>)
 8004e62:	4906      	ldr	r1, [pc, #24]	; (8004e7c <acc_service_deactivate+0x5c>)
 8004e64:	2001      	movs	r0, #1
 8004e66:	f001 ff37 	bl	8006cd8 <acc_log_rss>
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000195 	.word	0x20000195
 8004e74:	acc09ee8 	.word	0xacc09ee8
 8004e78:	08011f40 	.word	0x08011f40
 8004e7c:	08011fe4 	.word	0x08011fe4
 8004e80:	08011f28 	.word	0x08011f28
 8004e84:	08011f60 	.word	0x08011f60

08004e88 <acc_service_create_sweep_session>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4628      	mov	r0, r5
 8004e92:	461a      	mov	r2, r3
 8004e94:	9b04      	ldr	r3, [sp, #16]
 8004e96:	f000 fbb3 	bl	8005600 <acc_session_sweep_and_processing_create>
 8004e9a:	61e0      	str	r0, [r4, #28]
 8004e9c:	3000      	adds	r0, #0
 8004e9e:	bf18      	it	ne
 8004ea0:	2001      	movne	r0, #1
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}

08004ea4 <acc_service_get_configuration_output>:
 8004ea4:	69c0      	ldr	r0, [r0, #28]
 8004ea6:	f000 bc83 	b.w	80057b0 <acc_session_sweep_and_processing_get_configuration_output>
 8004eaa:	bf00      	nop

08004eac <acc_service_destroy_sweep_session>:
 8004eac:	69c3      	ldr	r3, [r0, #28]
 8004eae:	b113      	cbz	r3, 8004eb6 <acc_service_destroy_sweep_session+0xa>
 8004eb0:	301c      	adds	r0, #28
 8004eb2:	f000 bc4d 	b.w	8005750 <acc_session_sweep_and_processing_destroy>
 8004eb6:	4770      	bx	lr

08004eb8 <acc_service_get_next>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	460d      	mov	r5, r1
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b118      	cbz	r0, 8004eca <acc_service_get_next+0x12>
 8004ec2:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <acc_service_get_next+0xe0>)
 8004ec4:	6802      	ldr	r2, [r0, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d013      	beq.n	8004ef2 <acc_service_get_next+0x3a>
 8004eca:	4a34      	ldr	r2, [pc, #208]	; (8004f9c <acc_service_get_next+0xe4>)
 8004ecc:	4934      	ldr	r1, [pc, #208]	; (8004fa0 <acc_service_get_next+0xe8>)
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f001 ff02 	bl	8006cd8 <acc_log_rss>
 8004ed4:	686b      	ldr	r3, [r5, #4]
 8004ed6:	b183      	cbz	r3, 8004efa <acc_service_get_next+0x42>
 8004ed8:	68ab      	ldr	r3, [r5, #8]
 8004eda:	b173      	cbz	r3, 8004efa <acc_service_get_next+0x42>
 8004edc:	7b23      	ldrb	r3, [r4, #12]
 8004ede:	b123      	cbz	r3, 8004eea <acc_service_get_next+0x32>
 8004ee0:	4a30      	ldr	r2, [pc, #192]	; (8004fa4 <acc_service_get_next+0xec>)
 8004ee2:	492f      	ldr	r1, [pc, #188]	; (8004fa0 <acc_service_get_next+0xe8>)
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f001 fef7 	bl	8006cd8 <acc_log_rss>
 8004eea:	2500      	movs	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	684b      	ldr	r3, [r1, #4]
 8004ef4:	b10b      	cbz	r3, 8004efa <acc_service_get_next+0x42>
 8004ef6:	688b      	ldr	r3, [r1, #8]
 8004ef8:	b92b      	cbnz	r3, 8004f06 <acc_service_get_next+0x4e>
 8004efa:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <acc_service_get_next+0xf0>)
 8004efc:	4928      	ldr	r1, [pc, #160]	; (8004fa0 <acc_service_get_next+0xe8>)
 8004efe:	2000      	movs	r0, #0
 8004f00:	f001 feea 	bl	8006cd8 <acc_log_rss>
 8004f04:	e7ea      	b.n	8004edc <acc_service_get_next+0x24>
 8004f06:	6883      	ldr	r3, [r0, #8]
 8004f08:	780a      	ldrb	r2, [r1, #0]
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d006      	beq.n	8004f1e <acc_service_get_next+0x66>
 8004f10:	9200      	str	r2, [sp, #0]
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <acc_service_get_next+0xf4>)
 8004f14:	4922      	ldr	r1, [pc, #136]	; (8004fa0 <acc_service_get_next+0xe8>)
 8004f16:	2000      	movs	r0, #0
 8004f18:	f001 fede 	bl	8006cd8 <acc_log_rss>
 8004f1c:	e7de      	b.n	8004edc <acc_service_get_next+0x24>
 8004f1e:	69c0      	ldr	r0, [r0, #28]
 8004f20:	784e      	ldrb	r6, [r1, #1]
 8004f22:	f000 fc49 	bl	80057b8 <acc_session_sweep_and_processing_get_output_type>
 8004f26:	4286      	cmp	r6, r0
 8004f28:	d006      	beq.n	8004f38 <acc_service_get_next+0x80>
 8004f2a:	69e0      	ldr	r0, [r4, #28]
 8004f2c:	f000 fc44 	bl	80057b8 <acc_session_sweep_and_processing_get_output_type>
 8004f30:	9600      	str	r6, [sp, #0]
 8004f32:	4603      	mov	r3, r0
 8004f34:	4a1e      	ldr	r2, [pc, #120]	; (8004fb0 <acc_service_get_next+0xf8>)
 8004f36:	e7ed      	b.n	8004f14 <acc_service_get_next+0x5c>
 8004f38:	7d2e      	ldrb	r6, [r5, #20]
 8004f3a:	b9e6      	cbnz	r6, 8004f76 <acc_service_get_next+0xbe>
 8004f3c:	7b23      	ldrb	r3, [r4, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ce      	bne.n	8004ee0 <acc_service_get_next+0x28>
 8004f42:	2301      	movs	r3, #1
 8004f44:	6225      	str	r5, [r4, #32]
 8004f46:	7363      	strb	r3, [r4, #13]
 8004f48:	69e0      	ldr	r0, [r4, #28]
 8004f4a:	f000 fb47 	bl	80055dc <acc_session_sweep_and_processing_run>
 8004f4e:	7b63      	ldrb	r3, [r4, #13]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	bf08      	it	eq
 8004f54:	7d6d      	ldrbeq	r5, [r5, #21]
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	f085 0501 	eoreq.w	r5, r5, #1
 8004f60:	2500      	movne	r5, #0
 8004f62:	7363      	strb	r3, [r4, #13]
 8004f64:	6223      	str	r3, [r4, #32]
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d0c0      	beq.n	8004eec <acc_service_get_next+0x34>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7ff ff58 	bl	8004e20 <acc_service_deactivate>
 8004f70:	4628      	mov	r0, r5
 8004f72:	b002      	add	sp, #8
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff ff22 	bl	8004dc0 <acc_service_activate>
 8004f7c:	7b23      	ldrb	r3, [r4, #12]
 8004f7e:	4606      	mov	r6, r0
 8004f80:	b913      	cbnz	r3, 8004f88 <acc_service_get_next+0xd0>
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d1dd      	bne.n	8004f42 <acc_service_get_next+0x8a>
 8004f86:	e7b0      	b.n	8004eea <acc_service_get_next+0x32>
 8004f88:	4a06      	ldr	r2, [pc, #24]	; (8004fa4 <acc_service_get_next+0xec>)
 8004f8a:	4905      	ldr	r1, [pc, #20]	; (8004fa0 <acc_service_get_next+0xe8>)
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f001 fea3 	bl	8006cd8 <acc_log_rss>
 8004f92:	2500      	movs	r5, #0
 8004f94:	e7e7      	b.n	8004f66 <acc_service_get_next+0xae>
 8004f96:	bf00      	nop
 8004f98:	acc09ee8 	.word	0xacc09ee8
 8004f9c:	08011f40 	.word	0x08011f40
 8004fa0:	08011fe4 	.word	0x08011fe4
 8004fa4:	0801207c 	.word	0x0801207c
 8004fa8:	08011fec 	.word	0x08011fec
 8004fac:	08012018 	.word	0x08012018
 8004fb0:	08012044 	.word	0x08012044

08004fb4 <acc_service_send_data>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	6a04      	ldr	r4, [r0, #32]
 8004fb8:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	6860      	ldr	r0, [r4, #4]
 8004fc0:	461f      	mov	r7, r3
 8004fc2:	b188      	cbz	r0, 8004fe8 <acc_service_send_data+0x34>
 8004fc4:	b14e      	cbz	r6, 8004fda <acc_service_send_data+0x26>
 8004fc6:	68e0      	ldr	r0, [r4, #12]
 8004fc8:	7566      	strb	r6, [r4, #21]
 8004fca:	b118      	cbz	r0, 8004fd4 <acc_service_send_data+0x20>
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f007 f8d2 	bl	800c178 <memcpy>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	736b      	strb	r3, [r5, #13]
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	bf28      	it	cs
 8004fe0:	461a      	movcs	r2, r3
 8004fe2:	f007 f8c9 	bl	800c178 <memcpy>
 8004fe6:	e7ee      	b.n	8004fc6 <acc_service_send_data+0x12>
 8004fe8:	4a02      	ldr	r2, [pc, #8]	; (8004ff4 <acc_service_send_data+0x40>)
 8004fea:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <acc_service_send_data+0x44>)
 8004fec:	2003      	movs	r0, #3
 8004fee:	f001 fe73 	bl	8006cd8 <acc_log_rss>
 8004ff2:	e7e8      	b.n	8004fc6 <acc_service_send_data+0x12>
 8004ff4:	080120a4 	.word	0x080120a4
 8004ff8:	08011fe4 	.word	0x08011fe4

08004ffc <acc_service_set_module_active>:
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <acc_service_set_module_active+0x8>)
 8004ffe:	7018      	strb	r0, [r3, #0]
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000195 	.word	0x20000195

08005008 <acc_service_handle_valid>:
 8005008:	b508      	push	{r3, lr}
 800500a:	b118      	cbz	r0, 8005014 <acc_service_handle_valid+0xc>
 800500c:	6802      	ldr	r2, [r0, #0]
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <acc_service_handle_valid+0x20>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d006      	beq.n	8005022 <acc_service_handle_valid+0x1a>
 8005014:	4a05      	ldr	r2, [pc, #20]	; (800502c <acc_service_handle_valid+0x24>)
 8005016:	4906      	ldr	r1, [pc, #24]	; (8005030 <acc_service_handle_valid+0x28>)
 8005018:	2000      	movs	r0, #0
 800501a:	f001 fe5d 	bl	8006cd8 <acc_log_rss>
 800501e:	2000      	movs	r0, #0
 8005020:	bd08      	pop	{r3, pc}
 8005022:	2001      	movs	r0, #1
 8005024:	bd08      	pop	{r3, pc}
 8005026:	bf00      	nop
 8005028:	acc09ee8 	.word	0xacc09ee8
 800502c:	08011f40 	.word	0x08011f40
 8005030:	08011fe4 	.word	0x08011fe4

08005034 <acc_service_configuration_valid>:
 8005034:	b508      	push	{r3, lr}
 8005036:	b118      	cbz	r0, 8005040 <acc_service_configuration_valid+0xc>
 8005038:	6802      	ldr	r2, [r0, #0]
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <acc_service_configuration_valid+0x20>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d006      	beq.n	800504e <acc_service_configuration_valid+0x1a>
 8005040:	4a05      	ldr	r2, [pc, #20]	; (8005058 <acc_service_configuration_valid+0x24>)
 8005042:	4906      	ldr	r1, [pc, #24]	; (800505c <acc_service_configuration_valid+0x28>)
 8005044:	2000      	movs	r0, #0
 8005046:	f001 fe47 	bl	8006cd8 <acc_log_rss>
 800504a:	2000      	movs	r0, #0
 800504c:	bd08      	pop	{r3, pc}
 800504e:	2001      	movs	r0, #1
 8005050:	bd08      	pop	{r3, pc}
 8005052:	bf00      	nop
 8005054:	acc09dd7 	.word	0xacc09dd7
 8005058:	08011fa0 	.word	0x08011fa0
 800505c:	08011fe4 	.word	0x08011fe4

08005060 <acc_service_configuration_check>:
 8005060:	b508      	push	{r3, lr}
 8005062:	b118      	cbz	r0, 800506c <acc_service_configuration_check+0xc>
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <acc_service_configuration_check+0x34>)
 8005066:	6802      	ldr	r2, [r0, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d006      	beq.n	800507a <acc_service_configuration_check+0x1a>
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <acc_service_configuration_check+0x38>)
 800506e:	490b      	ldr	r1, [pc, #44]	; (800509c <acc_service_configuration_check+0x3c>)
 8005070:	2000      	movs	r0, #0
 8005072:	f001 fe31 	bl	8006cd8 <acc_log_rss>
 8005076:	2000      	movs	r0, #0
 8005078:	bd08      	pop	{r3, pc}
 800507a:	68c3      	ldr	r3, [r0, #12]
 800507c:	3b01      	subs	r3, #1
 800507e:	2b04      	cmp	r3, #4
 8005080:	d801      	bhi.n	8005086 <acc_service_configuration_check+0x26>
 8005082:	2001      	movs	r0, #1
 8005084:	bd08      	pop	{r3, pc}
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <acc_service_configuration_check+0x40>)
 8005088:	4904      	ldr	r1, [pc, #16]	; (800509c <acc_service_configuration_check+0x3c>)
 800508a:	2000      	movs	r0, #0
 800508c:	f001 fe24 	bl	8006cd8 <acc_log_rss>
 8005090:	2000      	movs	r0, #0
 8005092:	bd08      	pop	{r3, pc}
 8005094:	acc09dd7 	.word	0xacc09dd7
 8005098:	08011fa0 	.word	0x08011fa0
 800509c:	08011fe4 	.word	0x08011fe4
 80050a0:	08011f78 	.word	0x08011f78

080050a4 <acc_service_profile_set>:
 80050a4:	b138      	cbz	r0, 80050b6 <acc_service_profile_set+0x12>
 80050a6:	6902      	ldr	r2, [r0, #16]
 80050a8:	4603      	mov	r3, r0
 80050aa:	b122      	cbz	r2, 80050b6 <acc_service_profile_set+0x12>
 80050ac:	b410      	push	{r4}
 80050ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b2:	60d9      	str	r1, [r3, #12]
 80050b4:	4710      	bx	r2
 80050b6:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <acc_service_profile_set+0x1c>)
 80050b8:	4902      	ldr	r1, [pc, #8]	; (80050c4 <acc_service_profile_set+0x20>)
 80050ba:	2001      	movs	r0, #1
 80050bc:	f001 be0c 	b.w	8006cd8 <acc_log_rss>
 80050c0:	08011fc8 	.word	0x08011fc8
 80050c4:	08011fe4 	.word	0x08011fe4

080050c8 <acc_service_initialize_service_configuration>:
 80050c8:	b430      	push	{r4, r5}
 80050ca:	9d02      	ldr	r5, [sp, #8]
 80050cc:	7101      	strb	r1, [r0, #4]
 80050ce:	6103      	str	r3, [r0, #16]
 80050d0:	4904      	ldr	r1, [pc, #16]	; (80050e4 <acc_service_initialize_service_configuration+0x1c>)
 80050d2:	6001      	str	r1, [r0, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	4629      	mov	r1, r5
 80050d8:	6182      	str	r2, [r0, #24]
 80050da:	6083      	str	r3, [r0, #8]
 80050dc:	bc30      	pop	{r4, r5}
 80050de:	f7ff bfe1 	b.w	80050a4 <acc_service_profile_set>
 80050e2:	bf00      	nop
 80050e4:	acc09dd7 	.word	0xacc09dd7

080050e8 <acc_service_manager_activate>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d09      	ldr	r5, [pc, #36]	; (8005110 <acc_service_manager_activate+0x28>)
 80050ec:	782c      	ldrb	r4, [r5, #0]
 80050ee:	b10c      	cbz	r4, 80050f4 <acc_service_manager_activate+0xc>
 80050f0:	4620      	mov	r0, r4
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	f001 feea 	bl	8006ecc <acc_service_factory_activate>
 80050f8:	4604      	mov	r4, r0
 80050fa:	b910      	cbnz	r0, 8005102 <acc_service_manager_activate+0x1a>
 80050fc:	782c      	ldrb	r4, [r5, #0]
 80050fe:	4620      	mov	r0, r4
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	2001      	movs	r0, #1
 8005104:	f7ff ff7a 	bl	8004ffc <acc_service_set_module_active>
 8005108:	2301      	movs	r3, #1
 800510a:	702b      	strb	r3, [r5, #0]
 800510c:	4620      	mov	r0, r4
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000196 	.word	0x20000196

08005114 <acc_service_manager_deactivate>:
 8005114:	b508      	push	{r3, lr}
 8005116:	f001 feeb 	bl	8006ef0 <acc_service_factory_deactivate>
 800511a:	2000      	movs	r0, #0
 800511c:	f7ff ff6e 	bl	8004ffc <acc_service_set_module_active>
 8005120:	4b01      	ldr	r3, [pc, #4]	; (8005128 <acc_service_manager_deactivate+0x14>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	bd08      	pop	{r3, pc}
 8005128:	20000196 	.word	0x20000196

0800512c <acc_service_create>:
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <acc_service_create+0x24>)
 800512e:	b510      	push	{r4, lr}
 8005130:	781c      	ldrb	r4, [r3, #0]
 8005132:	b12c      	cbz	r4, 8005140 <acc_service_create+0x14>
 8005134:	f001 ff48 	bl	8006fc8 <acc_service_factory_create_service>
 8005138:	b108      	cbz	r0, 800513e <acc_service_create+0x12>
 800513a:	2302      	movs	r3, #2
 800513c:	7303      	strb	r3, [r0, #12]
 800513e:	bd10      	pop	{r4, pc}
 8005140:	4620      	mov	r0, r4
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <acc_service_create+0x28>)
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <acc_service_create+0x2c>)
 8005146:	4905      	ldr	r1, [pc, #20]	; (800515c <acc_service_create+0x30>)
 8005148:	f001 fdc6 	bl	8006cd8 <acc_log_rss>
 800514c:	4620      	mov	r0, r4
 800514e:	bd10      	pop	{r4, pc}
 8005150:	20000196 	.word	0x20000196
 8005154:	080120cc 	.word	0x080120cc
 8005158:	08011f60 	.word	0x08011f60
 800515c:	080120f4 	.word	0x080120f4

08005160 <acc_service_destroy>:
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <acc_service_destroy+0x38>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b143      	cbz	r3, 8005178 <acc_service_destroy+0x18>
 8005166:	b130      	cbz	r0, 8005176 <acc_service_destroy+0x16>
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f7ff ff4b 	bl	8005008 <acc_service_handle_valid>
 8005172:	b938      	cbnz	r0, 8005184 <acc_service_destroy+0x24>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	4770      	bx	lr
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <acc_service_destroy+0x3c>)
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <acc_service_destroy+0x40>)
 800517c:	4909      	ldr	r1, [pc, #36]	; (80051a4 <acc_service_destroy+0x44>)
 800517e:	2001      	movs	r0, #1
 8005180:	f001 bdaa 	b.w	8006cd8 <acc_log_rss>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	f7ff fe4b 	bl	8004e20 <acc_service_deactivate>
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	f001 fed4 	bl	8006f38 <acc_service_factory_destroy_service>
 8005190:	2300      	movs	r3, #0
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop
 8005198:	20000196 	.word	0x20000196
 800519c:	080120e0 	.word	0x080120e0
 80051a0:	08011f60 	.word	0x08011f60
 80051a4:	080120f4 	.word	0x080120f4

080051a8 <sweep_session_send_data>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	794c      	ldrb	r4, [r1, #5]
 80051ae:	f88d 400d 	strb.w	r4, [sp, #13]
 80051b2:	460b      	mov	r3, r1
 80051b4:	4615      	mov	r5, r2
 80051b6:	68ca      	ldr	r2, [r1, #12]
 80051b8:	9400      	str	r4, [sp, #0]
 80051ba:	791e      	ldrb	r6, [r3, #4]
 80051bc:	f88d 600e 	strb.w	r6, [sp, #14]
 80051c0:	4601      	mov	r1, r0
 80051c2:	4628      	mov	r0, r5
 80051c4:	799d      	ldrb	r5, [r3, #6]
 80051c6:	f88d 500c 	strb.w	r5, [sp, #12]
 80051ca:	ab03      	add	r3, sp, #12
 80051cc:	f7ff fef2 	bl	8004fb4 <acc_service_send_data>
 80051d0:	b004      	add	sp, #16
 80051d2:	bd70      	pop	{r4, r5, r6, pc}

080051d4 <get_power_bins_configuration.part.2>:
 80051d4:	b508      	push	{r3, lr}
 80051d6:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <get_power_bins_configuration.part.2+0x10>)
 80051d8:	4903      	ldr	r1, [pc, #12]	; (80051e8 <get_power_bins_configuration.part.2+0x14>)
 80051da:	2001      	movs	r0, #1
 80051dc:	f001 fd7c 	bl	8006cd8 <acc_log_rss>
 80051e0:	2000      	movs	r0, #0
 80051e2:	bd08      	pop	{r3, pc}
 80051e4:	080121a4 	.word	0x080121a4
 80051e8:	080121bc 	.word	0x080121bc

080051ec <set_configuration_for_profile>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	460d      	mov	r5, r1
 80051f0:	b110      	cbz	r0, 80051f8 <set_configuration_for_profile+0xc>
 80051f2:	7903      	ldrb	r3, [r0, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d003      	beq.n	8005200 <set_configuration_for_profile+0x14>
 80051f8:	f7ff ffec 	bl	80051d4 <get_power_bins_configuration.part.2>
 80051fc:	b900      	cbnz	r0, 8005200 <set_configuration_for_profile+0x14>
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	f100 041c 	add.w	r4, r0, #28
 8005204:	210f      	movs	r1, #15
 8005206:	4620      	mov	r0, r4
 8005208:	f001 faec 	bl	80067e4 <acc_base_configuration_integrator_set>
 800520c:	1e69      	subs	r1, r5, #1
 800520e:	2904      	cmp	r1, #4
 8005210:	d8f5      	bhi.n	80051fe <set_configuration_for_profile+0x12>
 8005212:	e8df f001 	tbb	[pc, r1]
 8005216:	170d      	.short	0x170d
 8005218:	1b19      	.short	0x1b19
 800521a:	03          	.byte	0x03
 800521b:	00          	.byte	0x00
 800521c:	2110      	movs	r1, #16
 800521e:	4620      	mov	r0, r4
 8005220:	f001 faf8 	bl	8006814 <acc_base_configuration_wg_duration_set>
 8005224:	4620      	mov	r0, r4
 8005226:	2101      	movs	r1, #1
 8005228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800522c:	f001 bb0a 	b.w	8006844 <acc_base_configuration_integrator_ramp_up_set>
 8005230:	2100      	movs	r1, #0
 8005232:	4620      	mov	r0, r4
 8005234:	f001 faee 	bl	8006814 <acc_base_configuration_wg_duration_set>
 8005238:	4620      	mov	r0, r4
 800523a:	2104      	movs	r1, #4
 800523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005240:	f001 bb00 	b.w	8006844 <acc_base_configuration_integrator_ramp_up_set>
 8005244:	2107      	movs	r1, #7
 8005246:	e7f4      	b.n	8005232 <set_configuration_for_profile+0x46>
 8005248:	2109      	movs	r1, #9
 800524a:	e7f2      	b.n	8005232 <set_configuration_for_profile+0x46>
 800524c:	210c      	movs	r1, #12
 800524e:	e7e6      	b.n	800521e <set_configuration_for_profile+0x32>

08005250 <acc_service_power_bins_configuration_create>:
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	234c      	movs	r3, #76	; 0x4c
 8005254:	b083      	sub	sp, #12
 8005256:	4a35      	ldr	r2, [pc, #212]	; (800532c <acc_service_power_bins_configuration_create+0xdc>)
 8005258:	2178      	movs	r1, #120	; 0x78
 800525a:	2001      	movs	r0, #1
 800525c:	f001 fd06 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8005260:	4605      	mov	r5, r0
 8005262:	2800      	cmp	r0, #0
 8005264:	d05a      	beq.n	800531c <acc_service_power_bins_configuration_create+0xcc>
 8005266:	f100 041c 	add.w	r4, r0, #28
 800526a:	2702      	movs	r7, #2
 800526c:	4622      	mov	r2, r4
 800526e:	4639      	mov	r1, r7
 8005270:	9700      	str	r7, [sp, #0]
 8005272:	4b2f      	ldr	r3, [pc, #188]	; (8005330 <acc_service_power_bins_configuration_create+0xe0>)
 8005274:	f7ff ff28 	bl	80050c8 <acc_service_initialize_service_configuration>
 8005278:	2601      	movs	r6, #1
 800527a:	2305      	movs	r3, #5
 800527c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
 8005280:	4620      	mov	r0, r4
 8005282:	f885 606c 	strb.w	r6, [r5, #108]	; 0x6c
 8005286:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8005334 <acc_service_power_bins_configuration_create+0xe4>
 800528a:	f001 f971 	bl	8006570 <acc_base_configuration_requested_start_set>
 800528e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8005338 <acc_service_power_bins_configuration_create+0xe8>
 8005292:	4620      	mov	r0, r4
 8005294:	f001 f98e 	bl	80065b4 <acc_base_configuration_requested_length_set>
 8005298:	4620      	mov	r0, r4
 800529a:	210a      	movs	r1, #10
 800529c:	f001 fa04 	bl	80066a8 <acc_base_configuration_hw_accelerated_average_samples_set>
 80052a0:	4631      	mov	r1, r6
 80052a2:	4620      	mov	r0, r4
 80052a4:	f001 fa6e 	bl	8006784 <acc_base_configuration_sweep_average_set>
 80052a8:	4620      	mov	r0, r4
 80052aa:	210b      	movs	r1, #11
 80052ac:	f001 fa82 	bl	80067b4 <acc_base_configuration_gain_set>
 80052b0:	4631      	mov	r1, r6
 80052b2:	4620      	mov	r0, r4
 80052b4:	f001 f93e 	bl	8006534 <acc_base_configuration_sensor_set>
 80052b8:	4620      	mov	r0, r4
 80052ba:	f001 f98d 	bl	80065d8 <acc_base_configuration_repetition_mode_on_demand_set>
 80052be:	4639      	mov	r1, r7
 80052c0:	4620      	mov	r0, r4
 80052c2:	f001 f99f 	bl	8006604 <acc_base_configuration_power_save_mode_set>
 80052c6:	4620      	mov	r0, r4
 80052c8:	2100      	movs	r1, #0
 80052ca:	f001 fae5 	bl	8006898 <acc_base_configuration_use_point_range_set>
 80052ce:	4620      	mov	r0, r4
 80052d0:	2100      	movs	r1, #0
 80052d2:	f001 fac5 	bl	8006860 <acc_base_configuration_sweep_type_debug_set>
 80052d6:	4620      	mov	r0, r4
 80052d8:	2100      	movs	r1, #0
 80052da:	f001 f9ad 	bl	8006638 <acc_base_configuration_tx_disable_set>
 80052de:	4620      	mov	r0, r4
 80052e0:	2100      	movs	r1, #0
 80052e2:	f001 f9c5 	bl	8006670 <acc_base_configuration_decrease_tx_emission_set>
 80052e6:	4620      	mov	r0, r4
 80052e8:	21ff      	movs	r1, #255	; 0xff
 80052ea:	f001 fb01 	bl	80068f0 <acc_base_configuration_staggered_vga_stabilization_time_set>
 80052ee:	4620      	mov	r0, r4
 80052f0:	2100      	movs	r1, #0
 80052f2:	f001 faed 	bl	80068d0 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 80052f6:	4631      	mov	r1, r6
 80052f8:	4620      	mov	r0, r4
 80052fa:	f001 fb13 	bl	8006924 <acc_base_configuration_downsampling_factor_set>
 80052fe:	4631      	mov	r1, r6
 8005300:	4620      	mov	r0, r4
 8005302:	f001 fb2b 	bl	800695c <acc_base_configuration_noise_level_normalization_set>
 8005306:	4620      	mov	r0, r4
 8005308:	490c      	ldr	r1, [pc, #48]	; (800533c <acc_service_power_bins_configuration_create+0xec>)
 800530a:	f001 f9db 	bl	80066c4 <acc_base_configuration_radar_engine_creation_set>
 800530e:	4620      	mov	r0, r4
 8005310:	490b      	ldr	r1, [pc, #44]	; (8005340 <acc_service_power_bins_configuration_create+0xf0>)
 8005312:	f001 f9e5 	bl	80066e0 <acc_base_configuration_pipeline_assembly_set>
 8005316:	4628      	mov	r0, r5
 8005318:	b003      	add	sp, #12
 800531a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <acc_service_power_bins_configuration_create+0xf4>)
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <acc_service_power_bins_configuration_create+0xf8>)
 8005320:	490a      	ldr	r1, [pc, #40]	; (800534c <acc_service_power_bins_configuration_create+0xfc>)
 8005322:	f001 fcd9 	bl	8006cd8 <acc_log_rss>
 8005326:	4628      	mov	r0, r5
 8005328:	b003      	add	sp, #12
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532c:	08012130 	.word	0x08012130
 8005330:	080051ed 	.word	0x080051ed
 8005334:	3e4ccccd 	.word	0x3e4ccccd
 8005338:	3ecccccd 	.word	0x3ecccccd
 800533c:	08006db5 	.word	0x08006db5
 8005340:	08006db9 	.word	0x08006db9
 8005344:	08012104 	.word	0x08012104
 8005348:	0801214c 	.word	0x0801214c
 800534c:	080121bc 	.word	0x080121bc

08005350 <acc_service_power_bins_configuration_destroy>:
 8005350:	b168      	cbz	r0, 800536e <acc_service_power_bins_configuration_destroy+0x1e>
 8005352:	b510      	push	{r4, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	6800      	ldr	r0, [r0, #0]
 8005358:	b110      	cbz	r0, 8005360 <acc_service_power_bins_configuration_destroy+0x10>
 800535a:	7903      	ldrb	r3, [r0, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d001      	beq.n	8005364 <acc_service_power_bins_configuration_destroy+0x14>
 8005360:	f7ff ff38 	bl	80051d4 <get_power_bins_configuration.part.2>
 8005364:	f001 fca6 	bl	8006cb4 <acc_integration_mem_free>
 8005368:	2300      	movs	r3, #0
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	bd10      	pop	{r4, pc}
 800536e:	4770      	bx	lr

08005370 <acc_service_power_bins_requested_bin_count_set>:
 8005370:	b510      	push	{r4, lr}
 8005372:	460c      	mov	r4, r1
 8005374:	b110      	cbz	r0, 800537c <acc_service_power_bins_requested_bin_count_set+0xc>
 8005376:	7903      	ldrb	r3, [r0, #4]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d002      	beq.n	8005382 <acc_service_power_bins_requested_bin_count_set+0x12>
 800537c:	f7ff ff2a 	bl	80051d4 <get_power_bins_configuration.part.2>
 8005380:	b108      	cbz	r0, 8005386 <acc_service_power_bins_requested_bin_count_set+0x16>
 8005382:	f8a0 406e 	strh.w	r4, [r0, #110]	; 0x6e
 8005386:	bd10      	pop	{r4, pc}

08005388 <acc_service_power_bins_get_metadata>:
 8005388:	b148      	cbz	r0, 800539e <acc_service_power_bins_get_metadata+0x16>
 800538a:	b410      	push	{r4}
 800538c:	460c      	mov	r4, r1
 800538e:	b119      	cbz	r1, 8005398 <acc_service_power_bins_get_metadata+0x10>
 8005390:	309c      	adds	r0, #156	; 0x9c
 8005392:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8005394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	4770      	bx	lr

080053a0 <acc_service_power_bins_get_next>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	0052      	lsls	r2, r2, #1
 80053a6:	9101      	str	r1, [sp, #4]
 80053a8:	9202      	str	r2, [sp, #8]
 80053aa:	2602      	movs	r6, #2
 80053ac:	2200      	movs	r2, #0
 80053ae:	2504      	movs	r5, #4
 80053b0:	2403      	movs	r4, #3
 80053b2:	4669      	mov	r1, sp
 80053b4:	9303      	str	r3, [sp, #12]
 80053b6:	f88d 6000 	strb.w	r6, [sp]
 80053ba:	f88d 5001 	strb.w	r5, [sp, #1]
 80053be:	9404      	str	r4, [sp, #16]
 80053c0:	f88d 2014 	strb.w	r2, [sp, #20]
 80053c4:	f88d 2015 	strb.w	r2, [sp, #21]
 80053c8:	f7ff fd76 	bl	8004eb8 <acc_service_get_next>
 80053cc:	b006      	add	sp, #24
 80053ce:	bd70      	pop	{r4, r5, r6, pc}

080053d0 <acc_service_power_bins_create>:
 80053d0:	b530      	push	{r4, r5, lr}
 80053d2:	4604      	mov	r4, r0
 80053d4:	b089      	sub	sp, #36	; 0x24
 80053d6:	3024      	adds	r0, #36	; 0x24
 80053d8:	f7ff fe42 	bl	8005060 <acc_service_configuration_check>
 80053dc:	b918      	cbnz	r0, 80053e6 <acc_service_power_bins_create+0x16>
 80053de:	2500      	movs	r5, #0
 80053e0:	4628      	mov	r0, r5
 80053e2:	b009      	add	sp, #36	; 0x24
 80053e4:	bd30      	pop	{r4, r5, pc}
 80053e6:	f104 0540 	add.w	r5, r4, #64	; 0x40
 80053ea:	4628      	mov	r0, r5
 80053ec:	f001 fb82 	bl	8006af4 <acc_base_configuration_check>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0f4      	beq.n	80053de <acc_service_power_bins_create+0xe>
 80053f4:	4628      	mov	r0, r5
 80053f6:	f001 fa89 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d901      	bls.n	8005406 <acc_service_power_bins_create+0x36>
 8005402:	2804      	cmp	r0, #4
 8005404:	d134      	bne.n	8005470 <acc_service_power_bins_create+0xa0>
 8005406:	4628      	mov	r0, r5
 8005408:	f001 f8c4 	bl	8006594 <acc_base_configuration_requested_length_get>
 800540c:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 8005410:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005494 <acc_service_power_bins_create+0xc4>
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800541c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005420:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	d428      	bmi.n	800547c <acc_service_power_bins_create+0xac>
 800542a:	4629      	mov	r1, r5
 800542c:	9400      	str	r4, [sp, #0]
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <acc_service_power_bins_create+0xc8>)
 8005430:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff fd27 	bl	8004e88 <acc_service_create_sweep_session>
 800543a:	4605      	mov	r5, r0
 800543c:	2800      	cmp	r0, #0
 800543e:	d0ce      	beq.n	80053de <acc_service_power_bins_create+0xe>
 8005440:	a903      	add	r1, sp, #12
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff fd2e 	bl	8004ea4 <acc_service_get_configuration_output>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	9804      	ldr	r0, [sp, #16]
 800544c:	9907      	ldr	r1, [sp, #28]
 800544e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005452:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8005456:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800545a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 800545e:	4628      	mov	r0, r5
 8005460:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 8005464:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8005468:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800546c:	b009      	add	sp, #36	; 0x24
 800546e:	bd30      	pop	{r4, r5, pc}
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <acc_service_power_bins_create+0xcc>)
 8005472:	490b      	ldr	r1, [pc, #44]	; (80054a0 <acc_service_power_bins_create+0xd0>)
 8005474:	2000      	movs	r0, #0
 8005476:	f001 fc2f 	bl	8006cd8 <acc_log_rss>
 800547a:	e7b0      	b.n	80053de <acc_service_power_bins_create+0xe>
 800547c:	2000      	movs	r0, #0
 800547e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8005482:	e9cd 0300 	strd	r0, r3, [sp]
 8005486:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <acc_service_power_bins_create+0xd4>)
 8005488:	4905      	ldr	r1, [pc, #20]	; (80054a0 <acc_service_power_bins_create+0xd0>)
 800548a:	2320      	movs	r3, #32
 800548c:	4605      	mov	r5, r0
 800548e:	f001 fc23 	bl	8006cd8 <acc_log_rss>
 8005492:	e7a5      	b.n	80053e0 <acc_service_power_bins_create+0x10>
 8005494:	3c83126f 	.word	0x3c83126f
 8005498:	080051a9 	.word	0x080051a9
 800549c:	08012160 	.word	0x08012160
 80054a0:	080121bc 	.word	0x080121bc
 80054a4:	08012180 	.word	0x08012180

080054a8 <acc_service_power_bins_destroy>:
 80054a8:	f7ff bd00 	b.w	8004eac <acc_service_destroy_sweep_session>

080054ac <acc_session_manager_activate>:
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <acc_session_manager_activate+0x10>)
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	b90a      	cbnz	r2, 80054b6 <acc_session_manager_activate+0xa>
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	2001      	movs	r0, #1
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000197 	.word	0x20000197

080054c0 <acc_session_manager_deactivate>:
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <acc_session_manager_deactivate+0x8>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	4770      	bx	lr
 80054c8:	20000197 	.word	0x20000197

080054cc <state_done>:
 80054cc:	2306      	movs	r3, #6
 80054ce:	7143      	strb	r3, [r0, #5]
 80054d0:	2000      	movs	r0, #0
 80054d2:	4770      	bx	lr

080054d4 <destroy_session>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	6880      	ldr	r0, [r0, #8]
 80054da:	b118      	cbz	r0, 80054e4 <destroy_session+0x10>
 80054dc:	6903      	ldr	r3, [r0, #16]
 80054de:	4798      	blx	r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	60a3      	str	r3, [r4, #8]
 80054e4:	4620      	mov	r0, r4
 80054e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ea:	f001 bbe3 	b.w	8006cb4 <acc_integration_mem_free>
 80054ee:	bf00      	nop

080054f0 <state_null>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	7903      	ldrb	r3, [r0, #4]
 80054f4:	b082      	sub	sp, #8
 80054f6:	b173      	cbz	r3, 8005516 <state_null+0x26>
 80054f8:	2100      	movs	r1, #0
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	4604      	mov	r4, r0
 80054fe:	7101      	strb	r1, [r0, #4]
 8005500:	d809      	bhi.n	8005516 <state_null+0x26>
 8005502:	2201      	movs	r2, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	f013 0f5d 	tst.w	r3, #93	; 0x5d
 800550c:	d10e      	bne.n	800552c <state_null+0x3c>
 800550e:	069a      	lsls	r2, r3, #26
 8005510:	d409      	bmi.n	8005526 <state_null+0x36>
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d413      	bmi.n	800553e <state_null+0x4e>
 8005516:	2003      	movs	r0, #3
 8005518:	4a0d      	ldr	r2, [pc, #52]	; (8005550 <state_null+0x60>)
 800551a:	490e      	ldr	r1, [pc, #56]	; (8005554 <state_null+0x64>)
 800551c:	f001 fbdc 	bl	8006cd8 <acc_log_rss>
 8005520:	480d      	ldr	r0, [pc, #52]	; (8005558 <state_null+0x68>)
 8005522:	b002      	add	sp, #8
 8005524:	bd10      	pop	{r4, pc}
 8005526:	480d      	ldr	r0, [pc, #52]	; (800555c <state_null+0x6c>)
 8005528:	b002      	add	sp, #8
 800552a:	bd10      	pop	{r4, pc}
 800552c:	9100      	str	r1, [sp, #0]
 800552e:	2003      	movs	r0, #3
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <state_null+0x70>)
 8005532:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <state_null+0x74>)
 8005534:	4907      	ldr	r1, [pc, #28]	; (8005554 <state_null+0x64>)
 8005536:	f001 fbcf 	bl	8006cd8 <acc_log_rss>
 800553a:	4807      	ldr	r0, [pc, #28]	; (8005558 <state_null+0x68>)
 800553c:	e7f1      	b.n	8005522 <state_null+0x32>
 800553e:	2002      	movs	r0, #2
 8005540:	4a09      	ldr	r2, [pc, #36]	; (8005568 <state_null+0x78>)
 8005542:	4904      	ldr	r1, [pc, #16]	; (8005554 <state_null+0x64>)
 8005544:	f001 fbc8 	bl	8006cd8 <acc_log_rss>
 8005548:	2302      	movs	r3, #2
 800554a:	7163      	strb	r3, [r4, #5]
 800554c:	4807      	ldr	r0, [pc, #28]	; (800556c <state_null+0x7c>)
 800554e:	e7e8      	b.n	8005522 <state_null+0x32>
 8005550:	08012374 	.word	0x08012374
 8005554:	08012338 	.word	0x08012338
 8005558:	080054f1 	.word	0x080054f1
 800555c:	080054cd 	.word	0x080054cd
 8005560:	08012254 	.word	0x08012254
 8005564:	08012358 	.word	0x08012358
 8005568:	08012324 	.word	0x08012324
 800556c:	08005571 	.word	0x08005571

08005570 <state_busy>:
 8005570:	b510      	push	{r4, lr}
 8005572:	7903      	ldrb	r3, [r0, #4]
 8005574:	b082      	sub	sp, #8
 8005576:	4604      	mov	r4, r0
 8005578:	b933      	cbnz	r3, 8005588 <state_busy+0x18>
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005580:	4790      	blx	r2
 8005582:	4810      	ldr	r0, [pc, #64]	; (80055c4 <state_busy+0x54>)
 8005584:	b002      	add	sp, #8
 8005586:	bd10      	pop	{r4, pc}
 8005588:	2100      	movs	r1, #0
 800558a:	2b06      	cmp	r3, #6
 800558c:	7101      	strb	r1, [r0, #4]
 800558e:	d8f4      	bhi.n	800557a <state_busy+0xa>
 8005590:	2201      	movs	r2, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	f013 0f77 	tst.w	r3, #119	; 0x77
 800559a:	d10a      	bne.n	80055b2 <state_busy+0x42>
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	d5ec      	bpl.n	800557a <state_busy+0xa>
 80055a0:	2002      	movs	r0, #2
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <state_busy+0x58>)
 80055a4:	4909      	ldr	r1, [pc, #36]	; (80055cc <state_busy+0x5c>)
 80055a6:	f001 fb97 	bl	8006cd8 <acc_log_rss>
 80055aa:	2304      	movs	r3, #4
 80055ac:	7163      	strb	r3, [r4, #5]
 80055ae:	4808      	ldr	r0, [pc, #32]	; (80055d0 <state_busy+0x60>)
 80055b0:	e7e8      	b.n	8005584 <state_busy+0x14>
 80055b2:	9100      	str	r1, [sp, #0]
 80055b4:	2003      	movs	r0, #3
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <state_busy+0x64>)
 80055b8:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <state_busy+0x68>)
 80055ba:	4904      	ldr	r1, [pc, #16]	; (80055cc <state_busy+0x5c>)
 80055bc:	f001 fb8c 	bl	8006cd8 <acc_log_rss>
 80055c0:	4803      	ldr	r0, [pc, #12]	; (80055d0 <state_busy+0x60>)
 80055c2:	e7df      	b.n	8005584 <state_busy+0x14>
 80055c4:	08005571 	.word	0x08005571
 80055c8:	08012310 	.word	0x08012310
 80055cc:	08012338 	.word	0x08012338
 80055d0:	080054f1 	.word	0x080054f1
 80055d4:	08012260 	.word	0x08012260
 80055d8:	08012358 	.word	0x08012358

080055dc <acc_session_sweep_and_processing_run>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	68c3      	ldr	r3, [r0, #12]
 80055e0:	4604      	mov	r4, r0
 80055e2:	4798      	blx	r3
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <acc_session_sweep_and_processing_run+0x1c>)
 80055e6:	60e0      	str	r0, [r4, #12]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	d000      	beq.n	80055ee <acc_session_sweep_and_processing_run+0x12>
 80055ec:	bd10      	pop	{r4, pc}
 80055ee:	2206      	movs	r2, #6
 80055f0:	4b02      	ldr	r3, [pc, #8]	; (80055fc <acc_session_sweep_and_processing_run+0x20>)
 80055f2:	7162      	strb	r2, [r4, #5]
 80055f4:	60e3      	str	r3, [r4, #12]
 80055f6:	bd10      	pop	{r4, pc}
 80055f8:	080054cd 	.word	0x080054cd
 80055fc:	080054f1 	.word	0x080054f1

08005600 <acc_session_sweep_and_processing_create>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	4605      	mov	r5, r0
 8005606:	460e      	mov	r6, r1
 8005608:	4617      	mov	r7, r2
 800560a:	4698      	mov	r8, r3
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <acc_session_sweep_and_processing_create+0x64>)
 800560e:	f240 1397 	movw	r3, #407	; 0x197
 8005612:	2110      	movs	r1, #16
 8005614:	2001      	movs	r0, #1
 8005616:	f001 fb29 	bl	8006c6c <acc_integration_mem_calloc_debug>
 800561a:	4604      	mov	r4, r0
 800561c:	b1a0      	cbz	r0, 8005648 <acc_session_sweep_and_processing_create+0x48>
 800561e:	2000      	movs	r0, #0
 8005620:	f8df c050 	ldr.w	ip, [pc, #80]	; 8005674 <acc_session_sweep_and_processing_create+0x74>
 8005624:	6025      	str	r5, [r4, #0]
 8005626:	4631      	mov	r1, r6
 8005628:	60a0      	str	r0, [r4, #8]
 800562a:	7160      	strb	r0, [r4, #5]
 800562c:	7120      	strb	r0, [r4, #4]
 800562e:	686e      	ldr	r6, [r5, #4]
 8005630:	f8c4 c00c 	str.w	ip, [r4, #12]
 8005634:	4628      	mov	r0, r5
 8005636:	4643      	mov	r3, r8
 8005638:	463a      	mov	r2, r7
 800563a:	47b0      	blx	r6
 800563c:	4605      	mov	r5, r0
 800563e:	60a0      	str	r0, [r4, #8]
 8005640:	b150      	cbz	r0, 8005658 <acc_session_sweep_and_processing_create+0x58>
 8005642:	4620      	mov	r0, r4
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <acc_session_sweep_and_processing_create+0x68>)
 800564a:	4a08      	ldr	r2, [pc, #32]	; (800566c <acc_session_sweep_and_processing_create+0x6c>)
 800564c:	4908      	ldr	r1, [pc, #32]	; (8005670 <acc_session_sweep_and_processing_create+0x70>)
 800564e:	f001 fb43 	bl	8006cd8 <acc_log_rss>
 8005652:	4620      	mov	r0, r4
 8005654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff ff3b 	bl	80054d4 <destroy_session>
 800565e:	462c      	mov	r4, r5
 8005660:	e7ef      	b.n	8005642 <acc_session_sweep_and_processing_create+0x42>
 8005662:	bf00      	nop
 8005664:	080122b8 	.word	0x080122b8
 8005668:	0801226c 	.word	0x0801226c
 800566c:	0801214c 	.word	0x0801214c
 8005670:	08012338 	.word	0x08012338
 8005674:	080054f1 	.word	0x080054f1

08005678 <acc_session_sweep_and_processing_activate>:
 8005678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	b082      	sub	sp, #8
 8005680:	4604      	mov	r4, r0
 8005682:	6918      	ldr	r0, [r3, #16]
 8005684:	f000 f9bc 	bl	8005a00 <acc_sensor_manager_start_measurement>
 8005688:	b300      	cbz	r0, 80056cc <acc_session_sweep_and_processing_activate+0x54>
 800568a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80056e4 <acc_session_sweep_and_processing_activate+0x6c>
 800568e:	4f13      	ldr	r7, [pc, #76]	; (80056dc <acc_session_sweep_and_processing_activate+0x64>)
 8005690:	4e13      	ldr	r6, [pc, #76]	; (80056e0 <acc_session_sweep_and_processing_activate+0x68>)
 8005692:	e003      	b.n	800569c <acc_session_sweep_and_processing_activate+0x24>
 8005694:	7925      	ldrb	r5, [r4, #4]
 8005696:	9500      	str	r5, [sp, #0]
 8005698:	f001 fb1e 	bl	8006cd8 <acc_log_rss>
 800569c:	2301      	movs	r3, #1
 800569e:	7123      	strb	r3, [r4, #4]
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff ff9b 	bl	80055dc <acc_session_sweep_and_processing_run>
 80056a6:	7965      	ldrb	r5, [r4, #5]
 80056a8:	2300      	movs	r3, #0
 80056aa:	2d02      	cmp	r5, #2
 80056ac:	7163      	strb	r3, [r4, #5]
 80056ae:	463a      	mov	r2, r7
 80056b0:	4643      	mov	r3, r8
 80056b2:	4631      	mov	r1, r6
 80056b4:	f04f 0003 	mov.w	r0, #3
 80056b8:	d1ec      	bne.n	8005694 <acc_session_sweep_and_processing_activate+0x1c>
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <acc_session_sweep_and_processing_activate+0x6c>)
 80056bc:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <acc_session_sweep_and_processing_activate+0x70>)
 80056be:	4908      	ldr	r1, [pc, #32]	; (80056e0 <acc_session_sweep_and_processing_activate+0x68>)
 80056c0:	4628      	mov	r0, r5
 80056c2:	b002      	add	sp, #8
 80056c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c8:	f001 bb06 	b.w	8006cd8 <acc_log_rss>
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <acc_session_sweep_and_processing_activate+0x6c>)
 80056ce:	4a07      	ldr	r2, [pc, #28]	; (80056ec <acc_session_sweep_and_processing_activate+0x74>)
 80056d0:	4903      	ldr	r1, [pc, #12]	; (80056e0 <acc_session_sweep_and_processing_activate+0x68>)
 80056d2:	b002      	add	sp, #8
 80056d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	f001 bafe 	b.w	8006cd8 <acc_log_rss>
 80056dc:	08012358 	.word	0x08012358
 80056e0:	08012338 	.word	0x08012338
 80056e4:	080121d0 	.word	0x080121d0
 80056e8:	0801229c 	.word	0x0801229c
 80056ec:	0801227c 	.word	0x0801227c

080056f0 <acc_session_sweep_and_processing_deactivate>:
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f4:	4604      	mov	r4, r0
 80056f6:	b082      	sub	sp, #8
 80056f8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8005748 <acc_session_sweep_and_processing_deactivate+0x58>
 80056fc:	4f10      	ldr	r7, [pc, #64]	; (8005740 <acc_session_sweep_and_processing_deactivate+0x50>)
 80056fe:	4e11      	ldr	r6, [pc, #68]	; (8005744 <acc_session_sweep_and_processing_deactivate+0x54>)
 8005700:	e003      	b.n	800570a <acc_session_sweep_and_processing_deactivate+0x1a>
 8005702:	7925      	ldrb	r5, [r4, #4]
 8005704:	9500      	str	r5, [sp, #0]
 8005706:	f001 fae7 	bl	8006cd8 <acc_log_rss>
 800570a:	2503      	movs	r5, #3
 800570c:	4620      	mov	r0, r4
 800570e:	7125      	strb	r5, [r4, #4]
 8005710:	f7ff ff64 	bl	80055dc <acc_session_sweep_and_processing_run>
 8005714:	7963      	ldrb	r3, [r4, #5]
 8005716:	2200      	movs	r2, #0
 8005718:	2b04      	cmp	r3, #4
 800571a:	7162      	strb	r2, [r4, #5]
 800571c:	4643      	mov	r3, r8
 800571e:	463a      	mov	r2, r7
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	d1ed      	bne.n	8005702 <acc_session_sweep_and_processing_deactivate+0x12>
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <acc_session_sweep_and_processing_deactivate+0x58>)
 8005728:	4a08      	ldr	r2, [pc, #32]	; (800574c <acc_session_sweep_and_processing_deactivate+0x5c>)
 800572a:	4906      	ldr	r1, [pc, #24]	; (8005744 <acc_session_sweep_and_processing_deactivate+0x54>)
 800572c:	2002      	movs	r0, #2
 800572e:	f001 fad3 	bl	8006cd8 <acc_log_rss>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	6918      	ldr	r0, [r3, #16]
 8005736:	b002      	add	sp, #8
 8005738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800573c:	f000 b98a 	b.w	8005a54 <acc_sensor_manager_stop_measurement>
 8005740:	08012358 	.word	0x08012358
 8005744:	08012338 	.word	0x08012338
 8005748:	080121fc 	.word	0x080121fc
 800574c:	080122dc 	.word	0x080122dc

08005750 <acc_session_sweep_and_processing_destroy>:
 8005750:	b1d8      	cbz	r0, 800578a <acc_session_sweep_and_processing_destroy+0x3a>
 8005752:	b530      	push	{r4, r5, lr}
 8005754:	6805      	ldr	r5, [r0, #0]
 8005756:	b083      	sub	sp, #12
 8005758:	b1ad      	cbz	r5, 8005786 <acc_session_sweep_and_processing_destroy+0x36>
 800575a:	2305      	movs	r3, #5
 800575c:	712b      	strb	r3, [r5, #4]
 800575e:	4604      	mov	r4, r0
 8005760:	4628      	mov	r0, r5
 8005762:	f7ff ff3b 	bl	80055dc <acc_session_sweep_and_processing_run>
 8005766:	796b      	ldrb	r3, [r5, #5]
 8005768:	2200      	movs	r2, #0
 800576a:	2b06      	cmp	r3, #6
 800576c:	716a      	strb	r2, [r5, #5]
 800576e:	d10d      	bne.n	800578c <acc_session_sweep_and_processing_destroy+0x3c>
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <acc_session_sweep_and_processing_destroy+0x50>)
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <acc_session_sweep_and_processing_destroy+0x54>)
 8005774:	490c      	ldr	r1, [pc, #48]	; (80057a8 <acc_session_sweep_and_processing_destroy+0x58>)
 8005776:	2002      	movs	r0, #2
 8005778:	f001 faae 	bl	8006cd8 <acc_log_rss>
 800577c:	4628      	mov	r0, r5
 800577e:	f7ff fea9 	bl	80054d4 <destroy_session>
 8005782:	2300      	movs	r3, #0
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	b003      	add	sp, #12
 8005788:	bd30      	pop	{r4, r5, pc}
 800578a:	4770      	bx	lr
 800578c:	792b      	ldrb	r3, [r5, #4]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4a06      	ldr	r2, [pc, #24]	; (80057ac <acc_session_sweep_and_processing_destroy+0x5c>)
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <acc_session_sweep_and_processing_destroy+0x50>)
 8005794:	4904      	ldr	r1, [pc, #16]	; (80057a8 <acc_session_sweep_and_processing_destroy+0x58>)
 8005796:	2003      	movs	r0, #3
 8005798:	f001 fa9e 	bl	8006cd8 <acc_log_rss>
 800579c:	e7ee      	b.n	800577c <acc_session_sweep_and_processing_destroy+0x2c>
 800579e:	bf00      	nop
 80057a0:	08012228 	.word	0x08012228
 80057a4:	080122f8 	.word	0x080122f8
 80057a8:	08012338 	.word	0x08012338
 80057ac:	08012358 	.word	0x08012358

080057b0 <acc_session_sweep_and_processing_get_configuration_output>:
 80057b0:	6803      	ldr	r3, [r0, #0]
 80057b2:	6918      	ldr	r0, [r3, #16]
 80057b4:	f000 ba02 	b.w	8005bbc <acc_sensor_manager_get_configuration_output>

080057b8 <acc_session_sweep_and_processing_get_output_type>:
 80057b8:	6883      	ldr	r3, [r0, #8]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	4710      	bx	r2

080057c0 <calibrate_sensor>:
 80057c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c4:	4e21      	ldr	r6, [pc, #132]	; (800584c <calibrate_sensor+0x8c>)
 80057c6:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80057ca:	6833      	ldr	r3, [r6, #0]
 80057cc:	0164      	lsls	r4, r4, #5
 80057ce:	3c60      	subs	r4, #96	; 0x60
 80057d0:	4423      	add	r3, r4
 80057d2:	2200      	movs	r2, #0
 80057d4:	b082      	sub	sp, #8
 80057d6:	4605      	mov	r5, r0
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057dc:	4688      	mov	r8, r1
 80057de:	f001 fa17 	bl	8006c10 <acc_integration_sensor_device_power_on>
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 fac6 	bl	8005d74 <acc_sweep_manager_is_sensor_connected>
 80057e8:	b1d0      	cbz	r0, 8005820 <calibrate_sensor+0x60>
 80057ea:	4629      	mov	r1, r5
 80057ec:	2009      	movs	r0, #9
 80057ee:	f001 facb 	bl	8006d88 <acc_probes_execute_primitive_probe>
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	4640      	mov	r0, r8
 80057f6:	4421      	add	r1, r4
 80057f8:	f000 fabe 	bl	8005d78 <acc_sweep_manager_calibrate>
 80057fc:	4607      	mov	r7, r0
 80057fe:	b1e8      	cbz	r0, 800583c <calibrate_sensor+0x7c>
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	441c      	add	r4, r3
 8005804:	2301      	movs	r3, #1
 8005806:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800580a:	4629      	mov	r1, r5
 800580c:	200a      	movs	r0, #10
 800580e:	f001 fabb 	bl	8006d88 <acc_probes_execute_primitive_probe>
 8005812:	4628      	mov	r0, r5
 8005814:	f001 fa02 	bl	8006c1c <acc_integration_sensor_device_power_off>
 8005818:	4638      	mov	r0, r7
 800581a:	b002      	add	sp, #8
 800581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <calibrate_sensor+0x90>)
 8005822:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <calibrate_sensor+0x94>)
 8005824:	490c      	ldr	r1, [pc, #48]	; (8005858 <calibrate_sensor+0x98>)
 8005826:	9500      	str	r5, [sp, #0]
 8005828:	4607      	mov	r7, r0
 800582a:	f001 fa55 	bl	8006cd8 <acc_log_rss>
 800582e:	4628      	mov	r0, r5
 8005830:	f001 f9f4 	bl	8006c1c <acc_integration_sensor_device_power_off>
 8005834:	4638      	mov	r0, r7
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	9500      	str	r5, [sp, #0]
 800583e:	4b04      	ldr	r3, [pc, #16]	; (8005850 <calibrate_sensor+0x90>)
 8005840:	4a06      	ldr	r2, [pc, #24]	; (800585c <calibrate_sensor+0x9c>)
 8005842:	4905      	ldr	r1, [pc, #20]	; (8005858 <calibrate_sensor+0x98>)
 8005844:	f001 fa48 	bl	8006cd8 <acc_log_rss>
 8005848:	e7df      	b.n	800580a <calibrate_sensor+0x4a>
 800584a:	bf00      	nop
 800584c:	2000019c 	.word	0x2000019c
 8005850:	08012394 	.word	0x08012394
 8005854:	08012510 	.word	0x08012510
 8005858:	0801255c 	.word	0x0801255c
 800585c:	0801256c 	.word	0x0801256c

08005860 <acc_sensor_manager_activate>:
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005864:	4e1d      	ldr	r6, [pc, #116]	; (80058dc <acc_sensor_manager_activate+0x7c>)
 8005866:	7834      	ldrb	r4, [r6, #0]
 8005868:	b114      	cbz	r4, 8005870 <acc_sensor_manager_activate+0x10>
 800586a:	4620      	mov	r0, r4
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	f000 f9b0 	bl	8005bd4 <acc_sweep_manager_activate>
 8005874:	4680      	mov	r8, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	d0f7      	beq.n	800586a <acc_sensor_manager_activate+0xa>
 800587a:	f001 f9b7 	bl	8006bec <acc_integration_get_sensor_count>
 800587e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005882:	0140      	lsls	r0, r0, #5
 8005884:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8005888:	4915      	ldr	r1, [pc, #84]	; (80058e0 <acc_sensor_manager_activate+0x80>)
 800588a:	4f16      	ldr	r7, [pc, #88]	; (80058e4 <acc_sensor_manager_activate+0x84>)
 800588c:	f001 f9d8 	bl	8006c40 <acc_integration_mem_alloc_debug>
 8005890:	6038      	str	r0, [r7, #0]
 8005892:	b1e0      	cbz	r0, 80058ce <acc_sensor_manager_activate+0x6e>
 8005894:	4625      	mov	r5, r4
 8005896:	e00e      	b.n	80058b6 <acc_sensor_manager_activate+0x56>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800589e:	3401      	adds	r4, #1
 80058a0:	659d      	str	r5, [r3, #88]	; 0x58
 80058a2:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
 80058a6:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
 80058aa:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
 80058ae:	f883 504d 	strb.w	r5, [r3, #77]	; 0x4d
 80058b2:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 80058b6:	f001 f999 	bl	8006bec <acc_integration_get_sensor_count>
 80058ba:	42a0      	cmp	r0, r4
 80058bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80058c0:	d8ea      	bhi.n	8005898 <acc_sensor_manager_activate+0x38>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4644      	mov	r4, r8
 80058c6:	7033      	strb	r3, [r6, #0]
 80058c8:	4620      	mov	r0, r4
 80058ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ce:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <acc_sensor_manager_activate+0x88>)
 80058d0:	4a06      	ldr	r2, [pc, #24]	; (80058ec <acc_sensor_manager_activate+0x8c>)
 80058d2:	4907      	ldr	r1, [pc, #28]	; (80058f0 <acc_sensor_manager_activate+0x90>)
 80058d4:	f001 fa00 	bl	8006cd8 <acc_log_rss>
 80058d8:	e7c7      	b.n	800586a <acc_sensor_manager_activate+0xa>
 80058da:	bf00      	nop
 80058dc:	20000198 	.word	0x20000198
 80058e0:	0801240c 	.word	0x0801240c
 80058e4:	2000019c 	.word	0x2000019c
 80058e8:	080123cc 	.word	0x080123cc
 80058ec:	0801214c 	.word	0x0801214c
 80058f0:	0801255c 	.word	0x0801255c

080058f4 <acc_sensor_manager_deactivate>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4c06      	ldr	r4, [pc, #24]	; (8005910 <acc_sensor_manager_deactivate+0x1c>)
 80058f8:	7823      	ldrb	r3, [r4, #0]
 80058fa:	b903      	cbnz	r3, 80058fe <acc_sensor_manager_deactivate+0xa>
 80058fc:	bd10      	pop	{r4, pc}
 80058fe:	f000 f995 	bl	8005c2c <acc_sweep_manager_deactivate>
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <acc_sensor_manager_deactivate+0x20>)
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f001 f9d5 	bl	8006cb4 <acc_integration_mem_free>
 800590a:	2300      	movs	r3, #0
 800590c:	7023      	strb	r3, [r4, #0]
 800590e:	bd10      	pop	{r4, pc}
 8005910:	20000198 	.word	0x20000198
 8005914:	2000019c 	.word	0x2000019c

08005918 <acc_sensor_manager_prepare_measurement>:
 8005918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800591c:	4689      	mov	r9, r1
 800591e:	4607      	mov	r7, r0
 8005920:	f000 fdfe 	bl	8006520 <acc_base_configuration_sensor_get>
 8005924:	4d34      	ldr	r5, [pc, #208]	; (80059f8 <acc_sensor_manager_prepare_measurement+0xe0>)
 8005926:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	0164      	lsls	r4, r4, #5
 800592e:	3c60      	subs	r4, #96	; 0x60
 8005930:	4680      	mov	r8, r0
 8005932:	4638      	mov	r0, r7
 8005934:	191e      	adds	r6, r3, r4
 8005936:	f000 f98b 	bl	8005c50 <acc_sweep_manager_prepare>
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	65f0      	str	r0, [r6, #92]	; 0x5c
 800593e:	4423      	add	r3, r4
 8005940:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005942:	2900      	cmp	r1, #0
 8005944:	d056      	beq.n	80059f4 <acc_sensor_manager_prepare_measurement+0xdc>
 8005946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800594a:	b92b      	cbnz	r3, 8005958 <acc_sensor_manager_prepare_measurement+0x40>
 800594c:	4640      	mov	r0, r8
 800594e:	f7ff ff37 	bl	80057c0 <calibrate_sensor>
 8005952:	4606      	mov	r6, r0
 8005954:	2800      	cmp	r0, #0
 8005956:	d046      	beq.n	80059e6 <acc_sensor_manager_prepare_measurement+0xce>
 8005958:	4638      	mov	r0, r7
 800595a:	f000 fff3 	bl	8006944 <acc_base_configuration_noise_level_normalization_get>
 800595e:	bb88      	cbnz	r0, 80059c4 <acc_sensor_manager_prepare_measurement+0xac>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	4423      	add	r3, r4
 8005964:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005966:	f000 fa01 	bl	8005d6c <acc_sweep_manager_get_metadata>
 800596a:	2244      	movs	r2, #68	; 0x44
 800596c:	4601      	mov	r1, r0
 800596e:	4648      	mov	r0, r9
 8005970:	f006 fc02 	bl	800c178 <memcpy>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	4423      	add	r3, r4
 8005978:	2201      	movs	r2, #1
 800597a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800597e:	4638      	mov	r0, r7
 8005980:	f000 fe36 	bl	80065f0 <acc_base_configuration_power_save_mode_get>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	fab0 f280 	clz	r2, r0
 800598a:	4423      	add	r3, r4
 800598c:	0952      	lsrs	r2, r2, #5
 800598e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8005992:	4638      	mov	r0, r7
 8005994:	f000 fec6 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	fab0 f080 	clz	r0, r0
 800599e:	4423      	add	r3, r4
 80059a0:	0940      	lsrs	r0, r0, #5
 80059a2:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
 80059a6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80059a8:	f000 f9e2 	bl	8005d70 <acc_sweep_manager_get_data_reference>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80059b2:	441c      	add	r4, r3
 80059b4:	4620      	mov	r0, r4
 80059b6:	2300      	movs	r3, #0
 80059b8:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
 80059bc:	f800 3f50 	strb.w	r3, [r0, #80]!
 80059c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	4423      	add	r3, r4
 80059c8:	4640      	mov	r0, r8
 80059ca:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 80059cc:	f001 f920 	bl	8006c10 <acc_integration_sensor_device_power_on>
 80059d0:	6829      	ldr	r1, [r5, #0]
 80059d2:	4630      	mov	r0, r6
 80059d4:	4421      	add	r1, r4
 80059d6:	f000 f9d3 	bl	8005d80 <acc_sweep_manager_measure_noise>
 80059da:	4606      	mov	r6, r0
 80059dc:	4640      	mov	r0, r8
 80059de:	f001 f91d 	bl	8006c1c <acc_integration_sensor_device_power_off>
 80059e2:	2e00      	cmp	r6, #0
 80059e4:	d1bc      	bne.n	8005960 <acc_sensor_manager_prepare_measurement+0x48>
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	441c      	add	r4, r3
 80059ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80059ec:	f000 f9b2 	bl	8005d54 <acc_sweep_manager_release>
 80059f0:	4630      	mov	r0, r6
 80059f2:	e7e5      	b.n	80059c0 <acc_sensor_manager_prepare_measurement+0xa8>
 80059f4:	4608      	mov	r0, r1
 80059f6:	e7e3      	b.n	80059c0 <acc_sensor_manager_prepare_measurement+0xa8>
 80059f8:	2000019c 	.word	0x2000019c

080059fc <acc_sensor_manager_prepare_metadata_only>:
 80059fc:	f000 b996 	b.w	8005d2c <acc_sweep_manager_prepare_metadata_only>

08005a00 <acc_sensor_manager_start_measurement>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	4e13      	ldr	r6, [pc, #76]	; (8005a50 <acc_sensor_manager_start_measurement+0x50>)
 8005a04:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005a08:	0164      	lsls	r4, r4, #5
 8005a0a:	6832      	ldr	r2, [r6, #0]
 8005a0c:	3c60      	subs	r4, #96	; 0x60
 8005a0e:	4422      	add	r2, r4
 8005a10:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8005a14:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8005a18:	2a01      	cmp	r2, #1
 8005a1a:	d002      	beq.n	8005a22 <acc_sensor_manager_start_measurement+0x22>
 8005a1c:	2700      	movs	r7, #0
 8005a1e:	4638      	mov	r0, r7
 8005a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a22:	4605      	mov	r5, r0
 8005a24:	f001 f8f4 	bl	8006c10 <acc_integration_sensor_device_power_on>
 8005a28:	6831      	ldr	r1, [r6, #0]
 8005a2a:	4421      	add	r1, r4
 8005a2c:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8005a2e:	f000 f9d3 	bl	8005dd8 <acc_sweep_manager_start>
 8005a32:	4607      	mov	r7, r0
 8005a34:	b130      	cbz	r0, 8005a44 <acc_sensor_manager_start_measurement+0x44>
 8005a36:	6833      	ldr	r3, [r6, #0]
 8005a38:	441c      	add	r4, r3
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8005a40:	4638      	mov	r0, r7
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a44:	4628      	mov	r0, r5
 8005a46:	f001 f8e9 	bl	8006c1c <acc_integration_sensor_device_power_off>
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	2000019c 	.word	0x2000019c

08005a54 <acc_sensor_manager_stop_measurement>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4e13      	ldr	r6, [pc, #76]	; (8005aa4 <acc_sensor_manager_stop_measurement+0x50>)
 8005a58:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005a5c:	0164      	lsls	r4, r4, #5
 8005a5e:	6833      	ldr	r3, [r6, #0]
 8005a60:	3c60      	subs	r4, #96	; 0x60
 8005a62:	4423      	add	r3, r4
 8005a64:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8005a68:	2a02      	cmp	r2, #2
 8005a6a:	d000      	beq.n	8005a6e <acc_sensor_manager_stop_measurement+0x1a>
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	4605      	mov	r5, r0
 8005a70:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005a72:	f000 fa4b 	bl	8005f0c <acc_sweep_manager_stop>
 8005a76:	b170      	cbz	r0, 8005a96 <acc_sensor_manager_stop_measurement+0x42>
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <acc_sensor_manager_stop_measurement+0x54>)
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	; (8005aac <acc_sensor_manager_stop_measurement+0x58>)
 8005a7c:	490c      	ldr	r1, [pc, #48]	; (8005ab0 <acc_sensor_manager_stop_measurement+0x5c>)
 8005a7e:	2004      	movs	r0, #4
 8005a80:	f001 f92a 	bl	8006cd8 <acc_log_rss>
 8005a84:	4628      	mov	r0, r5
 8005a86:	f001 f8c9 	bl	8006c1c <acc_integration_sensor_device_power_off>
 8005a8a:	6833      	ldr	r3, [r6, #0]
 8005a8c:	441c      	add	r4, r3
 8005a8e:	2303      	movs	r3, #3
 8005a90:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <acc_sensor_manager_stop_measurement+0x54>)
 8005a98:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <acc_sensor_manager_stop_measurement+0x60>)
 8005a9a:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <acc_sensor_manager_stop_measurement+0x5c>)
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f001 f91b 	bl	8006cd8 <acc_log_rss>
 8005aa2:	e7e9      	b.n	8005a78 <acc_sensor_manager_stop_measurement+0x24>
 8005aa4:	2000019c 	.word	0x2000019c
 8005aa8:	080123e8 	.word	0x080123e8
 8005aac:	08012460 	.word	0x08012460
 8005ab0:	0801255c 	.word	0x0801255c
 8005ab4:	08012424 	.word	0x08012424

08005ab8 <acc_sensor_manager_wait_for_adc_output>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005b94 <acc_sensor_manager_wait_for_adc_output+0xdc>
 8005ac0:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005ac4:	0164      	lsls	r4, r4, #5
 8005ac6:	f8d8 5000 	ldr.w	r5, [r8]
 8005aca:	3c60      	subs	r4, #96	; 0x60
 8005acc:	4425      	add	r5, r4
 8005ace:	f895 204e 	ldrb.w	r2, [r5, #78]	; 0x4e
 8005ad2:	b11a      	cbz	r2, 8005adc <acc_sensor_manager_wait_for_adc_output+0x24>
 8005ad4:	2601      	movs	r6, #1
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	bba3      	cbnz	r3, 8005b4e <acc_sensor_manager_wait_for_adc_output+0x96>
 8005ae4:	f8d5 905c 	ldr.w	r9, [r5, #92]	; 0x5c
 8005ae8:	4648      	mov	r0, r9
 8005aea:	f000 f941 	bl	8005d70 <acc_sweep_manager_get_data_reference>
 8005aee:	4682      	mov	sl, r0
 8005af0:	4648      	mov	r0, r9
 8005af2:	f000 f983 	bl	8005dfc <acc_sweep_manager_wait_for_data>
 8005af6:	4606      	mov	r6, r0
 8005af8:	b308      	cbz	r0, 8005b3e <acc_sensor_manager_wait_for_adc_output+0x86>
 8005afa:	4648      	mov	r0, r9
 8005afc:	f000 f9e4 	bl	8005ec8 <acc_sweep_manager_transfer_data>
 8005b00:	4606      	mov	r6, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d036      	beq.n	8005b74 <acc_sensor_manager_wait_for_adc_output+0xbc>
 8005b06:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0a:	f89a 2000 	ldrb.w	r2, [sl]
 8005b0e:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50
 8005b12:	441c      	add	r4, r3
 8005b14:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005b18:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
 8005b1c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005b20:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
 8005b24:	bb16      	cbnz	r6, 8005b6c <acc_sensor_manager_wait_for_adc_output+0xb4>
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 f9e6 	bl	8005ef8 <acc_sweep_manager_update_data>
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d1d0      	bne.n	8005ad4 <acc_sensor_manager_wait_for_adc_output+0x1c>
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <acc_sensor_manager_wait_for_adc_output+0xcc>)
 8005b36:	4914      	ldr	r1, [pc, #80]	; (8005b88 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 8005b38:	f001 f8ce 	bl	8006cd8 <acc_log_rss>
 8005b3c:	e7cb      	b.n	8005ad6 <acc_sensor_manager_wait_for_adc_output+0x1e>
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 8005b40:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <acc_sensor_manager_wait_for_adc_output+0xd4>)
 8005b42:	4911      	ldr	r1, [pc, #68]	; (8005b88 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 8005b44:	f001 f8c8 	bl	8006cd8 <acc_log_rss>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d1c6      	bne.n	8005ae4 <acc_sensor_manager_wait_for_adc_output+0x2c>
 8005b56:	f7ff ff53 	bl	8005a00 <acc_sensor_manager_start_measurement>
 8005b5a:	f8d8 5000 	ldr.w	r5, [r8]
 8005b5e:	4425      	add	r5, r4
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0bf      	beq.n	8005ae4 <acc_sensor_manager_wait_for_adc_output+0x2c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 8005b6a:	e7bb      	b.n	8005ae4 <acc_sensor_manager_wait_for_adc_output+0x2c>
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ff71 	bl	8005a54 <acc_sensor_manager_stop_measurement>
 8005b72:	e7b0      	b.n	8005ad6 <acc_sensor_manager_wait_for_adc_output+0x1e>
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <acc_sensor_manager_wait_for_adc_output+0xc8>)
 8005b76:	4a06      	ldr	r2, [pc, #24]	; (8005b90 <acc_sensor_manager_wait_for_adc_output+0xd8>)
 8005b78:	4903      	ldr	r1, [pc, #12]	; (8005b88 <acc_sensor_manager_wait_for_adc_output+0xd0>)
 8005b7a:	f001 f8ad 	bl	8006cd8 <acc_log_rss>
 8005b7e:	e7aa      	b.n	8005ad6 <acc_sensor_manager_wait_for_adc_output+0x1e>
 8005b80:	080123a8 	.word	0x080123a8
 8005b84:	080124f0 	.word	0x080124f0
 8005b88:	0801255c 	.word	0x0801255c
 8005b8c:	08012494 	.word	0x08012494
 8005b90:	080124c4 	.word	0x080124c4
 8005b94:	2000019c 	.word	0x2000019c

08005b98 <acc_sensor_manager_release_measurement>:
 8005b98:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <acc_sensor_manager_release_measurement+0x20>)
 8005b9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0140      	lsls	r0, r0, #5
 8005ba2:	3860      	subs	r0, #96	; 0x60
 8005ba4:	4418      	add	r0, r3
 8005ba6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005baa:	b90b      	cbnz	r3, 8005bb0 <acc_sensor_manager_release_measurement+0x18>
 8005bac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005bb0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005bb2:	f000 b8cf 	b.w	8005d54 <acc_sweep_manager_release>
 8005bb6:	bf00      	nop
 8005bb8:	2000019c 	.word	0x2000019c

08005bbc <acc_sensor_manager_get_configuration_output>:
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <acc_sensor_manager_get_configuration_output+0x14>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005bc4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8005bc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005bcc:	f000 b8e8 	b.w	8005da0 <acc_sweep_manager_get_configuration_output>
 8005bd0:	2000019c 	.word	0x2000019c

08005bd4 <acc_sweep_manager_activate>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4d0f      	ldr	r5, [pc, #60]	; (8005c14 <acc_sweep_manager_activate+0x40>)
 8005bd8:	782c      	ldrb	r4, [r5, #0]
 8005bda:	b10c      	cbz	r4, 8005be0 <acc_sweep_manager_activate+0xc>
 8005bdc:	4620      	mov	r0, r4
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
 8005be0:	f002 fce6 	bl	80085b0 <acc_sensor_activate>
 8005be4:	4606      	mov	r6, r0
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0f8      	beq.n	8005bdc <acc_sweep_manager_activate+0x8>
 8005bea:	f000 ffff 	bl	8006bec <acc_integration_get_sensor_count>
 8005bee:	2368      	movs	r3, #104	; 0x68
 8005bf0:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <acc_sweep_manager_activate+0x44>)
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f001 f83a 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8005bf8:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <acc_sweep_manager_activate+0x48>)
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	b120      	cbz	r0, 8005c08 <acc_sweep_manager_activate+0x34>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4634      	mov	r4, r6
 8005c02:	702b      	strb	r3, [r5, #0]
 8005c04:	4620      	mov	r0, r4
 8005c06:	bd70      	pop	{r4, r5, r6, pc}
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <acc_sweep_manager_activate+0x4c>)
 8005c0a:	4a06      	ldr	r2, [pc, #24]	; (8005c24 <acc_sweep_manager_activate+0x50>)
 8005c0c:	4906      	ldr	r1, [pc, #24]	; (8005c28 <acc_sweep_manager_activate+0x54>)
 8005c0e:	f001 f863 	bl	8006cd8 <acc_log_rss>
 8005c12:	e7e3      	b.n	8005bdc <acc_sweep_manager_activate+0x8>
 8005c14:	200001a0 	.word	0x200001a0
 8005c18:	080125e4 	.word	0x080125e4
 8005c1c:	200001a4 	.word	0x200001a4
 8005c20:	080125a4 	.word	0x080125a4
 8005c24:	0801214c 	.word	0x0801214c
 8005c28:	080125f8 	.word	0x080125f8

08005c2c <acc_sweep_manager_deactivate>:
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	4c06      	ldr	r4, [pc, #24]	; (8005c48 <acc_sweep_manager_deactivate+0x1c>)
 8005c30:	7823      	ldrb	r3, [r4, #0]
 8005c32:	b903      	cbnz	r3, 8005c36 <acc_sweep_manager_deactivate+0xa>
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	f002 fd03 	bl	8008640 <acc_sensor_deactivate>
 8005c3a:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <acc_sweep_manager_deactivate+0x20>)
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f001 f839 	bl	8006cb4 <acc_integration_mem_free>
 8005c42:	2300      	movs	r3, #0
 8005c44:	7023      	strb	r3, [r4, #0]
 8005c46:	bd10      	pop	{r4, pc}
 8005c48:	200001a0 	.word	0x200001a0
 8005c4c:	200001a4 	.word	0x200001a4

08005c50 <acc_sweep_manager_prepare>:
 8005c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c54:	b085      	sub	sp, #20
 8005c56:	4604      	mov	r4, r0
 8005c58:	f000 fc62 	bl	8006520 <acc_base_configuration_sensor_get>
 8005c5c:	2668      	movs	r6, #104	; 0x68
 8005c5e:	4b30      	ldr	r3, [pc, #192]	; (8005d20 <acc_sweep_manager_prepare+0xd0>)
 8005c60:	4680      	mov	r8, r0
 8005c62:	fb06 f600 	mul.w	r6, r6, r0
 8005c66:	4620      	mov	r0, r4
 8005c68:	f8d3 9000 	ldr.w	r9, [r3]
 8005c6c:	f000 fdc8 	bl	8006800 <acc_base_configuration_wg_duration_get>
 8005c70:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fdab 	bl	80067d0 <acc_base_configuration_integrator_get>
 8005c7a:	f8ad 000a 	strh.w	r0, [sp, #10]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fdd6 	bl	8006830 <acc_base_configuration_integrator_ramp_up_get>
 8005c84:	4641      	mov	r1, r8
 8005c86:	f8ad 000c 	strh.w	r0, [sp, #12]
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	aa02      	add	r2, sp, #8
 8005c8e:	200e      	movs	r0, #14
 8005c90:	f001 f862 	bl	8006d58 <acc_probes_execute_uint16>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	4620      	mov	r0, r4
 8005c98:	4798      	blx	r3
 8005c9a:	3e68      	subs	r6, #104	; 0x68
 8005c9c:	eb09 0506 	add.w	r5, r9, r6
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	6668      	str	r0, [r5, #100]	; 0x64
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d039      	beq.n	8005d1c <acc_sweep_manager_prepare+0xcc>
 8005ca8:	e9d0 0300 	ldrd	r0, r3, [r0]
 8005cac:	f105 0214 	add.w	r2, r5, #20
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4798      	blx	r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	b938      	cbnz	r0, 8005cc8 <acc_sweep_manager_prepare+0x78>
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	4638      	mov	r0, r7
 8005cbc:	461d      	mov	r5, r3
 8005cbe:	4790      	blx	r2
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	b005      	add	sp, #20
 8005cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f849 8006 	str.w	r8, [r9, r6]
 8005cce:	4620      	mov	r0, r4
 8005cd0:	60eb      	str	r3, [r5, #12]
 8005cd2:	742b      	strb	r3, [r5, #16]
 8005cd4:	f000 fd26 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d01d      	beq.n	8005d18 <acc_sweep_manager_prepare+0xc8>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fd2b 	bl	8006738 <acc_base_configuration_update_rate_get>
 8005ce2:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005d24 <acc_sweep_manager_prepare+0xd4>
 8005ce6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005cea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005cee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005cf2:	ee17 3a90 	vmov	r3, s15
 8005cf6:	60ab      	str	r3, [r5, #8]
 8005cf8:	f859 0006 	ldr.w	r0, [r9, r6]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	a901      	add	r1, sp, #4
 8005d00:	f002 fe6e 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	662b      	str	r3, [r5, #96]	; 0x60
 8005d08:	4628      	mov	r0, r5
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	65eb      	str	r3, [r5, #92]	; 0x5c
 8005d0e:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
 8005d12:	b005      	add	sp, #20
 8005d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <acc_sweep_manager_prepare+0xd8>)
 8005d1a:	e7ec      	b.n	8005cf6 <acc_sweep_manager_prepare+0xa6>
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	e7cf      	b.n	8005cc0 <acc_sweep_manager_prepare+0x70>
 8005d20:	200001a4 	.word	0x200001a4
 8005d24:	49f42400 	.word	0x49f42400
 8005d28:	001e8480 	.word	0x001e8480

08005d2c <acc_sweep_manager_prepare_metadata_only>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	6803      	ldr	r3, [r0, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	460e      	mov	r6, r1
 8005d34:	4798      	blx	r3
 8005d36:	4604      	mov	r4, r0
 8005d38:	b150      	cbz	r0, 8005d50 <acc_sweep_manager_prepare_metadata_only+0x24>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	e9d0 0300 	ldrd	r0, r3, [r0]
 8005d40:	4632      	mov	r2, r6
 8005d42:	4798      	blx	r3
 8005d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d46:	4605      	mov	r5, r0
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4798      	blx	r3
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	4605      	mov	r5, r0
 8005d52:	e7fb      	b.n	8005d4c <acc_sweep_manager_prepare_metadata_only+0x20>

08005d54 <acc_sweep_manager_release>:
 8005d54:	b148      	cbz	r0, 8005d6a <acc_sweep_manager_release+0x16>
 8005d56:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005d58:	b13b      	cbz	r3, 8005d6a <acc_sweep_manager_release+0x16>
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4618      	mov	r0, r3
 8005d62:	4790      	blx	r2
 8005d64:	2300      	movs	r3, #0
 8005d66:	6663      	str	r3, [r4, #100]	; 0x64
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	4770      	bx	lr

08005d6c <acc_sweep_manager_get_metadata>:
 8005d6c:	3014      	adds	r0, #20
 8005d6e:	4770      	bx	lr

08005d70 <acc_sweep_manager_get_data_reference>:
 8005d70:	3058      	adds	r0, #88	; 0x58
 8005d72:	4770      	bx	lr

08005d74 <acc_sweep_manager_is_sensor_connected>:
 8005d74:	f002 be10 	b.w	8008998 <acc_sensor_protocol_check_asic_id>

08005d78 <acc_sweep_manager_calibrate>:
 8005d78:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	4710      	bx	r2

08005d80 <acc_sweep_manager_measure_noise>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8005d84:	4605      	mov	r5, r0
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	4798      	blx	r3
 8005d8c:	b130      	cbz	r0, 8005d9c <acc_sweep_manager_measure_noise+0x1c>
 8005d8e:	f105 0114 	add.w	r1, r5, #20
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d9a:	4718      	bx	r3
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	bf00      	nop

08005da0 <acc_sweep_manager_get_configuration_output>:
 8005da0:	edd0 7a08 	vldr	s15, [r0, #32]
 8005da4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005dd4 <acc_sweep_manager_get_configuration_output+0x34>
 8005da8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005daa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005dac:	b430      	push	{r4, r5}
 8005dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dba:	6945      	ldr	r5, [r0, #20]
 8005dbc:	6984      	ldr	r4, [r0, #24]
 8005dbe:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005dc0:	8108      	strh	r0, [r1, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	600d      	str	r5, [r1, #0]
 8005dc6:	604c      	str	r4, [r1, #4]
 8005dc8:	814b      	strh	r3, [r1, #10]
 8005dca:	60ca      	str	r2, [r1, #12]
 8005dcc:	edc1 7a04 	vstr	s15, [r1, #16]
 8005dd0:	bc30      	pop	{r4, r5}
 8005dd2:	4770      	bx	lr
 8005dd4:	4d8ef3c2 	.word	0x4d8ef3c2

08005dd8 <acc_sweep_manager_start>:
 8005dd8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	4604      	mov	r4, r0
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	4790      	blx	r2
 8005de4:	b138      	cbz	r0, 8005df6 <acc_sweep_manager_start+0x1e>
 8005de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	4790      	blx	r2
 8005dee:	b110      	cbz	r0, 8005df6 <acc_sweep_manager_start+0x1e>
 8005df0:	2301      	movs	r3, #1
 8005df2:	7423      	strb	r3, [r4, #16]
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	2000      	movs	r0, #0
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop

08005dfc <acc_sweep_manager_wait_for_data>:
 8005dfc:	b530      	push	{r4, r5, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	6881      	ldr	r1, [r0, #8]
 8005e02:	4605      	mov	r5, r0
 8005e04:	aa02      	add	r2, sp, #8
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	f002 fe9a 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	b178      	cbz	r0, 8005e30 <acc_sweep_manager_wait_for_data+0x34>
 8005e10:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d00e      	beq.n	8005e36 <acc_sweep_manager_wait_for_data+0x3a>
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d023      	beq.n	8005e64 <acc_sweep_manager_wait_for_data+0x68>
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d013      	beq.n	8005e48 <acc_sweep_manager_wait_for_data+0x4c>
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <acc_sweep_manager_wait_for_data+0xa8>)
 8005e24:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <acc_sweep_manager_wait_for_data+0xac>)
 8005e26:	4921      	ldr	r1, [pc, #132]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f000 ff55 	bl	8006cd8 <acc_log_rss>
 8005e2e:	2400      	movs	r4, #0
 8005e30:	4620      	mov	r0, r4
 8005e32:	b005      	add	sp, #20
 8005e34:	bd30      	pop	{r4, r5, pc}
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <acc_sweep_manager_wait_for_data+0xb4>)
 8005e38:	491c      	ldr	r1, [pc, #112]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f000 ff4c 	bl	8006cd8 <acc_log_rss>
 8005e40:	2400      	movs	r4, #0
 8005e42:	4620      	mov	r0, r4
 8005e44:	b005      	add	sp, #20
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005e4c:	f003 f884 	bl	8008f58 <acc_sensor_protocol_get_error_message>
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <acc_sweep_manager_wait_for_data+0xb8>)
 8005e52:	4916      	ldr	r1, [pc, #88]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e54:	4603      	mov	r3, r0
 8005e56:	2000      	movs	r0, #0
 8005e58:	f000 ff3e 	bl	8006cd8 <acc_log_rss>
 8005e5c:	2400      	movs	r4, #0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	b005      	add	sp, #20
 8005e62:	bd30      	pop	{r4, r5, pc}
 8005e64:	4a14      	ldr	r2, [pc, #80]	; (8005eb8 <acc_sweep_manager_wait_for_data+0xbc>)
 8005e66:	4911      	ldr	r1, [pc, #68]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e68:	2004      	movs	r0, #4
 8005e6a:	f000 ff35 	bl	8006cd8 <acc_log_rss>
 8005e6e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005e72:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8005e76:	f885 2058 	strb.w	r2, [r5, #88]	; 0x58
 8005e7a:	b95b      	cbnz	r3, 8005e94 <acc_sweep_manager_wait_for_data+0x98>
 8005e7c:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	d0d5      	beq.n	8005e30 <acc_sweep_manager_wait_for_data+0x34>
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <acc_sweep_manager_wait_for_data+0xc0>)
 8005e86:	4a0e      	ldr	r2, [pc, #56]	; (8005ec0 <acc_sweep_manager_wait_for_data+0xc4>)
 8005e88:	4908      	ldr	r1, [pc, #32]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e8a:	2004      	movs	r0, #4
 8005e8c:	462c      	mov	r4, r5
 8005e8e:	f000 ff23 	bl	8006cd8 <acc_log_rss>
 8005e92:	e7cd      	b.n	8005e30 <acc_sweep_manager_wait_for_data+0x34>
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <acc_sweep_manager_wait_for_data+0xc0>)
 8005e96:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <acc_sweep_manager_wait_for_data+0xc8>)
 8005e98:	4904      	ldr	r1, [pc, #16]	; (8005eac <acc_sweep_manager_wait_for_data+0xb0>)
 8005e9a:	2004      	movs	r0, #4
 8005e9c:	f000 ff1c 	bl	8006cd8 <acc_log_rss>
 8005ea0:	e7ec      	b.n	8005e7c <acc_sweep_manager_wait_for_data+0x80>
 8005ea2:	bf00      	nop
 8005ea4:	080126f0 	.word	0x080126f0
 8005ea8:	080125c0 	.word	0x080125c0
 8005eac:	080125f8 	.word	0x080125f8
 8005eb0:	080126c0 	.word	0x080126c0
 8005eb4:	080126a0 	.word	0x080126a0
 8005eb8:	0801262c 	.word	0x0801262c
 8005ebc:	080125d4 	.word	0x080125d4
 8005ec0:	08012684 	.word	0x08012684
 8005ec4:	08012664 	.word	0x08012664

08005ec8 <acc_sweep_manager_transfer_data>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005ecc:	4605      	mov	r5, r0
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	4790      	blx	r2
 8005ed4:	65e8      	str	r0, [r5, #92]	; 0x5c
 8005ed6:	b118      	cbz	r0, 8005ee0 <acc_sweep_manager_transfer_data+0x18>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	742b      	strb	r3, [r5, #16]
 8005edc:	2001      	movs	r0, #1
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <acc_sweep_manager_transfer_data+0x28>)
 8005ee4:	4903      	ldr	r1, [pc, #12]	; (8005ef4 <acc_sweep_manager_transfer_data+0x2c>)
 8005ee6:	f000 fef7 	bl	8006cd8 <acc_log_rss>
 8005eea:	4620      	mov	r0, r4
 8005eec:	bd38      	pop	{r3, r4, r5, pc}
 8005eee:	bf00      	nop
 8005ef0:	08012608 	.word	0x08012608
 8005ef4:	080125f8 	.word	0x080125f8

08005ef8 <acc_sweep_manager_update_data>:
 8005ef8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005efa:	b510      	push	{r4, lr}
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	4604      	mov	r4, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	4790      	blx	r2
 8005f04:	b108      	cbz	r0, 8005f0a <acc_sweep_manager_update_data+0x12>
 8005f06:	2301      	movs	r3, #1
 8005f08:	7423      	strb	r3, [r4, #16]
 8005f0a:	bd10      	pop	{r4, pc}

08005f0c <acc_sweep_manager_stop>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005f10:	7c01      	ldrb	r1, [r0, #16]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	4604      	mov	r4, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	4790      	blx	r2
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	7423      	strb	r3, [r4, #16]
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <acc_alg_basic_math_q3_12_complex_mul>:
 8005f20:	b322      	cbz	r2, 8005f6c <acc_alg_basic_math_q3_12_complex_mul+0x4c>
 8005f22:	b4f0      	push	{r4, r5, r6, r7}
 8005f24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005f28:	3102      	adds	r1, #2
 8005f2a:	1c86      	adds	r6, r0, #2
 8005f2c:	f936 7c02 	ldrsh.w	r7, [r6, #-2]
 8005f30:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8005f34:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8005f38:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005f3c:	fb13 f307 	smulbb	r3, r3, r7
 8005f40:	fb04 3315 	mls	r3, r4, r5, r3
 8005f44:	131b      	asrs	r3, r3, #12
 8005f46:	f826 3c02 	strh.w	r3, [r6, #-2]
 8005f4a:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 8005f4e:	fb05 f507 	mul.w	r5, r5, r7
 8005f52:	fb14 5403 	smlabb	r4, r4, r3, r5
 8005f56:	1324      	asrs	r4, r4, #12
 8005f58:	8044      	strh	r4, [r0, #2]
 8005f5a:	3004      	adds	r0, #4
 8005f5c:	4282      	cmp	r2, r0
 8005f5e:	f106 0604 	add.w	r6, r6, #4
 8005f62:	f101 0104 	add.w	r1, r1, #4
 8005f66:	d1e1      	bne.n	8005f2c <acc_alg_basic_math_q3_12_complex_mul+0xc>
 8005f68:	bcf0      	pop	{r4, r5, r6, r7}
 8005f6a:	4770      	bx	lr
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop

08005f70 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 8005f70:	b203      	sxth	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	ea4f 4020 	mov.w	r0, r0, asr #16
 8005f78:	bfb8      	it	lt
 8005f7a:	425b      	neglt	r3, r3
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	bfb8      	it	lt
 8005f80:	4240      	neglt	r0, r0
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	b200      	sxth	r0, r0
 8005f86:	4283      	cmp	r3, r0
 8005f88:	b082      	sub	sp, #8
 8005f8a:	db02      	blt.n	8005f92 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	4613      	mov	r3, r2
 8005f92:	f240 62a1 	movw	r2, #1697	; 0x6a1
 8005f96:	fb10 f202 	smulbb	r2, r0, r2
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	bfb8      	it	lt
 8005f9e:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 8005fa2:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 8005fa6:	db0b      	blt.n	8005fc0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 8005fa8:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8005fac:	fb13 f302 	smulbb	r3, r3, r2
 8005fb0:	f640 5271 	movw	r2, #3441	; 0xd71
 8005fb4:	fb10 3002 	smlabb	r0, r0, r2, r3
 8005fb8:	f340 300f 	sbfx	r0, r0, #12, #16
 8005fbc:	b002      	add	sp, #8
 8005fbe:	4770      	bx	lr
 8005fc0:	f240 3227 	movw	r2, #807	; 0x327
 8005fc4:	fb13 f302 	smulbb	r3, r3, r2
 8005fc8:	f640 72d7 	movw	r2, #4055	; 0xfd7
 8005fcc:	fb10 3002 	smlabb	r0, r0, r2, r3
 8005fd0:	f340 300f 	sbfx	r0, r0, #12, #16
 8005fd4:	b002      	add	sp, #8
 8005fd6:	4770      	bx	lr

08005fd8 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d055      	beq.n	8006088 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xb0>
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005fe4:	1c85      	adds	r5, r0, #2
 8005fe6:	f240 66a1 	movw	r6, #1697	; 0x6a1
 8005fea:	f640 08fa 	movw	r8, #2298	; 0x8fa
 8005fee:	f640 5e71 	movw	lr, #3441	; 0xd71
 8005ff2:	f240 3c27 	movw	ip, #807	; 0x327
 8005ff6:	f640 77d7 	movw	r7, #4055	; 0xfd7
 8005ffa:	e008      	b.n	800600e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 8005ffc:	f825 3c02 	strh.w	r3, [r5, #-2]
 8006000:	3004      	adds	r0, #4
 8006002:	f820 3c02 	strh.w	r3, [r0, #-2]
 8006006:	4281      	cmp	r1, r0
 8006008:	f105 0504 	add.w	r5, r5, #4
 800600c:	d03a      	beq.n	8006084 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xac>
 800600e:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 8006012:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006016:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 800601a:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 800601e:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 8006022:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 8006026:	b212      	sxth	r2, r2
 8006028:	b21b      	sxth	r3, r3
 800602a:	429a      	cmp	r2, r3
 800602c:	db02      	blt.n	8006034 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x5c>
 800602e:	469a      	mov	sl, r3
 8006030:	4613      	mov	r3, r2
 8006032:	4652      	mov	r2, sl
 8006034:	fb13 fa06 	smulbb	sl, r3, r6
 8006038:	f1ba 0f00 	cmp.w	sl, #0
 800603c:	bfb8      	it	lt
 800603e:	f60a 7aff 	addwlt	sl, sl, #4095	; 0xfff
 8006042:	ebb2 3f2a 	cmp.w	r2, sl, asr #12
 8006046:	bfb5      	itete	lt
 8006048:	fb12 f20c 	smulbblt	r2, r2, ip
 800604c:	fb12 f208 	smulbbge	r2, r2, r8
 8006050:	fb13 2307 	smlabblt	r3, r3, r7, r2
 8006054:	fb13 230e 	smlabbge	r3, r3, lr, r2
 8006058:	f343 330f 	sbfx	r3, r3, #12, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0cd      	beq.n	8005ffc <acc_alg_basic_math_q3_12_complex_conj_normalize+0x24>
 8006060:	ebc4 5404 	rsb	r4, r4, r4, lsl #20
 8006064:	0324      	lsls	r4, r4, #12
 8006066:	ea4f 3909 	mov.w	r9, r9, lsl #12
 800606a:	fb94 f4f3 	sdiv	r4, r4, r3
 800606e:	3004      	adds	r0, #4
 8006070:	fb99 f3f3 	sdiv	r3, r9, r3
 8006074:	f825 3c02 	strh.w	r3, [r5, #-2]
 8006078:	f820 4c02 	strh.w	r4, [r0, #-2]
 800607c:	4281      	cmp	r1, r0
 800607e:	f105 0504 	add.w	r5, r5, #4
 8006082:	d1c4      	bne.n	800600e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x36>
 8006084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <acc_alg_basic_math_q3_12_sin>:
 800608c:	0043      	lsls	r3, r0, #1
 800608e:	bf4c      	ite	mi
 8006090:	43c3      	mvnmi	r3, r0
 8006092:	4603      	movpl	r3, r0
 8006094:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006098:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800609c:	0d9b      	lsrs	r3, r3, #22
 800609e:	4904      	ldr	r1, [pc, #16]	; (80060b0 <acc_alg_basic_math_q3_12_sin+0x24>)
 80060a0:	4602      	mov	r2, r0
 80060a2:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 80060a6:	2a00      	cmp	r2, #0
 80060a8:	bfbc      	itt	lt
 80060aa:	4240      	neglt	r0, r0
 80060ac:	b200      	sxthlt	r0, r0
 80060ae:	4770      	bx	lr
 80060b0:	08012710 	.word	0x08012710

080060b4 <acc_alg_basic_math_q3_12_cos>:
 80060b4:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80060b8:	0053      	lsls	r3, r2, #1
 80060ba:	bf4c      	ite	mi
 80060bc:	43d3      	mvnmi	r3, r2
 80060be:	4613      	movpl	r3, r2
 80060c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80060c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060c8:	0d9b      	lsrs	r3, r3, #22
 80060ca:	4904      	ldr	r1, [pc, #16]	; (80060dc <acc_alg_basic_math_q3_12_cos+0x28>)
 80060cc:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	bfbc      	itt	lt
 80060d4:	4240      	neglt	r0, r0
 80060d6:	b200      	sxthlt	r0, r0
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	08012710 	.word	0x08012710

080060e0 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 80060e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e4:	eddf 7ab8 	vldr	s15, [pc, #736]	; 80063c8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2e8>
 80060e8:	eeb0 0ac0 	vabs.f32	s0, s0
 80060ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80060f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f4:	ed2d 8b02 	vpush	{d8}
 80060f8:	4607      	mov	r7, r0
 80060fa:	4689      	mov	r9, r1
 80060fc:	4616      	mov	r6, r2
 80060fe:	4698      	mov	r8, r3
 8006100:	dc74      	bgt.n	80061ec <acc_alg_biquad_q3_12_lowpass_coeffs+0x10c>
 8006102:	eddf 7ab2 	vldr	s15, [pc, #712]	; 80063cc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 8006106:	ee20 0a27 	vmul.f32	s0, s0, s15
 800610a:	f007 fa27 	bl	800d55c <roundf>
 800610e:	eddf 7ab0 	vldr	s15, [pc, #704]	; 80063d0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f0>
 8006112:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80063d4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f4>
 8006116:	ee20 0a27 	vmul.f32	s0, s0, s15
 800611a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800611e:	f007 fa43 	bl	800d5a8 <tanf>
 8006122:	2f00      	cmp	r7, #0
 8006124:	d067      	beq.n	80061f6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x116>
 8006126:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80063d8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f8>
 800612a:	eddf 7aac 	vldr	s15, [pc, #688]	; 80063dc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800612e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006136:	ee30 7a27 	vadd.f32	s14, s0, s15
 800613a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800613e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006142:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006146:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800614a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800614e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006152:	eef4 7ac6 	vcmpe.f32	s15, s12
 8006156:	ee37 7a26 	vadd.f32	s14, s14, s13
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	eef1 5ac7 	vsqrt.f32	s11, s14
 8006162:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 8006166:	f100 8105 	bmi.w	8006374 <acc_alg_biquad_q3_12_lowpass_coeffs+0x294>
 800616a:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80063e0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800616e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006172:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800617a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006182:	ee17 3a90 	vmov	r3, s15
 8006186:	fb03 f203 	mul.w	r2, r3, r3
 800618a:	f1c2 6280 	rsb	r2, r2, #67108864	; 0x4000000
 800618e:	ee07 2a90 	vmov	s15, r2
 8006192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006196:	eef1 7ac7 	vsqrt.f32	s15, s14
 800619a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061a6:	ee17 4a90 	vmov	r4, s15
 80061aa:	2c00      	cmp	r4, #0
 80061ac:	d161      	bne.n	8006272 <acc_alg_biquad_q3_12_lowpass_coeffs+0x192>
 80061ae:	f1b9 0f00 	cmp.w	r9, #0
 80061b2:	d00b      	beq.n	80061cc <acc_alg_biquad_q3_12_lowpass_coeffs+0xec>
 80061b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b8:	f8a9 4002 	strh.w	r4, [r9, #2]
 80061bc:	f8a9 4004 	strh.w	r4, [r9, #4]
 80061c0:	f8a9 4006 	strh.w	r4, [r9, #6]
 80061c4:	f8a9 4008 	strh.w	r4, [r9, #8]
 80061c8:	f8a9 3000 	strh.w	r3, [r9]
 80061cc:	b116      	cbz	r6, 80061d4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 80061ce:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	4640      	mov	r0, r8
 80061d6:	f1b8 0f00 	cmp.w	r8, #0
 80061da:	d003      	beq.n	80061e4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x104>
 80061dc:	2300      	movs	r3, #0
 80061de:	2000      	movs	r0, #0
 80061e0:	f8c8 3000 	str.w	r3, [r8]
 80061e4:	ecbd 8b02 	vpop	{d8}
 80061e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f040 80d5 	bne.w	800639c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2bc>
 80061f2:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80063e4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 80061f6:	eddf 7a79 	vldr	s15, [pc, #484]	; 80063dc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 80061fa:	ee30 7a27 	vadd.f32	s14, s0, s15
 80061fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006206:	ee27 0a00 	vmul.f32	s0, s14, s0
 800620a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800620e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8006212:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8006216:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800621a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800621e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006226:	eef1 5ac7 	vsqrt.f32	s11, s14
 800622a:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800622e:	d59c      	bpl.n	800616a <acc_alg_biquad_q3_12_lowpass_coeffs+0x8a>
 8006230:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80063e8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 8006234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006238:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800623c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006244:	ee17 4a90 	vmov	r4, s15
 8006248:	00a5      	lsls	r5, r4, #2
 800624a:	fb04 f505 	mul.w	r5, r4, r5
 800624e:	f1c5 6580 	rsb	r5, r5, #67108864	; 0x4000000
 8006252:	ee07 5a90 	vmov	s15, r5
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800625e:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8006262:	ee77 7a26 	vadd.f32	s15, s14, s13
 8006266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800626a:	ee17 3a90 	vmov	r3, s15
 800626e:	2c00      	cmp	r4, #0
 8006270:	d09d      	beq.n	80061ae <acc_alg_biquad_q3_12_lowpass_coeffs+0xce>
 8006272:	f1b9 0f00 	cmp.w	r9, #0
 8006276:	d018      	beq.n	80062aa <acc_alg_biquad_q3_12_lowpass_coeffs+0x1ca>
 8006278:	b2a2      	uxth	r2, r4
 800627a:	f5c2 5080 	rsb	r0, r2, #4096	; 0x1000
 800627e:	b280      	uxth	r0, r0
 8006280:	b205      	sxth	r5, r0
 8006282:	b299      	uxth	r1, r3
 8006284:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 8006288:	f8a9 5000 	strh.w	r5, [r9]
 800628c:	f8a9 5004 	strh.w	r5, [r9, #4]
 8006290:	f5c4 55c0 	rsb	r5, r4, #6144	; 0x1800
 8006294:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006298:	0040      	lsls	r0, r0, #1
 800629a:	ebc1 0145 	rsb	r1, r1, r5, lsl #1
 800629e:	f8a9 0002 	strh.w	r0, [r9, #2]
 80062a2:	f8a9 2006 	strh.w	r2, [r9, #6]
 80062a6:	f8a9 1008 	strh.w	r1, [r9, #8]
 80062aa:	b923      	cbnz	r3, 80062b6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d6>
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	d091      	beq.n	80061d4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 80062b0:	2300      	movs	r3, #0
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	e78e      	b.n	80061d4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	d073      	beq.n	80063a2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c2>
 80062ba:	00a2      	lsls	r2, r4, #2
 80062bc:	fb03 f103 	mul.w	r1, r3, r3
 80062c0:	fb04 1202 	mla	r2, r4, r2, r1
 80062c4:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
 80062c8:	f102 427c 	add.w	r2, r2, #4227858432	; 0xfc000000
 80062cc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80062d0:	0052      	lsls	r2, r2, #1
 80062d2:	fb04 f404 	mul.w	r4, r4, r4
 80062d6:	1aa4      	subs	r4, r4, r2
 80062d8:	ee07 4a90 	vmov	s15, r4
 80062dc:	ee07 2a10 	vmov	s14, r2
 80062e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062e8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80062ec:	b356      	cbz	r6, 8006344 <acc_alg_biquad_q3_12_lowpass_coeffs+0x264>
 80062ee:	2f00      	cmp	r7, #0
 80062f0:	d05c      	beq.n	80063ac <acc_alg_biquad_q3_12_lowpass_coeffs+0x2cc>
 80062f2:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80063ec <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 80062f6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80063dc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 80062fa:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80063f0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 80062fe:	ee78 6a26 	vadd.f32	s13, s16, s13
 8006302:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006306:	ee27 7a26 	vmul.f32	s14, s14, s13
 800630a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800630e:	eef1 6ac7 	vsqrt.f32	s13, s14
 8006312:	f5c3 5100 	rsb	r1, r3, #8192	; 0x2000
 8006316:	0049      	lsls	r1, r1, #1
 8006318:	eeb1 6ae7 	vsqrt.f32	s12, s15
 800631c:	ee07 1a90 	vmov	s15, r1
 8006320:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006328:	eef1 6ac7 	vsqrt.f32	s13, s14
 800632c:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8006330:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006334:	f007 f836 	bl	800d3a4 <atanf>
 8006338:	eddf 7a26 	vldr	s15, [pc, #152]	; 80063d4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f4>
 800633c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006340:	ed86 0a00 	vstr	s0, [r6]
 8006344:	f1b8 0f00 	cmp.w	r8, #0
 8006348:	d02e      	beq.n	80063a8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c8>
 800634a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80063f4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800634e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80063f8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 8006352:	ee28 7a27 	vmul.f32	s14, s16, s15
 8006356:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800635a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800635e:	2001      	movs	r0, #1
 8006360:	ee28 8a67 	vnmul.f32	s16, s16, s15
 8006364:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8006368:	ecbd 8b02 	vpop	{d8}
 800636c:	edc8 7a00 	vstr	s15, [r8]
 8006370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006374:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637c:	f77f af58 	ble.w	8006230 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 8006380:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80063fc <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 8006384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006388:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800638c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006394:	ee17 3a90 	vmov	r3, s15
 8006398:	005c      	lsls	r4, r3, #1
 800639a:	e755      	b.n	8006248 <acc_alg_biquad_q3_12_lowpass_coeffs+0x168>
 800639c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006400 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 80063a0:	e746      	b.n	8006230 <acc_alg_biquad_q3_12_lowpass_coeffs+0x150>
 80063a2:	f1b8 0f00 	cmp.w	r8, #0
 80063a6:	d188      	bne.n	80062ba <acc_alg_biquad_q3_12_lowpass_coeffs+0x1da>
 80063a8:	2001      	movs	r0, #1
 80063aa:	e71b      	b.n	80061e4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x104>
 80063ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b0:	ee78 6a07 	vadd.f32	s13, s16, s14
 80063b4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80063b8:	ee36 7aa6 	vadd.f32	s14, s13, s13
 80063bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80063c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80063c4:	e7a3      	b.n	800630e <acc_alg_biquad_q3_12_lowpass_coeffs+0x22e>
 80063c6:	bf00      	nop
 80063c8:	3effffde 	.word	0x3effffde
 80063cc:	48800000 	.word	0x48800000
 80063d0:	36800000 	.word	0x36800000
 80063d4:	40490fdb 	.word	0x40490fdb
 80063d8:	3f9f8d77 	.word	0x3f9f8d77
 80063dc:	3fb504f3 	.word	0x3fb504f3
 80063e0:	46000000 	.word	0x46000000
 80063e4:	cbae8a4a 	.word	0xcbae8a4a
 80063e8:	45800000 	.word	0x45800000
 80063ec:	3f15f61a 	.word	0x3f15f61a
 80063f0:	3f95f61a 	.word	0x3f95f61a
 80063f4:	4113c6ef 	.word	0x4113c6ef
 80063f8:	42a646e1 	.word	0x42a646e1
 80063fc:	45000000 	.word	0x45000000
 8006400:	3354ff7f 	.word	0x3354ff7f

08006404 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt>:
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006406:	2400      	movs	r4, #0
 8006408:	b083      	sub	sp, #12
 800640a:	4623      	mov	r3, r4
 800640c:	4605      	mov	r5, r0
 800640e:	460e      	mov	r6, r1
 8006410:	4617      	mov	r7, r2
 8006412:	9401      	str	r4, [sp, #4]
 8006414:	f7f9 fee8 	bl	80001e8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	463a      	mov	r2, r7
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	b003      	add	sp, #12
 8006422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006426:	f7f9 bedb 	b.w	80001e0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800642a:	bf00      	nop

0800642c <acc_alg_iq_demodulation_q3_12>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	ed2d 8b06 	vpush	{d8-d10}
 8006434:	eeb0 aa40 	vmov.f32	s20, s0
 8006438:	eef0 aa60 	vmov.f32	s21, s1
 800643c:	ee20 0a01 	vmul.f32	s0, s0, s2
 8006440:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006444:	4680      	mov	r8, r0
 8006446:	460f      	mov	r7, r1
 8006448:	f007 f950 	bl	800d6ec <fmodf>
 800644c:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8006500 <acc_alg_iq_demodulation_q3_12+0xd4>
 8006450:	eddf 9a2c 	vldr	s19, [pc, #176]	; 8006504 <acc_alg_iq_demodulation_q3_12+0xd8>
 8006454:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006460:	bfb4      	ite	lt
 8006462:	eef0 7a68 	vmovlt.f32	s15, s17
 8006466:	eef0 7a48 	vmovge.f32	s15, s16
 800646a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800646e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8006472:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8006476:	ee2a 0a2a 	vmul.f32	s0, s20, s21
 800647a:	ee77 7a89 	vadd.f32	s15, s15, s18
 800647e:	eef0 0a68 	vmov.f32	s1, s17
 8006482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006486:	ee17 5a90 	vmov	r5, s15
 800648a:	f007 f92f 	bl	800d6ec <fmodf>
 800648e:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8006492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006496:	bfb4      	ite	lt
 8006498:	eef0 7a68 	vmovlt.f32	s15, s17
 800649c:	eef0 7a48 	vmovge.f32	s15, s16
 80064a0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80064a4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80064a8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80064ac:	b327      	cbz	r7, 80064f8 <acc_alg_iq_demodulation_q3_12+0xcc>
 80064ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b2:	f108 0802 	add.w	r8, r8, #2
 80064b6:	ee17 6a90 	vmov	r6, s15
 80064ba:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 80064be:	4628      	mov	r0, r5
 80064c0:	f938 4c02 	ldrsh.w	r4, [r8, #-2]
 80064c4:	f7ff fdf6 	bl	80060b4 <acc_alg_basic_math_q3_12_cos>
 80064c8:	fb04 f300 	mul.w	r3, r4, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bfb8      	it	lt
 80064d0:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 80064d4:	131b      	asrs	r3, r3, #12
 80064d6:	4628      	mov	r0, r5
 80064d8:	f828 3c02 	strh.w	r3, [r8, #-2]
 80064dc:	f7ff fdd6 	bl	800608c <acc_alg_basic_math_q3_12_sin>
 80064e0:	fb04 f000 	mul.w	r0, r4, r0
 80064e4:	2800      	cmp	r0, #0
 80064e6:	bfb8      	it	lt
 80064e8:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 80064ec:	1300      	asrs	r0, r0, #12
 80064ee:	f828 0b04 	strh.w	r0, [r8], #4
 80064f2:	4547      	cmp	r7, r8
 80064f4:	4435      	add	r5, r6
 80064f6:	d1e2      	bne.n	80064be <acc_alg_iq_demodulation_q3_12+0x92>
 80064f8:	ecbd 8b06 	vpop	{d8-d10}
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	00000000 	.word	0x00000000
 8006504:	4f800000 	.word	0x4f800000

08006508 <configuration_is_valid.part.0>:
 8006508:	b508      	push	{r3, lr}
 800650a:	4a03      	ldr	r2, [pc, #12]	; (8006518 <configuration_is_valid.part.0+0x10>)
 800650c:	4903      	ldr	r1, [pc, #12]	; (800651c <configuration_is_valid.part.0+0x14>)
 800650e:	2001      	movs	r0, #1
 8006510:	f000 fbe2 	bl	8006cd8 <acc_log_rss>
 8006514:	2000      	movs	r0, #0
 8006516:	bd08      	pop	{r3, pc}
 8006518:	08012a80 	.word	0x08012a80
 800651c:	08012aac 	.word	0x08012aac

08006520 <acc_base_configuration_sensor_get>:
 8006520:	b510      	push	{r4, lr}
 8006522:	4604      	mov	r4, r0
 8006524:	b108      	cbz	r0, 800652a <acc_base_configuration_sensor_get+0xa>
 8006526:	6920      	ldr	r0, [r4, #16]
 8006528:	bd10      	pop	{r4, pc}
 800652a:	f7ff ffed 	bl	8006508 <configuration_is_valid.part.0>
 800652e:	2800      	cmp	r0, #0
 8006530:	d1f9      	bne.n	8006526 <acc_base_configuration_sensor_get+0x6>
 8006532:	bd10      	pop	{r4, pc}

08006534 <acc_base_configuration_sensor_set>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	b082      	sub	sp, #8
 800653a:	b110      	cbz	r0, 8006542 <acc_base_configuration_sensor_set+0xe>
 800653c:	6121      	str	r1, [r4, #16]
 800653e:	b002      	add	sp, #8
 8006540:	bd10      	pop	{r4, pc}
 8006542:	9101      	str	r1, [sp, #4]
 8006544:	f7ff ffe0 	bl	8006508 <configuration_is_valid.part.0>
 8006548:	9901      	ldr	r1, [sp, #4]
 800654a:	2800      	cmp	r0, #0
 800654c:	d1f6      	bne.n	800653c <acc_base_configuration_sensor_set+0x8>
 800654e:	e7f6      	b.n	800653e <acc_base_configuration_sensor_set+0xa>

08006550 <acc_base_configuration_requested_start_get>:
 8006550:	b510      	push	{r4, lr}
 8006552:	4604      	mov	r4, r0
 8006554:	b110      	cbz	r0, 800655c <acc_base_configuration_requested_start_get+0xc>
 8006556:	ed94 0a05 	vldr	s0, [r4, #20]
 800655a:	bd10      	pop	{r4, pc}
 800655c:	f7ff ffd4 	bl	8006508 <configuration_is_valid.part.0>
 8006560:	2800      	cmp	r0, #0
 8006562:	d1f8      	bne.n	8006556 <acc_base_configuration_requested_start_get+0x6>
 8006564:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800656c <acc_base_configuration_requested_start_get+0x1c>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	00000000 	.word	0x00000000

08006570 <acc_base_configuration_requested_start_set>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	b082      	sub	sp, #8
 8006576:	b118      	cbz	r0, 8006580 <acc_base_configuration_requested_start_set+0x10>
 8006578:	ed84 0a05 	vstr	s0, [r4, #20]
 800657c:	b002      	add	sp, #8
 800657e:	bd10      	pop	{r4, pc}
 8006580:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006584:	f7ff ffc0 	bl	8006508 <configuration_is_valid.part.0>
 8006588:	ed9d 0a01 	vldr	s0, [sp, #4]
 800658c:	2800      	cmp	r0, #0
 800658e:	d1f3      	bne.n	8006578 <acc_base_configuration_requested_start_set+0x8>
 8006590:	e7f4      	b.n	800657c <acc_base_configuration_requested_start_set+0xc>
 8006592:	bf00      	nop

08006594 <acc_base_configuration_requested_length_get>:
 8006594:	b510      	push	{r4, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	b110      	cbz	r0, 80065a0 <acc_base_configuration_requested_length_get+0xc>
 800659a:	ed94 0a06 	vldr	s0, [r4, #24]
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	f7ff ffb2 	bl	8006508 <configuration_is_valid.part.0>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1f8      	bne.n	800659a <acc_base_configuration_requested_length_get+0x6>
 80065a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065b0 <acc_base_configuration_requested_length_get+0x1c>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	00000000 	.word	0x00000000

080065b4 <acc_base_configuration_requested_length_set>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4604      	mov	r4, r0
 80065b8:	b082      	sub	sp, #8
 80065ba:	b118      	cbz	r0, 80065c4 <acc_base_configuration_requested_length_set+0x10>
 80065bc:	ed84 0a06 	vstr	s0, [r4, #24]
 80065c0:	b002      	add	sp, #8
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80065c8:	f7ff ff9e 	bl	8006508 <configuration_is_valid.part.0>
 80065cc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d1f3      	bne.n	80065bc <acc_base_configuration_requested_length_set+0x8>
 80065d4:	e7f4      	b.n	80065c0 <acc_base_configuration_requested_length_set+0xc>
 80065d6:	bf00      	nop

080065d8 <acc_base_configuration_repetition_mode_on_demand_set>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	b110      	cbz	r0, 80065e4 <acc_base_configuration_repetition_mode_on_demand_set+0xc>
 80065de:	2301      	movs	r3, #1
 80065e0:	7223      	strb	r3, [r4, #8]
 80065e2:	bd10      	pop	{r4, pc}
 80065e4:	f7ff ff90 	bl	8006508 <configuration_is_valid.part.0>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1f8      	bne.n	80065de <acc_base_configuration_repetition_mode_on_demand_set+0x6>
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop

080065f0 <acc_base_configuration_power_save_mode_get>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	b108      	cbz	r0, 80065fa <acc_base_configuration_power_save_mode_get+0xa>
 80065f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	f7ff ff85 	bl	8006508 <configuration_is_valid.part.0>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d1f9      	bne.n	80065f6 <acc_base_configuration_power_save_mode_get+0x6>
 8006602:	bd10      	pop	{r4, pc}

08006604 <acc_base_configuration_power_save_mode_set>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	b082      	sub	sp, #8
 800660a:	b110      	cbz	r0, 8006612 <acc_base_configuration_power_save_mode_set+0xe>
 800660c:	6261      	str	r1, [r4, #36]	; 0x24
 800660e:	b002      	add	sp, #8
 8006610:	bd10      	pop	{r4, pc}
 8006612:	9101      	str	r1, [sp, #4]
 8006614:	f7ff ff78 	bl	8006508 <configuration_is_valid.part.0>
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	2800      	cmp	r0, #0
 800661c:	d1f6      	bne.n	800660c <acc_base_configuration_power_save_mode_set+0x8>
 800661e:	e7f6      	b.n	800660e <acc_base_configuration_power_save_mode_set+0xa>

08006620 <acc_base_configuration_tx_disable_get>:
 8006620:	b510      	push	{r4, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	b110      	cbz	r0, 800662c <acc_base_configuration_tx_disable_get+0xc>
 8006626:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 800662a:	bd10      	pop	{r4, pc}
 800662c:	f7ff ff6c 	bl	8006508 <configuration_is_valid.part.0>
 8006630:	2800      	cmp	r0, #0
 8006632:	d1f8      	bne.n	8006626 <acc_base_configuration_tx_disable_get+0x6>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop

08006638 <acc_base_configuration_tx_disable_set>:
 8006638:	b510      	push	{r4, lr}
 800663a:	4604      	mov	r4, r0
 800663c:	b082      	sub	sp, #8
 800663e:	b118      	cbz	r0, 8006648 <acc_base_configuration_tx_disable_set+0x10>
 8006640:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
 8006644:	b002      	add	sp, #8
 8006646:	bd10      	pop	{r4, pc}
 8006648:	9101      	str	r1, [sp, #4]
 800664a:	f7ff ff5d 	bl	8006508 <configuration_is_valid.part.0>
 800664e:	9901      	ldr	r1, [sp, #4]
 8006650:	2800      	cmp	r0, #0
 8006652:	d1f5      	bne.n	8006640 <acc_base_configuration_tx_disable_set+0x8>
 8006654:	e7f6      	b.n	8006644 <acc_base_configuration_tx_disable_set+0xc>
 8006656:	bf00      	nop

08006658 <acc_base_configuration_decrease_tx_emission_get>:
 8006658:	b510      	push	{r4, lr}
 800665a:	4604      	mov	r4, r0
 800665c:	b110      	cbz	r0, 8006664 <acc_base_configuration_decrease_tx_emission_get+0xc>
 800665e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 8006662:	bd10      	pop	{r4, pc}
 8006664:	f7ff ff50 	bl	8006508 <configuration_is_valid.part.0>
 8006668:	2800      	cmp	r0, #0
 800666a:	d1f8      	bne.n	800665e <acc_base_configuration_decrease_tx_emission_get+0x6>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop

08006670 <acc_base_configuration_decrease_tx_emission_set>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4604      	mov	r4, r0
 8006674:	b082      	sub	sp, #8
 8006676:	b118      	cbz	r0, 8006680 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8006678:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
 800667c:	b002      	add	sp, #8
 800667e:	bd10      	pop	{r4, pc}
 8006680:	9101      	str	r1, [sp, #4]
 8006682:	f7ff ff41 	bl	8006508 <configuration_is_valid.part.0>
 8006686:	9901      	ldr	r1, [sp, #4]
 8006688:	2800      	cmp	r0, #0
 800668a:	d1f5      	bne.n	8006678 <acc_base_configuration_decrease_tx_emission_set+0x8>
 800668c:	e7f6      	b.n	800667c <acc_base_configuration_decrease_tx_emission_set+0xc>
 800668e:	bf00      	nop

08006690 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	b110      	cbz	r0, 800669c <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8006696:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800669a:	bd10      	pop	{r4, pc}
 800669c:	f7ff ff34 	bl	8006508 <configuration_is_valid.part.0>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1f8      	bne.n	8006696 <acc_base_configuration_hw_accelerated_average_samples_get+0x6>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop

080066a8 <acc_base_configuration_hw_accelerated_average_samples_set>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	4604      	mov	r4, r0
 80066ac:	b082      	sub	sp, #8
 80066ae:	b110      	cbz	r0, 80066b6 <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 80066b0:	8521      	strh	r1, [r4, #40]	; 0x28
 80066b2:	b002      	add	sp, #8
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	9101      	str	r1, [sp, #4]
 80066b8:	f7ff ff26 	bl	8006508 <configuration_is_valid.part.0>
 80066bc:	9901      	ldr	r1, [sp, #4]
 80066be:	2800      	cmp	r0, #0
 80066c0:	d1f6      	bne.n	80066b0 <acc_base_configuration_hw_accelerated_average_samples_set+0x8>
 80066c2:	e7f6      	b.n	80066b2 <acc_base_configuration_hw_accelerated_average_samples_set+0xa>

080066c4 <acc_base_configuration_radar_engine_creation_set>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	b082      	sub	sp, #8
 80066ca:	b110      	cbz	r0, 80066d2 <acc_base_configuration_radar_engine_creation_set+0xe>
 80066cc:	6021      	str	r1, [r4, #0]
 80066ce:	b002      	add	sp, #8
 80066d0:	bd10      	pop	{r4, pc}
 80066d2:	9101      	str	r1, [sp, #4]
 80066d4:	f7ff ff18 	bl	8006508 <configuration_is_valid.part.0>
 80066d8:	9901      	ldr	r1, [sp, #4]
 80066da:	2800      	cmp	r0, #0
 80066dc:	d1f6      	bne.n	80066cc <acc_base_configuration_radar_engine_creation_set+0x8>
 80066de:	e7f6      	b.n	80066ce <acc_base_configuration_radar_engine_creation_set+0xa>

080066e0 <acc_base_configuration_pipeline_assembly_set>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
 80066e4:	b082      	sub	sp, #8
 80066e6:	b110      	cbz	r0, 80066ee <acc_base_configuration_pipeline_assembly_set+0xe>
 80066e8:	6061      	str	r1, [r4, #4]
 80066ea:	b002      	add	sp, #8
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	9101      	str	r1, [sp, #4]
 80066f0:	f7ff ff0a 	bl	8006508 <configuration_is_valid.part.0>
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d1f6      	bne.n	80066e8 <acc_base_configuration_pipeline_assembly_set+0x8>
 80066fa:	e7f6      	b.n	80066ea <acc_base_configuration_pipeline_assembly_set+0xa>

080066fc <acc_base_configuration_point_start_get>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4604      	mov	r4, r0
 8006700:	b108      	cbz	r0, 8006706 <acc_base_configuration_point_start_get+0xa>
 8006702:	69e0      	ldr	r0, [r4, #28]
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f7ff feff 	bl	8006508 <configuration_is_valid.part.0>
 800670a:	2800      	cmp	r0, #0
 800670c:	d1f9      	bne.n	8006702 <acc_base_configuration_point_start_get+0x6>
 800670e:	bd10      	pop	{r4, pc}

08006710 <acc_base_configuration_point_length_get>:
 8006710:	b510      	push	{r4, lr}
 8006712:	4604      	mov	r4, r0
 8006714:	b108      	cbz	r0, 800671a <acc_base_configuration_point_length_get+0xa>
 8006716:	6a20      	ldr	r0, [r4, #32]
 8006718:	bd10      	pop	{r4, pc}
 800671a:	f7ff fef5 	bl	8006508 <configuration_is_valid.part.0>
 800671e:	2800      	cmp	r0, #0
 8006720:	d1f9      	bne.n	8006716 <acc_base_configuration_point_length_get+0x6>
 8006722:	bd10      	pop	{r4, pc}

08006724 <acc_base_configuration_repetition_mode_get>:
 8006724:	b510      	push	{r4, lr}
 8006726:	4604      	mov	r4, r0
 8006728:	b108      	cbz	r0, 800672e <acc_base_configuration_repetition_mode_get+0xa>
 800672a:	7a20      	ldrb	r0, [r4, #8]
 800672c:	bd10      	pop	{r4, pc}
 800672e:	f7ff feeb 	bl	8006508 <configuration_is_valid.part.0>
 8006732:	2800      	cmp	r0, #0
 8006734:	d1f9      	bne.n	800672a <acc_base_configuration_repetition_mode_get+0x6>
 8006736:	bd10      	pop	{r4, pc}

08006738 <acc_base_configuration_update_rate_get>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	b160      	cbz	r0, 8006758 <acc_base_configuration_update_rate_get+0x20>
 800673e:	7a23      	ldrb	r3, [r4, #8]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d80d      	bhi.n	8006760 <acc_base_configuration_update_rate_get+0x28>
 8006744:	e8df f003 	tbb	[pc, r3]
 8006748:	02020505 	.word	0x02020505
 800674c:	ed94 0a03 	vldr	s0, [r4, #12]
 8006750:	bd10      	pop	{r4, pc}
 8006752:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006768 <acc_base_configuration_update_rate_get+0x30>
 8006756:	bd10      	pop	{r4, pc}
 8006758:	f7ff fed6 	bl	8006508 <configuration_is_valid.part.0>
 800675c:	2800      	cmp	r0, #0
 800675e:	d1ee      	bne.n	800673e <acc_base_configuration_update_rate_get+0x6>
 8006760:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800676c <acc_base_configuration_update_rate_get+0x34>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	7f800000 	.word	0x7f800000
 800676c:	7fc00000 	.word	0x7fc00000

08006770 <acc_base_configuration_sweep_average_get>:
 8006770:	b510      	push	{r4, lr}
 8006772:	4604      	mov	r4, r0
 8006774:	b108      	cbz	r0, 800677a <acc_base_configuration_sweep_average_get+0xa>
 8006776:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8006778:	bd10      	pop	{r4, pc}
 800677a:	f7ff fec5 	bl	8006508 <configuration_is_valid.part.0>
 800677e:	2800      	cmp	r0, #0
 8006780:	d1f9      	bne.n	8006776 <acc_base_configuration_sweep_average_get+0x6>
 8006782:	bd10      	pop	{r4, pc}

08006784 <acc_base_configuration_sweep_average_set>:
 8006784:	b510      	push	{r4, lr}
 8006786:	4604      	mov	r4, r0
 8006788:	b082      	sub	sp, #8
 800678a:	b110      	cbz	r0, 8006792 <acc_base_configuration_sweep_average_set+0xe>
 800678c:	8561      	strh	r1, [r4, #42]	; 0x2a
 800678e:	b002      	add	sp, #8
 8006790:	bd10      	pop	{r4, pc}
 8006792:	9101      	str	r1, [sp, #4]
 8006794:	f7ff feb8 	bl	8006508 <configuration_is_valid.part.0>
 8006798:	9901      	ldr	r1, [sp, #4]
 800679a:	2800      	cmp	r0, #0
 800679c:	d1f6      	bne.n	800678c <acc_base_configuration_sweep_average_set+0x8>
 800679e:	e7f6      	b.n	800678e <acc_base_configuration_sweep_average_set+0xa>

080067a0 <acc_base_configuration_gain_get>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	b108      	cbz	r0, 80067aa <acc_base_configuration_gain_get+0xa>
 80067a6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f7ff fead 	bl	8006508 <configuration_is_valid.part.0>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1f9      	bne.n	80067a6 <acc_base_configuration_gain_get+0x6>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <acc_base_configuration_gain_set>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4604      	mov	r4, r0
 80067b8:	b082      	sub	sp, #8
 80067ba:	b110      	cbz	r0, 80067c2 <acc_base_configuration_gain_set+0xe>
 80067bc:	85a1      	strh	r1, [r4, #44]	; 0x2c
 80067be:	b002      	add	sp, #8
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	9101      	str	r1, [sp, #4]
 80067c4:	f7ff fea0 	bl	8006508 <configuration_is_valid.part.0>
 80067c8:	9901      	ldr	r1, [sp, #4]
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d1f6      	bne.n	80067bc <acc_base_configuration_gain_set+0x8>
 80067ce:	e7f6      	b.n	80067be <acc_base_configuration_gain_set+0xa>

080067d0 <acc_base_configuration_integrator_get>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4604      	mov	r4, r0
 80067d4:	b108      	cbz	r0, 80067da <acc_base_configuration_integrator_get+0xa>
 80067d6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	f7ff fe95 	bl	8006508 <configuration_is_valid.part.0>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d1f9      	bne.n	80067d6 <acc_base_configuration_integrator_get+0x6>
 80067e2:	bd10      	pop	{r4, pc}

080067e4 <acc_base_configuration_integrator_set>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	4604      	mov	r4, r0
 80067e8:	b082      	sub	sp, #8
 80067ea:	b110      	cbz	r0, 80067f2 <acc_base_configuration_integrator_set+0xe>
 80067ec:	85e1      	strh	r1, [r4, #46]	; 0x2e
 80067ee:	b002      	add	sp, #8
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	9101      	str	r1, [sp, #4]
 80067f4:	f7ff fe88 	bl	8006508 <configuration_is_valid.part.0>
 80067f8:	9901      	ldr	r1, [sp, #4]
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d1f6      	bne.n	80067ec <acc_base_configuration_integrator_set+0x8>
 80067fe:	e7f6      	b.n	80067ee <acc_base_configuration_integrator_set+0xa>

08006800 <acc_base_configuration_wg_duration_get>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4604      	mov	r4, r0
 8006804:	b108      	cbz	r0, 800680a <acc_base_configuration_wg_duration_get+0xa>
 8006806:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8006808:	bd10      	pop	{r4, pc}
 800680a:	f7ff fe7d 	bl	8006508 <configuration_is_valid.part.0>
 800680e:	2800      	cmp	r0, #0
 8006810:	d1f9      	bne.n	8006806 <acc_base_configuration_wg_duration_get+0x6>
 8006812:	bd10      	pop	{r4, pc}

08006814 <acc_base_configuration_wg_duration_set>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	b082      	sub	sp, #8
 800681a:	b110      	cbz	r0, 8006822 <acc_base_configuration_wg_duration_set+0xe>
 800681c:	8621      	strh	r1, [r4, #48]	; 0x30
 800681e:	b002      	add	sp, #8
 8006820:	bd10      	pop	{r4, pc}
 8006822:	9101      	str	r1, [sp, #4]
 8006824:	f7ff fe70 	bl	8006508 <configuration_is_valid.part.0>
 8006828:	9901      	ldr	r1, [sp, #4]
 800682a:	2800      	cmp	r0, #0
 800682c:	d1f6      	bne.n	800681c <acc_base_configuration_wg_duration_set+0x8>
 800682e:	e7f6      	b.n	800681e <acc_base_configuration_wg_duration_set+0xa>

08006830 <acc_base_configuration_integrator_ramp_up_get>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4604      	mov	r4, r0
 8006834:	b108      	cbz	r0, 800683a <acc_base_configuration_integrator_ramp_up_get+0xa>
 8006836:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8006838:	bd10      	pop	{r4, pc}
 800683a:	f7ff fe65 	bl	8006508 <configuration_is_valid.part.0>
 800683e:	2800      	cmp	r0, #0
 8006840:	d1f9      	bne.n	8006836 <acc_base_configuration_integrator_ramp_up_get+0x6>
 8006842:	bd10      	pop	{r4, pc}

08006844 <acc_base_configuration_integrator_ramp_up_set>:
 8006844:	b510      	push	{r4, lr}
 8006846:	4604      	mov	r4, r0
 8006848:	b082      	sub	sp, #8
 800684a:	b110      	cbz	r0, 8006852 <acc_base_configuration_integrator_ramp_up_set+0xe>
 800684c:	8661      	strh	r1, [r4, #50]	; 0x32
 800684e:	b002      	add	sp, #8
 8006850:	bd10      	pop	{r4, pc}
 8006852:	9101      	str	r1, [sp, #4]
 8006854:	f7ff fe58 	bl	8006508 <configuration_is_valid.part.0>
 8006858:	9901      	ldr	r1, [sp, #4]
 800685a:	2800      	cmp	r0, #0
 800685c:	d1f6      	bne.n	800684c <acc_base_configuration_integrator_ramp_up_set+0x8>
 800685e:	e7f6      	b.n	800684e <acc_base_configuration_integrator_ramp_up_set+0xa>

08006860 <acc_base_configuration_sweep_type_debug_set>:
 8006860:	b510      	push	{r4, lr}
 8006862:	4604      	mov	r4, r0
 8006864:	b082      	sub	sp, #8
 8006866:	b118      	cbz	r0, 8006870 <acc_base_configuration_sweep_type_debug_set+0x10>
 8006868:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 800686c:	b002      	add	sp, #8
 800686e:	bd10      	pop	{r4, pc}
 8006870:	9101      	str	r1, [sp, #4]
 8006872:	f7ff fe49 	bl	8006508 <configuration_is_valid.part.0>
 8006876:	9901      	ldr	r1, [sp, #4]
 8006878:	2800      	cmp	r0, #0
 800687a:	d1f5      	bne.n	8006868 <acc_base_configuration_sweep_type_debug_set+0x8>
 800687c:	e7f6      	b.n	800686c <acc_base_configuration_sweep_type_debug_set+0xc>
 800687e:	bf00      	nop

08006880 <acc_base_configuration_sweep_type_debug_get>:
 8006880:	b510      	push	{r4, lr}
 8006882:	4604      	mov	r4, r0
 8006884:	b110      	cbz	r0, 800688c <acc_base_configuration_sweep_type_debug_get+0xc>
 8006886:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800688a:	bd10      	pop	{r4, pc}
 800688c:	f7ff fe3c 	bl	8006508 <configuration_is_valid.part.0>
 8006890:	2800      	cmp	r0, #0
 8006892:	d1f8      	bne.n	8006886 <acc_base_configuration_sweep_type_debug_get+0x6>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	bf00      	nop

08006898 <acc_base_configuration_use_point_range_set>:
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	b082      	sub	sp, #8
 800689e:	b118      	cbz	r0, 80068a8 <acc_base_configuration_use_point_range_set+0x10>
 80068a0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80068a4:	b002      	add	sp, #8
 80068a6:	bd10      	pop	{r4, pc}
 80068a8:	9101      	str	r1, [sp, #4]
 80068aa:	f7ff fe2d 	bl	8006508 <configuration_is_valid.part.0>
 80068ae:	9901      	ldr	r1, [sp, #4]
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d1f5      	bne.n	80068a0 <acc_base_configuration_use_point_range_set+0x8>
 80068b4:	e7f6      	b.n	80068a4 <acc_base_configuration_use_point_range_set+0xc>
 80068b6:	bf00      	nop

080068b8 <acc_base_configuration_use_point_range_get>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4604      	mov	r4, r0
 80068bc:	b110      	cbz	r0, 80068c4 <acc_base_configuration_use_point_range_get+0xc>
 80068be:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80068c2:	bd10      	pop	{r4, pc}
 80068c4:	f7ff fe20 	bl	8006508 <configuration_is_valid.part.0>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d1f8      	bne.n	80068be <acc_base_configuration_use_point_range_get+0x6>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop

080068d0 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	b082      	sub	sp, #8
 80068d6:	b118      	cbz	r0, 80068e0 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 80068d8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80068dc:	b002      	add	sp, #8
 80068de:	bd10      	pop	{r4, pc}
 80068e0:	9101      	str	r1, [sp, #4]
 80068e2:	f7ff fe11 	bl	8006508 <configuration_is_valid.part.0>
 80068e6:	9901      	ldr	r1, [sp, #4]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d1f5      	bne.n	80068d8 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x8>
 80068ec:	e7f6      	b.n	80068dc <acc_base_configuration_use_fast_dll_refresh_routine_set+0xc>
 80068ee:	bf00      	nop

080068f0 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4604      	mov	r4, r0
 80068f4:	b082      	sub	sp, #8
 80068f6:	b110      	cbz	r0, 80068fe <acc_base_configuration_staggered_vga_stabilization_time_set+0xe>
 80068f8:	8761      	strh	r1, [r4, #58]	; 0x3a
 80068fa:	b002      	add	sp, #8
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	9101      	str	r1, [sp, #4]
 8006900:	f7ff fe02 	bl	8006508 <configuration_is_valid.part.0>
 8006904:	9901      	ldr	r1, [sp, #4]
 8006906:	2800      	cmp	r0, #0
 8006908:	d1f6      	bne.n	80068f8 <acc_base_configuration_staggered_vga_stabilization_time_set+0x8>
 800690a:	e7f6      	b.n	80068fa <acc_base_configuration_staggered_vga_stabilization_time_set+0xa>

0800690c <acc_base_configuration_downsampling_factor_get>:
 800690c:	b510      	push	{r4, lr}
 800690e:	4604      	mov	r4, r0
 8006910:	b110      	cbz	r0, 8006918 <acc_base_configuration_downsampling_factor_get+0xc>
 8006912:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8006916:	bd10      	pop	{r4, pc}
 8006918:	f7ff fdf6 	bl	8006508 <configuration_is_valid.part.0>
 800691c:	2800      	cmp	r0, #0
 800691e:	d1f8      	bne.n	8006912 <acc_base_configuration_downsampling_factor_get+0x6>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	bf00      	nop

08006924 <acc_base_configuration_downsampling_factor_set>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	b082      	sub	sp, #8
 800692a:	b118      	cbz	r0, 8006934 <acc_base_configuration_downsampling_factor_set+0x10>
 800692c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
 8006930:	b002      	add	sp, #8
 8006932:	bd10      	pop	{r4, pc}
 8006934:	9101      	str	r1, [sp, #4]
 8006936:	f7ff fde7 	bl	8006508 <configuration_is_valid.part.0>
 800693a:	9901      	ldr	r1, [sp, #4]
 800693c:	2800      	cmp	r0, #0
 800693e:	d1f5      	bne.n	800692c <acc_base_configuration_downsampling_factor_set+0x8>
 8006940:	e7f6      	b.n	8006930 <acc_base_configuration_downsampling_factor_set+0xc>
 8006942:	bf00      	nop

08006944 <acc_base_configuration_noise_level_normalization_get>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4604      	mov	r4, r0
 8006948:	b110      	cbz	r0, 8006950 <acc_base_configuration_noise_level_normalization_get+0xc>
 800694a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 800694e:	bd10      	pop	{r4, pc}
 8006950:	f7ff fdda 	bl	8006508 <configuration_is_valid.part.0>
 8006954:	2800      	cmp	r0, #0
 8006956:	d1f8      	bne.n	800694a <acc_base_configuration_noise_level_normalization_get+0x6>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	bf00      	nop

0800695c <acc_base_configuration_noise_level_normalization_set>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4604      	mov	r4, r0
 8006960:	b082      	sub	sp, #8
 8006962:	b118      	cbz	r0, 800696c <acc_base_configuration_noise_level_normalization_set+0x10>
 8006964:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8006968:	b002      	add	sp, #8
 800696a:	bd10      	pop	{r4, pc}
 800696c:	9101      	str	r1, [sp, #4]
 800696e:	f7ff fdcb 	bl	8006508 <configuration_is_valid.part.0>
 8006972:	9901      	ldr	r1, [sp, #4]
 8006974:	2800      	cmp	r0, #0
 8006976:	d1f5      	bne.n	8006964 <acc_base_configuration_noise_level_normalization_set+0x8>
 8006978:	e7f6      	b.n	8006968 <acc_base_configuration_noise_level_normalization_set+0xc>
 800697a:	bf00      	nop

0800697c <acc_base_configuration_print>:
 800697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	4604      	mov	r4, r0
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	2800      	cmp	r0, #0
 8006986:	d036      	beq.n	80069f6 <acc_base_configuration_print+0x7a>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800698e:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 8006990:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
 8006992:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
 8006994:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8006998:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
 800699c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800699e:	f894 903c 	ldrb.w	r9, [r4, #60]	; 0x3c
 80069a2:	2a03      	cmp	r2, #3
 80069a4:	d91e      	bls.n	80069e4 <acc_base_configuration_print+0x68>
 80069a6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006aec <acc_base_configuration_print+0x170>
 80069aa:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80069ae:	b300      	cbz	r0, 80069f2 <acc_base_configuration_print+0x76>
 80069b0:	4a49      	ldr	r2, [pc, #292]	; (8006ad8 <acc_base_configuration_print+0x15c>)
 80069b2:	f8df a138 	ldr.w	sl, [pc, #312]	; 8006aec <acc_base_configuration_print+0x170>
 80069b6:	2801      	cmp	r0, #1
 80069b8:	bf18      	it	ne
 80069ba:	4652      	movne	r2, sl
 80069bc:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80069c0:	e9cd 2008 	strd	r2, r0, [sp, #32]
 80069c4:	e9cd 1500 	strd	r1, r5, [sp]
 80069c8:	e9cd 9806 	strd	r9, r8, [sp, #24]
 80069cc:	e9cd ce04 	strd	ip, lr, [sp, #16]
 80069d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80069d4:	4a41      	ldr	r2, [pc, #260]	; (8006adc <acc_base_configuration_print+0x160>)
 80069d6:	4942      	ldr	r1, [pc, #264]	; (8006ae0 <acc_base_configuration_print+0x164>)
 80069d8:	2002      	movs	r0, #2
 80069da:	f000 f97d 	bl	8006cd8 <acc_log_rss>
 80069de:	b00a      	add	sp, #40	; 0x28
 80069e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e4:	483f      	ldr	r0, [pc, #252]	; (8006ae4 <acc_base_configuration_print+0x168>)
 80069e6:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 80069ea:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1de      	bne.n	80069b0 <acc_base_configuration_print+0x34>
 80069f2:	4a3d      	ldr	r2, [pc, #244]	; (8006ae8 <acc_base_configuration_print+0x16c>)
 80069f4:	e7e2      	b.n	80069bc <acc_base_configuration_print+0x40>
 80069f6:	f7ff fd87 	bl	8006508 <configuration_is_valid.part.0>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d1c4      	bne.n	8006988 <acc_base_configuration_print+0xc>
 80069fe:	f7ff fd83 	bl	8006508 <configuration_is_valid.part.0>
 8006a02:	b108      	cbz	r0, 8006a08 <acc_base_configuration_print+0x8c>
 8006a04:	4623      	mov	r3, r4
 8006a06:	e7c0      	b.n	800698a <acc_base_configuration_print+0xe>
 8006a08:	f7ff fd7e 	bl	8006508 <configuration_is_valid.part.0>
 8006a0c:	b110      	cbz	r0, 8006a14 <acc_base_configuration_print+0x98>
 8006a0e:	4623      	mov	r3, r4
 8006a10:	4621      	mov	r1, r4
 8006a12:	e7bc      	b.n	800698e <acc_base_configuration_print+0x12>
 8006a14:	f7ff fd78 	bl	8006508 <configuration_is_valid.part.0>
 8006a18:	b118      	cbz	r0, 8006a22 <acc_base_configuration_print+0xa6>
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4621      	mov	r1, r4
 8006a20:	e7b6      	b.n	8006990 <acc_base_configuration_print+0x14>
 8006a22:	f7ff fd71 	bl	8006508 <configuration_is_valid.part.0>
 8006a26:	b120      	cbz	r0, 8006a32 <acc_base_configuration_print+0xb6>
 8006a28:	4623      	mov	r3, r4
 8006a2a:	4626      	mov	r6, r4
 8006a2c:	4625      	mov	r5, r4
 8006a2e:	4621      	mov	r1, r4
 8006a30:	e7af      	b.n	8006992 <acc_base_configuration_print+0x16>
 8006a32:	f7ff fd69 	bl	8006508 <configuration_is_valid.part.0>
 8006a36:	b128      	cbz	r0, 8006a44 <acc_base_configuration_print+0xc8>
 8006a38:	4623      	mov	r3, r4
 8006a3a:	4627      	mov	r7, r4
 8006a3c:	4626      	mov	r6, r4
 8006a3e:	4625      	mov	r5, r4
 8006a40:	4621      	mov	r1, r4
 8006a42:	e7a7      	b.n	8006994 <acc_base_configuration_print+0x18>
 8006a44:	f7ff fd60 	bl	8006508 <configuration_is_valid.part.0>
 8006a48:	b130      	cbz	r0, 8006a58 <acc_base_configuration_print+0xdc>
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	46a4      	mov	ip, r4
 8006a4e:	4627      	mov	r7, r4
 8006a50:	4626      	mov	r6, r4
 8006a52:	4625      	mov	r5, r4
 8006a54:	4621      	mov	r1, r4
 8006a56:	e79f      	b.n	8006998 <acc_base_configuration_print+0x1c>
 8006a58:	f7ff fd56 	bl	8006508 <configuration_is_valid.part.0>
 8006a5c:	b138      	cbz	r0, 8006a6e <acc_base_configuration_print+0xf2>
 8006a5e:	4623      	mov	r3, r4
 8006a60:	46a6      	mov	lr, r4
 8006a62:	46a4      	mov	ip, r4
 8006a64:	4627      	mov	r7, r4
 8006a66:	4626      	mov	r6, r4
 8006a68:	4625      	mov	r5, r4
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	e796      	b.n	800699c <acc_base_configuration_print+0x20>
 8006a6e:	f7ff fd4b 	bl	8006508 <configuration_is_valid.part.0>
 8006a72:	b9a8      	cbnz	r0, 8006aa0 <acc_base_configuration_print+0x124>
 8006a74:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006af0 <acc_base_configuration_print+0x174>
 8006a78:	f7ff fd46 	bl	8006508 <configuration_is_valid.part.0>
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	b118      	cbz	r0, 8006a88 <acc_base_configuration_print+0x10c>
 8006a80:	2300      	movs	r3, #0
 8006a82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006a86:	deff      	udf	#255	; 0xff
 8006a88:	f7ff fd3e 	bl	8006508 <configuration_is_valid.part.0>
 8006a8c:	b180      	cbz	r0, 8006ab0 <acc_base_configuration_print+0x134>
 8006a8e:	462b      	mov	r3, r5
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <acc_base_configuration_print+0x16c>)
 8006a92:	46a9      	mov	r9, r5
 8006a94:	46ae      	mov	lr, r5
 8006a96:	46ac      	mov	ip, r5
 8006a98:	462f      	mov	r7, r5
 8006a9a:	462e      	mov	r6, r5
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	e78d      	b.n	80069bc <acc_base_configuration_print+0x40>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aa4:	2a03      	cmp	r2, #3
 8006aa6:	d80d      	bhi.n	8006ac4 <acc_base_configuration_print+0x148>
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <acc_base_configuration_print+0x168>)
 8006aaa:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8006aae:	e7e3      	b.n	8006a78 <acc_base_configuration_print+0xfc>
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <acc_base_configuration_print+0x16c>)
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4681      	mov	r9, r0
 8006ab6:	4686      	mov	lr, r0
 8006ab8:	4684      	mov	ip, r0
 8006aba:	4607      	mov	r7, r0
 8006abc:	4606      	mov	r6, r0
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	e77d      	b.n	80069c0 <acc_base_configuration_print+0x44>
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	469e      	mov	lr, r3
 8006ac8:	469c      	mov	ip, r3
 8006aca:	461f      	mov	r7, r3
 8006acc:	461e      	mov	r6, r3
 8006ace:	461d      	mov	r5, r3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8006aec <acc_base_configuration_print+0x170>
 8006ad6:	e768      	b.n	80069aa <acc_base_configuration_print+0x2e>
 8006ad8:	08012d98 	.word	0x08012d98
 8006adc:	08012a48 	.word	0x08012a48
 8006ae0:	08012aac 	.word	0x08012aac
 8006ae4:	08012914 	.word	0x08012914
 8006ae8:	08012a44 	.word	0x08012a44
 8006aec:	08017034 	.word	0x08017034
 8006af0:	08012a40 	.word	0x08012a40

08006af4 <acc_base_configuration_check>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	b1e8      	cbz	r0, 8006b36 <acc_base_configuration_check+0x42>
 8006afa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006afc:	2c03      	cmp	r4, #3
 8006afe:	d80c      	bhi.n	8006b1a <acc_base_configuration_check+0x26>
 8006b00:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006b02:	2b16      	cmp	r3, #22
 8006b04:	d810      	bhi.n	8006b28 <acc_base_configuration_check+0x34>
 8006b06:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0c:	d818      	bhi.n	8006b40 <acc_base_configuration_check+0x4c>
 8006b0e:	b914      	cbnz	r4, 8006b16 <acc_base_configuration_check+0x22>
 8006b10:	7a2b      	ldrb	r3, [r5, #8]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d01b      	beq.n	8006b4e <acc_base_configuration_check+0x5a>
 8006b16:	2001      	movs	r0, #1
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <acc_base_configuration_check+0x68>)
 8006b1c:	4910      	ldr	r1, [pc, #64]	; (8006b60 <acc_base_configuration_check+0x6c>)
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f000 f8da 	bl	8006cd8 <acc_log_rss>
 8006b24:	2000      	movs	r0, #0
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	4a0e      	ldr	r2, [pc, #56]	; (8006b64 <acc_base_configuration_check+0x70>)
 8006b2a:	490d      	ldr	r1, [pc, #52]	; (8006b60 <acc_base_configuration_check+0x6c>)
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f000 f8d3 	bl	8006cd8 <acc_log_rss>
 8006b32:	2000      	movs	r0, #0
 8006b34:	bd38      	pop	{r3, r4, r5, pc}
 8006b36:	f7ff fce7 	bl	8006508 <configuration_is_valid.part.0>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1dd      	bne.n	8006afa <acc_base_configuration_check+0x6>
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <acc_base_configuration_check+0x74>)
 8006b42:	4907      	ldr	r1, [pc, #28]	; (8006b60 <acc_base_configuration_check+0x6c>)
 8006b44:	2000      	movs	r0, #0
 8006b46:	f000 f8c7 	bl	8006cd8 <acc_log_rss>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <acc_base_configuration_check+0x78>)
 8006b52:	4903      	ldr	r1, [pc, #12]	; (8006b60 <acc_base_configuration_check+0x6c>)
 8006b54:	f000 f8c0 	bl	8006cd8 <acc_log_rss>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	08012924 	.word	0x08012924
 8006b60:	08012aac 	.word	0x08012aac
 8006b64:	0801294c 	.word	0x0801294c
 8006b68:	08012990 	.word	0x08012990
 8006b6c:	080129f4 	.word	0x080129f4

08006b70 <acc_integration_register>:
 8006b70:	6942      	ldr	r2, [r0, #20]
 8006b72:	b538      	push	{r3, r4, r5, lr}
 8006b74:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006b76:	b312      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b78:	6982      	ldr	r2, [r0, #24]
 8006b7a:	b302      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b7c:	6a02      	ldr	r2, [r0, #32]
 8006b7e:	b1f2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b80:	69c2      	ldr	r2, [r0, #28]
 8006b82:	b1e2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b84:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006b86:	b1d2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b88:	6882      	ldr	r2, [r0, #8]
 8006b8a:	b1c2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b8c:	68c2      	ldr	r2, [r0, #12]
 8006b8e:	b1b2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b90:	6902      	ldr	r2, [r0, #16]
 8006b92:	b1a2      	cbz	r2, 8006bbe <acc_integration_register+0x4e>
 8006b94:	b1cc      	cbz	r4, 8006bca <acc_integration_register+0x5a>
 8006b96:	6802      	ldr	r2, [r0, #0]
 8006b98:	2a20      	cmp	r2, #32
 8006b9a:	d811      	bhi.n	8006bc0 <acc_integration_register+0x50>
 8006b9c:	6842      	ldr	r2, [r0, #4]
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	2a0e      	cmp	r2, #14
 8006ba2:	d90d      	bls.n	8006bc0 <acc_integration_register+0x50>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ba8:	4d09      	ldr	r5, [pc, #36]	; (8006bd0 <acc_integration_register+0x60>)
 8006baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006bb4:	2401      	movs	r4, #1
 8006bb6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006bba:	4620      	mov	r0, r4
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	b124      	cbz	r4, 8006bca <acc_integration_register+0x5a>
 8006bc0:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <acc_integration_register+0x64>)
 8006bc2:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <acc_integration_register+0x68>)
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	47a0      	blx	r4
 8006bc8:	2400      	movs	r4, #0
 8006bca:	4620      	mov	r0, r4
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}
 8006bce:	bf00      	nop
 8006bd0:	200001a8 	.word	0x200001a8
 8006bd4:	08012ad8 	.word	0x08012ad8
 8006bd8:	08012aec 	.word	0x08012aec

08006bdc <acc_integration_unregister>:
 8006bdc:	2230      	movs	r2, #48	; 0x30
 8006bde:	2100      	movs	r1, #0
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <acc_integration_unregister+0xc>)
 8006be2:	f005 baed 	b.w	800c1c0 <memset>
 8006be6:	bf00      	nop
 8006be8:	200001a8 	.word	0x200001a8

08006bec <acc_integration_get_sensor_count>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <acc_integration_get_sensor_count+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200001a8 	.word	0x200001a8

08006bf8 <acc_integration_get_sensor_reference_frequency>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <acc_integration_get_sensor_reference_frequency+0x8>)
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	4718      	bx	r3
 8006bfe:	bf00      	nop
 8006c00:	200001a8 	.word	0x200001a8

08006c04 <acc_integration_get_max_spi_transfer_size>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <acc_integration_get_max_spi_transfer_size+0x8>)
 8006c06:	6858      	ldr	r0, [r3, #4]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200001a8 	.word	0x200001a8

08006c10 <acc_integration_sensor_device_power_on>:
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <acc_integration_sensor_device_power_on+0x8>)
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	4718      	bx	r3
 8006c16:	bf00      	nop
 8006c18:	200001a8 	.word	0x200001a8

08006c1c <acc_integration_sensor_device_power_off>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	; (8006c24 <acc_integration_sensor_device_power_off+0x8>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	4718      	bx	r3
 8006c22:	bf00      	nop
 8006c24:	200001a8 	.word	0x200001a8

08006c28 <acc_integration_wait_for_sensor_interrupt>:
 8006c28:	4b01      	ldr	r3, [pc, #4]	; (8006c30 <acc_integration_wait_for_sensor_interrupt+0x8>)
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4718      	bx	r3
 8006c2e:	bf00      	nop
 8006c30:	200001a8 	.word	0x200001a8

08006c34 <acc_integration_sensor_device_transfer>:
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <acc_integration_sensor_device_transfer+0x8>)
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	4718      	bx	r3
 8006c3a:	bf00      	nop
 8006c3c:	200001a8 	.word	0x200001a8

08006c40 <acc_integration_mem_alloc_debug>:
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <acc_integration_mem_alloc_debug+0x24>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	b410      	push	{r4}
 8006c46:	4604      	mov	r4, r0
 8006c48:	b92b      	cbnz	r3, 8006c56 <acc_integration_mem_alloc_debug+0x16>
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <acc_integration_mem_alloc_debug+0x28>)
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c54:	4718      	bx	r3
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f6      	beq.n	8006c4a <acc_integration_mem_alloc_debug+0xa>
 8006c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c60:	4718      	bx	r3
 8006c62:	bf00      	nop
 8006c64:	200001d8 	.word	0x200001d8
 8006c68:	200001a8 	.word	0x200001a8

08006c6c <acc_integration_mem_calloc_debug>:
 8006c6c:	b1e8      	cbz	r0, 8006caa <acc_integration_mem_calloc_debug+0x3e>
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	4615      	mov	r5, r2
 8006c72:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <acc_integration_mem_calloc_debug+0x40>)
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	fb01 f400 	mul.w	r4, r1, r0
 8006c7a:	b96a      	cbnz	r2, 8006c98 <acc_integration_mem_calloc_debug+0x2c>
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <acc_integration_mem_calloc_debug+0x44>)
 8006c7e:	4620      	mov	r0, r4
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	4798      	blx	r3
 8006c84:	4603      	mov	r3, r0
 8006c86:	b12b      	cbz	r3, 8006c94 <acc_integration_mem_calloc_debug+0x28>
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f005 fa97 	bl	800c1c0 <memset>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4618      	mov	r0, r3
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	6816      	ldr	r6, [r2, #0]
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	d0ee      	beq.n	8006c7c <acc_integration_mem_calloc_debug+0x10>
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	47b0      	blx	r6
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	e7ed      	b.n	8006c86 <acc_integration_mem_calloc_debug+0x1a>
 8006caa:	4770      	bx	lr
 8006cac:	200001d8 	.word	0x200001d8
 8006cb0:	200001a8 	.word	0x200001a8

08006cb4 <acc_integration_mem_free>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	; (8006cbc <acc_integration_mem_free+0x8>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4718      	bx	r3
 8006cba:	bf00      	nop
 8006cbc:	200001a8 	.word	0x200001a8

08006cc0 <acc_integration_log_level>:
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <acc_integration_log_level+0x8>)
 8006cc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	200001a8 	.word	0x200001a8

08006ccc <acc_integration_log>:
 8006ccc:	4b01      	ldr	r3, [pc, #4]	; (8006cd4 <acc_integration_log+0x8>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4718      	bx	r3
 8006cd2:	bf00      	nop
 8006cd4:	200001a8 	.word	0x200001a8

08006cd8 <acc_log_rss>:
 8006cd8:	b40c      	push	{r2, r3}
 8006cda:	b570      	push	{r4, r5, r6, lr}
 8006cdc:	b0a8      	sub	sp, #160	; 0xa0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	f7ff ffed 	bl	8006cc0 <acc_integration_log_level>
 8006ce6:	42a0      	cmp	r0, r4
 8006ce8:	d204      	bcs.n	8006cf4 <acc_log_rss+0x1c>
 8006cea:	b028      	add	sp, #160	; 0xa0
 8006cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cf0:	b002      	add	sp, #8
 8006cf2:	4770      	bx	lr
 8006cf4:	ae2d      	add	r6, sp, #180	; 0xb4
 8006cf6:	4633      	mov	r3, r6
 8006cf8:	a802      	add	r0, sp, #8
 8006cfa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8006cfc:	9601      	str	r6, [sp, #4]
 8006cfe:	2196      	movs	r1, #150	; 0x96
 8006d00:	f005 fe2a 	bl	800c958 <vsniprintf>
 8006d04:	2895      	cmp	r0, #149	; 0x95
 8006d06:	dd06      	ble.n	8006d16 <acc_log_rss+0x3e>
 8006d08:	f642 622e 	movw	r2, #11822	; 0x2e2e
 8006d0c:	232e      	movs	r3, #46	; 0x2e
 8006d0e:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
 8006d12:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 8006d16:	aa02      	add	r2, sp, #8
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f7ff ffd6 	bl	8006ccc <acc_integration_log>
 8006d20:	b028      	add	sp, #160	; 0xa0
 8006d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d26:	b002      	add	sp, #8
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop

08006d2c <acc_probes_execute>:
 8006d2c:	b180      	cbz	r0, 8006d50 <acc_probes_execute+0x24>
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	b410      	push	{r4}
 8006d32:	4c08      	ldr	r4, [pc, #32]	; (8006d54 <acc_probes_execute+0x28>)
 8006d34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d3c:	685c      	ldr	r4, [r3, #4]
 8006d3e:	b124      	cbz	r4, 8006d4a <acc_probes_execute+0x1e>
 8006d40:	46a4      	mov	ip, r4
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d48:	4760      	bx	ip
 8006d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	2000000c 	.word	0x2000000c

08006d58 <acc_probes_execute_uint16>:
 8006d58:	b530      	push	{r4, r5, lr}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	4c09      	ldr	r4, [pc, #36]	; (8006d84 <acc_probes_execute_uint16+0x2c>)
 8006d5e:	9001      	str	r0, [sp, #4]
 8006d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006d64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006d68:	2501      	movs	r5, #1
 8006d6a:	6844      	ldr	r4, [r0, #4]
 8006d6c:	9102      	str	r1, [sp, #8]
 8006d6e:	9503      	str	r5, [sp, #12]
 8006d70:	4611      	mov	r1, r2
 8006d72:	fa03 f205 	lsl.w	r2, r3, r5
 8006d76:	b114      	cbz	r4, 8006d7e <acc_probes_execute_uint16+0x26>
 8006d78:	6883      	ldr	r3, [r0, #8]
 8006d7a:	a801      	add	r0, sp, #4
 8006d7c:	47a0      	blx	r4
 8006d7e:	b005      	add	sp, #20
 8006d80:	bd30      	pop	{r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c

08006d88 <acc_probes_execute_primitive_probe>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <acc_probes_execute_primitive_probe+0x28>)
 8006d8e:	9001      	str	r0, [sp, #4]
 8006d90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006d94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	6844      	ldr	r4, [r0, #4]
 8006d9c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006da0:	b11c      	cbz	r4, 8006daa <acc_probes_execute_primitive_probe+0x22>
 8006da2:	6883      	ldr	r3, [r0, #8]
 8006da4:	4611      	mov	r1, r2
 8006da6:	a801      	add	r0, sp, #4
 8006da8:	47a0      	blx	r4
 8006daa:	b004      	add	sp, #16
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	2000000c 	.word	0x2000000c

08006db4 <acc_package_power_bins_engine_create>:
 8006db4:	f000 bf08 	b.w	8007bc8 <acc_radar_engine_linear_create>

08006db8 <acc_package_power_bins_pipeline_assemble>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	8960      	ldrh	r0, [r4, #10]
 8006dc2:	9203      	str	r2, [sp, #12]
 8006dc4:	9001      	str	r0, [sp, #4]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	a801      	add	r0, sp, #4
 8006dca:	7a23      	ldrb	r3, [r4, #8]
 8006dcc:	f88d 3008 	strb.w	r3, [sp, #8]
 8006dd0:	f000 fb2e 	bl	8007430 <acc_pipeline_power_bins_assemble>
 8006dd4:	b004      	add	sp, #16
 8006dd6:	bd10      	pop	{r4, pc}

08006dd8 <register_handle>:
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	6883      	ldr	r3, [r0, #8]
 8006ddc:	699c      	ldr	r4, [r3, #24]
 8006dde:	b083      	sub	sp, #12
 8006de0:	4605      	mov	r5, r0
 8006de2:	b104      	cbz	r4, 8006de6 <register_handle+0xe>
 8006de4:	6924      	ldr	r4, [r4, #16]
 8006de6:	686b      	ldr	r3, [r5, #4]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <register_handle+0x90>)
 8006dea:	9400      	str	r4, [sp, #0]
 8006dec:	491f      	ldr	r1, [pc, #124]	; (8006e6c <register_handle+0x94>)
 8006dee:	2004      	movs	r0, #4
 8006df0:	f7ff ff72 	bl	8006cd8 <acc_log_rss>
 8006df4:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <register_handle+0x98>)
 8006df6:	2300      	movs	r3, #0
 8006df8:	f852 1b04 	ldr.w	r1, [r2], #4
 8006dfc:	b119      	cbz	r1, 8006e06 <register_handle+0x2e>
 8006dfe:	3301      	adds	r3, #1
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d1f9      	bne.n	8006df8 <register_handle+0x20>
 8006e04:	2305      	movs	r3, #5
 8006e06:	2c20      	cmp	r4, #32
 8006e08:	d813      	bhi.n	8006e32 <register_handle+0x5a>
 8006e0a:	b944      	cbnz	r4, 8006e1e <register_handle+0x46>
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d019      	beq.n	8006e44 <register_handle+0x6c>
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <register_handle+0x9c>)
 8006e12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e16:	2001      	movs	r0, #1
 8006e18:	605d      	str	r5, [r3, #4]
 8006e1a:	b003      	add	sp, #12
 8006e1c:	bd30      	pop	{r4, r5, pc}
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <register_handle+0x9c>)
 8006e20:	3c01      	subs	r4, #1
 8006e22:	4414      	add	r4, r2
 8006e24:	7d21      	ldrb	r1, [r4, #20]
 8006e26:	b9b1      	cbnz	r1, 8006e56 <register_handle+0x7e>
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d00b      	beq.n	8006e44 <register_handle+0x6c>
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	7521      	strb	r1, [r4, #20]
 8006e30:	e7ef      	b.n	8006e12 <register_handle+0x3a>
 8006e32:	2320      	movs	r3, #32
 8006e34:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <register_handle+0xa0>)
 8006e36:	490d      	ldr	r1, [pc, #52]	; (8006e6c <register_handle+0x94>)
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f7ff ff4d 	bl	8006cd8 <acc_log_rss>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	b003      	add	sp, #12
 8006e42:	bd30      	pop	{r4, r5, pc}
 8006e44:	2304      	movs	r3, #4
 8006e46:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <register_handle+0xa4>)
 8006e48:	4908      	ldr	r1, [pc, #32]	; (8006e6c <register_handle+0x94>)
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f7ff ff44 	bl	8006cd8 <acc_log_rss>
 8006e50:	2000      	movs	r0, #0
 8006e52:	b003      	add	sp, #12
 8006e54:	bd30      	pop	{r4, r5, pc}
 8006e56:	4a0a      	ldr	r2, [pc, #40]	; (8006e80 <register_handle+0xa8>)
 8006e58:	4904      	ldr	r1, [pc, #16]	; (8006e6c <register_handle+0x94>)
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7ff ff3c 	bl	8006cd8 <acc_log_rss>
 8006e60:	2000      	movs	r0, #0
 8006e62:	b003      	add	sp, #12
 8006e64:	bd30      	pop	{r4, r5, pc}
 8006e66:	bf00      	nop
 8006e68:	08012c30 	.word	0x08012c30
 8006e6c:	08012c54 	.word	0x08012c54
 8006e70:	200000d0 	.word	0x200000d0
 8006e74:	200000cc 	.word	0x200000cc
 8006e78:	08012c64 	.word	0x08012c64
 8006e7c:	08012cc4 	.word	0x08012cc4
 8006e80:	08012c8c 	.word	0x08012c8c

08006e84 <service_data_timeout_get>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	4604      	mov	r4, r0
 8006e8a:	f7ff fc4b 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 8006e8e:	2801      	cmp	r0, #1
 8006e90:	d011      	beq.n	8006eb6 <service_data_timeout_get+0x32>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff fc50 	bl	8006738 <acc_base_configuration_update_rate_get>
 8006e98:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006ec4 <service_data_timeout_get+0x40>
 8006e9c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8006ec8 <service_data_timeout_get+0x44>
 8006ea0:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8006ea4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ea8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006eac:	edcd 7a01 	vstr	s15, [sp, #4]
 8006eb0:	9801      	ldr	r0, [sp, #4]
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006eba:	9301      	str	r3, [sp, #4]
 8006ebc:	9801      	ldr	r0, [sp, #4]
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	457a0000 	.word	0x457a0000
 8006ec8:	44fa0000 	.word	0x44fa0000

08006ecc <acc_service_factory_activate>:
 8006ecc:	4807      	ldr	r0, [pc, #28]	; (8006eec <acc_service_factory_activate+0x20>)
 8006ece:	7802      	ldrb	r2, [r0, #0]
 8006ed0:	b94a      	cbnz	r2, 8006ee6 <acc_service_factory_activate+0x1a>
 8006ed2:	f100 0313 	add.w	r3, r0, #19
 8006ed6:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8006eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ede:	428b      	cmp	r3, r1
 8006ee0:	d1fb      	bne.n	8006eda <acc_service_factory_activate+0xe>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	7003      	strb	r3, [r0, #0]
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	200000cc 	.word	0x200000cc

08006ef0 <acc_service_factory_deactivate>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	4d0e      	ldr	r5, [pc, #56]	; (8006f2c <acc_service_factory_deactivate+0x3c>)
 8006ef4:	782e      	ldrb	r6, [r5, #0]
 8006ef6:	b17e      	cbz	r6, 8006f18 <acc_service_factory_deactivate+0x28>
 8006ef8:	462c      	mov	r4, r5
 8006efa:	f105 0710 	add.w	r7, r5, #16
 8006efe:	2200      	movs	r2, #0
 8006f00:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8006f04:	b11b      	cbz	r3, 8006f0e <acc_service_factory_deactivate+0x1e>
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7fe f92a 	bl	8005160 <acc_service_destroy>
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	42bc      	cmp	r4, r7
 8006f10:	d1f6      	bne.n	8006f00 <acc_service_factory_deactivate+0x10>
 8006f12:	b912      	cbnz	r2, 8006f1a <acc_service_factory_deactivate+0x2a>
 8006f14:	2300      	movs	r3, #0
 8006f16:	702b      	strb	r3, [r5, #0]
 8006f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f1a:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <acc_service_factory_deactivate+0x40>)
 8006f1c:	4905      	ldr	r1, [pc, #20]	; (8006f34 <acc_service_factory_deactivate+0x44>)
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f7ff feda 	bl	8006cd8 <acc_log_rss>
 8006f24:	2300      	movs	r3, #0
 8006f26:	702b      	strb	r3, [r5, #0]
 8006f28:	e7f6      	b.n	8006f18 <acc_service_factory_deactivate+0x28>
 8006f2a:	bf00      	nop
 8006f2c:	200000cc 	.word	0x200000cc
 8006f30:	08012bbc 	.word	0x08012bbc
 8006f34:	08012c54 	.word	0x08012c54

08006f38 <acc_service_factory_destroy_service>:
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d031      	beq.n	8006fa0 <acc_service_factory_destroy_service+0x68>
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	6983      	ldr	r3, [r0, #24]
 8006f40:	b082      	sub	sp, #8
 8006f42:	4604      	mov	r4, r0
 8006f44:	b103      	cbz	r3, 8006f48 <acc_service_factory_destroy_service+0x10>
 8006f46:	4798      	blx	r3
 8006f48:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8006f4c:	6991      	ldr	r1, [r2, #24]
 8006f4e:	2600      	movs	r6, #0
 8006f50:	6096      	str	r6, [r2, #8]
 8006f52:	b331      	cbz	r1, 8006fa2 <acc_service_factory_destroy_service+0x6a>
 8006f54:	690d      	ldr	r5, [r1, #16]
 8006f56:	9500      	str	r5, [sp, #0]
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <acc_service_factory_destroy_service+0x7c>)
 8006f5a:	4917      	ldr	r1, [pc, #92]	; (8006fb8 <acc_service_factory_destroy_service+0x80>)
 8006f5c:	2004      	movs	r0, #4
 8006f5e:	f7ff febb 	bl	8006cd8 <acc_log_rss>
 8006f62:	b11d      	cbz	r5, 8006f6c <acc_service_factory_destroy_service+0x34>
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <acc_service_factory_destroy_service+0x84>)
 8006f66:	441d      	add	r5, r3
 8006f68:	7d2b      	ldrb	r3, [r5, #20]
 8006f6a:	bb0b      	cbnz	r3, 8006fb0 <acc_service_factory_destroy_service+0x78>
 8006f6c:	6860      	ldr	r0, [r4, #4]
 8006f6e:	4914      	ldr	r1, [pc, #80]	; (8006fc0 <acc_service_factory_destroy_service+0x88>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	f851 2b04 	ldr.w	r2, [r1], #4
 8006f76:	b112      	cbz	r2, 8006f7e <acc_service_factory_destroy_service+0x46>
 8006f78:	6852      	ldr	r2, [r2, #4]
 8006f7a:	4290      	cmp	r0, r2
 8006f7c:	d00a      	beq.n	8006f94 <acc_service_factory_destroy_service+0x5c>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d1f6      	bne.n	8006f72 <acc_service_factory_destroy_service+0x3a>
 8006f84:	2300      	movs	r3, #0
 8006f86:	4620      	mov	r0, r4
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	b002      	add	sp, #8
 8006f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f90:	f7ff be90 	b.w	8006cb4 <acc_integration_mem_free>
 8006f94:	4a0b      	ldr	r2, [pc, #44]	; (8006fc4 <acc_service_factory_destroy_service+0x8c>)
 8006f96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	e7f1      	b.n	8006f84 <acc_service_factory_destroy_service+0x4c>
 8006fa0:	4770      	bx	lr
 8006fa2:	9100      	str	r1, [sp, #0]
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <acc_service_factory_destroy_service+0x7c>)
 8006fa6:	4904      	ldr	r1, [pc, #16]	; (8006fb8 <acc_service_factory_destroy_service+0x80>)
 8006fa8:	2004      	movs	r0, #4
 8006faa:	f7ff fe95 	bl	8006cd8 <acc_log_rss>
 8006fae:	e7dd      	b.n	8006f6c <acc_service_factory_destroy_service+0x34>
 8006fb0:	752e      	strb	r6, [r5, #20]
 8006fb2:	e7db      	b.n	8006f6c <acc_service_factory_destroy_service+0x34>
 8006fb4:	08012c08 	.word	0x08012c08
 8006fb8:	08012c54 	.word	0x08012c54
 8006fbc:	200000cb 	.word	0x200000cb
 8006fc0:	200000d0 	.word	0x200000d0
 8006fc4:	200000cc 	.word	0x200000cc

08006fc8 <acc_service_factory_create_service>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	4605      	mov	r5, r0
 8006fcc:	f7fe f832 	bl	8005034 <acc_service_configuration_valid>
 8006fd0:	b160      	cbz	r0, 8006fec <acc_service_factory_create_service+0x24>
 8006fd2:	792b      	ldrb	r3, [r5, #4]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d803      	bhi.n	8006fe0 <acc_service_factory_create_service+0x18>
 8006fd8:	e8df f003 	tbb	[pc, r3]
 8006fdc:	0b9f784e 	.word	0x0b9f784e
 8006fe0:	4b6f      	ldr	r3, [pc, #444]	; (80071a0 <acc_service_factory_create_service+0x1d8>)
 8006fe2:	4a70      	ldr	r2, [pc, #448]	; (80071a4 <acc_service_factory_create_service+0x1dc>)
 8006fe4:	4970      	ldr	r1, [pc, #448]	; (80071a8 <acc_service_factory_create_service+0x1e0>)
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f7ff fe76 	bl	8006cd8 <acc_log_rss>
 8006fec:	2400      	movs	r4, #0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff2:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8006ff6:	4a6d      	ldr	r2, [pc, #436]	; (80071ac <acc_service_factory_create_service+0x1e4>)
 8006ff8:	21b0      	movs	r1, #176	; 0xb0
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f7ff fe36 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8007000:	4604      	mov	r4, r0
 8007002:	2800      	cmp	r0, #0
 8007004:	f000 80c0 	beq.w	8007188 <acc_service_factory_create_service+0x1c0>
 8007008:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800700c:	2278      	movs	r2, #120	; 0x78
 800700e:	4629      	mov	r1, r5
 8007010:	4630      	mov	r0, r6
 8007012:	f005 f8b1 	bl	800c178 <memcpy>
 8007016:	4a66      	ldr	r2, [pc, #408]	; (80071b0 <acc_service_factory_create_service+0x1e8>)
 8007018:	4966      	ldr	r1, [pc, #408]	; (80071b4 <acc_service_factory_create_service+0x1ec>)
 800701a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800701c:	e9c4 1300 	strd	r1, r3, [r4]
 8007020:	3301      	adds	r3, #1
 8007022:	bf08      	it	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	6353      	str	r3, [r2, #52]	; 0x34
 8007028:	2300      	movs	r3, #0
 800702a:	7363      	strb	r3, [r4, #13]
 800702c:	6223      	str	r3, [r4, #32]
 800702e:	4a62      	ldr	r2, [pc, #392]	; (80071b8 <acc_service_factory_create_service+0x1f0>)
 8007030:	4b62      	ldr	r3, [pc, #392]	; (80071bc <acc_service_factory_create_service+0x1f4>)
 8007032:	60a6      	str	r6, [r4, #8]
 8007034:	2703      	movs	r7, #3
 8007036:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800703a:	62e4      	str	r4, [r4, #44]	; 0x2c
 800703c:	f105 001c 	add.w	r0, r5, #28
 8007040:	e9c4 2305 	strd	r2, r3, [r4, #20]
 8007044:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 8007048:	63e1      	str	r1, [r4, #60]	; 0x3c
 800704a:	f7ff ff1b 	bl	8006e84 <service_data_timeout_get>
 800704e:	6120      	str	r0, [r4, #16]
 8007050:	4620      	mov	r0, r4
 8007052:	f7ff fec1 	bl	8006dd8 <register_handle>
 8007056:	4605      	mov	r5, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	f000 8084 	beq.w	8007166 <acc_service_factory_create_service+0x19e>
 800705e:	6963      	ldr	r3, [r4, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0c4      	beq.n	8006fee <acc_service_factory_create_service+0x26>
 8007064:	4620      	mov	r0, r4
 8007066:	4798      	blx	r3
 8007068:	4605      	mov	r5, r0
 800706a:	2800      	cmp	r0, #0
 800706c:	d1bf      	bne.n	8006fee <acc_service_factory_create_service+0x26>
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff ff62 	bl	8006f38 <acc_service_factory_destroy_service>
 8007074:	462c      	mov	r4, r5
 8007076:	e7ba      	b.n	8006fee <acc_service_factory_create_service+0x26>
 8007078:	23d8      	movs	r3, #216	; 0xd8
 800707a:	4a4c      	ldr	r2, [pc, #304]	; (80071ac <acc_service_factory_create_service+0x1e4>)
 800707c:	21b0      	movs	r1, #176	; 0xb0
 800707e:	2001      	movs	r0, #1
 8007080:	f7ff fdf4 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8007084:	4604      	mov	r4, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d072      	beq.n	8007170 <acc_service_factory_create_service+0x1a8>
 800708a:	f100 0624 	add.w	r6, r0, #36	; 0x24
 800708e:	227c      	movs	r2, #124	; 0x7c
 8007090:	4629      	mov	r1, r5
 8007092:	4630      	mov	r0, r6
 8007094:	f005 f870 	bl	800c178 <memcpy>
 8007098:	4a45      	ldr	r2, [pc, #276]	; (80071b0 <acc_service_factory_create_service+0x1e8>)
 800709a:	4946      	ldr	r1, [pc, #280]	; (80071b4 <acc_service_factory_create_service+0x1ec>)
 800709c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800709e:	e9c4 1300 	strd	r1, r3, [r4]
 80070a2:	3301      	adds	r3, #1
 80070a4:	bf08      	it	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	6353      	str	r3, [r2, #52]	; 0x34
 80070aa:	4945      	ldr	r1, [pc, #276]	; (80071c0 <acc_service_factory_create_service+0x1f8>)
 80070ac:	4a45      	ldr	r2, [pc, #276]	; (80071c4 <acc_service_factory_create_service+0x1fc>)
 80070ae:	60a6      	str	r6, [r4, #8]
 80070b0:	2300      	movs	r3, #0
 80070b2:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80070b6:	62e4      	str	r4, [r4, #44]	; 0x2c
 80070b8:	f105 001c 	add.w	r0, r5, #28
 80070bc:	7363      	strb	r3, [r4, #13]
 80070be:	6223      	str	r3, [r4, #32]
 80070c0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80070c4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80070c6:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80070ca:	e7be      	b.n	800704a <acc_service_factory_create_service+0x82>
 80070cc:	f240 1319 	movw	r3, #281	; 0x119
 80070d0:	4a36      	ldr	r2, [pc, #216]	; (80071ac <acc_service_factory_create_service+0x1e4>)
 80070d2:	21b4      	movs	r1, #180	; 0xb4
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7ff fdc9 	bl	8006c6c <acc_integration_mem_calloc_debug>
 80070da:	4604      	mov	r4, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d04d      	beq.n	800717c <acc_service_factory_create_service+0x1b4>
 80070e0:	f100 0624 	add.w	r6, r0, #36	; 0x24
 80070e4:	2280      	movs	r2, #128	; 0x80
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	f005 f845 	bl	800c178 <memcpy>
 80070ee:	4a30      	ldr	r2, [pc, #192]	; (80071b0 <acc_service_factory_create_service+0x1e8>)
 80070f0:	4930      	ldr	r1, [pc, #192]	; (80071b4 <acc_service_factory_create_service+0x1ec>)
 80070f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80070f4:	e9c4 1300 	strd	r1, r3, [r4]
 80070f8:	3301      	adds	r3, #1
 80070fa:	bf08      	it	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	6353      	str	r3, [r2, #52]	; 0x34
 8007100:	2300      	movs	r3, #0
 8007102:	7363      	strb	r3, [r4, #13]
 8007104:	6223      	str	r3, [r4, #32]
 8007106:	2701      	movs	r7, #1
 8007108:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800710c:	60a6      	str	r6, [r4, #8]
 800710e:	4a2e      	ldr	r2, [pc, #184]	; (80071c8 <acc_service_factory_create_service+0x200>)
 8007110:	62e4      	str	r4, [r4, #44]	; 0x2c
 8007112:	f105 001c 	add.w	r0, r5, #28
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <acc_service_factory_create_service+0x204>)
 8007118:	e792      	b.n	8007040 <acc_service_factory_create_service+0x78>
 800711a:	23f8      	movs	r3, #248	; 0xf8
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <acc_service_factory_create_service+0x1e4>)
 800711e:	21ac      	movs	r1, #172	; 0xac
 8007120:	2001      	movs	r0, #1
 8007122:	f7ff fda3 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8007126:	4604      	mov	r4, r0
 8007128:	2800      	cmp	r0, #0
 800712a:	d033      	beq.n	8007194 <acc_service_factory_create_service+0x1cc>
 800712c:	f100 0624 	add.w	r6, r0, #36	; 0x24
 8007130:	2278      	movs	r2, #120	; 0x78
 8007132:	4629      	mov	r1, r5
 8007134:	4630      	mov	r0, r6
 8007136:	f005 f81f 	bl	800c178 <memcpy>
 800713a:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <acc_service_factory_create_service+0x1e8>)
 800713c:	491d      	ldr	r1, [pc, #116]	; (80071b4 <acc_service_factory_create_service+0x1ec>)
 800713e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007140:	e9c4 1300 	strd	r1, r3, [r4]
 8007144:	3301      	adds	r3, #1
 8007146:	bf08      	it	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	6353      	str	r3, [r2, #52]	; 0x34
 800714c:	2300      	movs	r3, #0
 800714e:	7363      	strb	r3, [r4, #13]
 8007150:	6223      	str	r3, [r4, #32]
 8007152:	2702      	movs	r7, #2
 8007154:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8007158:	60a6      	str	r6, [r4, #8]
 800715a:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <acc_service_factory_create_service+0x208>)
 800715c:	62e4      	str	r4, [r4, #44]	; 0x2c
 800715e:	f105 001c 	add.w	r0, r5, #28
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <acc_service_factory_create_service+0x20c>)
 8007164:	e76c      	b.n	8007040 <acc_service_factory_create_service+0x78>
 8007166:	4620      	mov	r0, r4
 8007168:	f7ff fda4 	bl	8006cb4 <acc_integration_mem_free>
 800716c:	462c      	mov	r4, r5
 800716e:	e73e      	b.n	8006fee <acc_service_factory_create_service+0x26>
 8007170:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <acc_service_factory_create_service+0x210>)
 8007172:	4a1a      	ldr	r2, [pc, #104]	; (80071dc <acc_service_factory_create_service+0x214>)
 8007174:	490c      	ldr	r1, [pc, #48]	; (80071a8 <acc_service_factory_create_service+0x1e0>)
 8007176:	f7ff fdaf 	bl	8006cd8 <acc_log_rss>
 800717a:	e738      	b.n	8006fee <acc_service_factory_create_service+0x26>
 800717c:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <acc_service_factory_create_service+0x218>)
 800717e:	4a17      	ldr	r2, [pc, #92]	; (80071dc <acc_service_factory_create_service+0x214>)
 8007180:	4909      	ldr	r1, [pc, #36]	; (80071a8 <acc_service_factory_create_service+0x1e0>)
 8007182:	f7ff fda9 	bl	8006cd8 <acc_log_rss>
 8007186:	e732      	b.n	8006fee <acc_service_factory_create_service+0x26>
 8007188:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <acc_service_factory_create_service+0x21c>)
 800718a:	4a14      	ldr	r2, [pc, #80]	; (80071dc <acc_service_factory_create_service+0x214>)
 800718c:	4906      	ldr	r1, [pc, #24]	; (80071a8 <acc_service_factory_create_service+0x1e0>)
 800718e:	f7ff fda3 	bl	8006cd8 <acc_log_rss>
 8007192:	e72c      	b.n	8006fee <acc_service_factory_create_service+0x26>
 8007194:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <acc_service_factory_create_service+0x220>)
 8007196:	4a11      	ldr	r2, [pc, #68]	; (80071dc <acc_service_factory_create_service+0x214>)
 8007198:	4903      	ldr	r1, [pc, #12]	; (80071a8 <acc_service_factory_create_service+0x1e0>)
 800719a:	f7ff fd9d 	bl	8006cd8 <acc_log_rss>
 800719e:	e726      	b.n	8006fee <acc_service_factory_create_service+0x26>
 80071a0:	08012af8 	.word	0x08012af8
 80071a4:	08012b94 	.word	0x08012b94
 80071a8:	08012c54 	.word	0x08012c54
 80071ac:	08012b7c 	.word	0x08012b7c
 80071b0:	200000cc 	.word	0x200000cc
 80071b4:	acc09ee8 	.word	0xacc09ee8
 80071b8:	08007329 	.word	0x08007329
 80071bc:	080073d1 	.word	0x080073d1
 80071c0:	08008fd9 	.word	0x08008fd9
 80071c4:	08009089 	.word	0x08009089
 80071c8:	08007239 	.word	0x08007239
 80071cc:	080072f9 	.word	0x080072f9
 80071d0:	080053d1 	.word	0x080053d1
 80071d4:	080054a9 	.word	0x080054a9
 80071d8:	08012b1c 	.word	0x08012b1c
 80071dc:	0801214c 	.word	0x0801214c
 80071e0:	08012b50 	.word	0x08012b50
 80071e4:	08012b64 	.word	0x08012b64
 80071e8:	08012b34 	.word	0x08012b34

080071ec <sweep_session_send_data>:
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ee:	460c      	mov	r4, r1
 80071f0:	b089      	sub	sp, #36	; 0x24
 80071f2:	688d      	ldr	r5, [r1, #8]
 80071f4:	79a3      	ldrb	r3, [r4, #6]
 80071f6:	7909      	ldrb	r1, [r1, #4]
 80071f8:	f894 c005 	ldrb.w	ip, [r4, #5]
 80071fc:	6827      	ldr	r7, [r4, #0]
 80071fe:	9504      	str	r5, [sp, #16]
 8007200:	4606      	mov	r6, r0
 8007202:	200f      	movs	r0, #15
 8007204:	4615      	mov	r5, r2
 8007206:	f88d 100e 	strb.w	r1, [sp, #14]
 800720a:	f88d 300c 	strb.w	r3, [sp, #12]
 800720e:	a903      	add	r1, sp, #12
 8007210:	2307      	movs	r3, #7
 8007212:	9005      	str	r0, [sp, #20]
 8007214:	2208      	movs	r2, #8
 8007216:	a805      	add	r0, sp, #20
 8007218:	f88d c00d 	strb.w	ip, [sp, #13]
 800721c:	9307      	str	r3, [sp, #28]
 800721e:	9706      	str	r7, [sp, #24]
 8007220:	f7ff fd84 	bl	8006d2c <acc_probes_execute>
 8007224:	7963      	ldrb	r3, [r4, #5]
 8007226:	68e2      	ldr	r2, [r4, #12]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4631      	mov	r1, r6
 800722c:	ab03      	add	r3, sp, #12
 800722e:	4628      	mov	r0, r5
 8007230:	f7fd fec0 	bl	8004fb4 <acc_service_send_data>
 8007234:	b009      	add	sp, #36	; 0x24
 8007236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007238 <acc_service_iq_create>:
 8007238:	b530      	push	{r4, r5, lr}
 800723a:	4604      	mov	r4, r0
 800723c:	b089      	sub	sp, #36	; 0x24
 800723e:	3024      	adds	r0, #36	; 0x24
 8007240:	f7fd ff0e 	bl	8005060 <acc_service_configuration_check>
 8007244:	b918      	cbnz	r0, 800724e <acc_service_iq_create+0x16>
 8007246:	2500      	movs	r5, #0
 8007248:	4628      	mov	r0, r5
 800724a:	b009      	add	sp, #36	; 0x24
 800724c:	bd30      	pop	{r4, r5, pc}
 800724e:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8007252:	4628      	mov	r0, r5
 8007254:	f7ff fc4e 	bl	8006af4 <acc_base_configuration_check>
 8007258:	2800      	cmp	r0, #0
 800725a:	d0f4      	beq.n	8007246 <acc_service_iq_create+0xe>
 800725c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8007260:	1e5a      	subs	r2, r3, #1
 8007262:	2a01      	cmp	r2, #1
 8007264:	d907      	bls.n	8007276 <acc_service_iq_create+0x3e>
 8007266:	2b04      	cmp	r3, #4
 8007268:	d005      	beq.n	8007276 <acc_service_iq_create+0x3e>
 800726a:	4a20      	ldr	r2, [pc, #128]	; (80072ec <acc_service_iq_create+0xb4>)
 800726c:	4920      	ldr	r1, [pc, #128]	; (80072f0 <acc_service_iq_create+0xb8>)
 800726e:	2000      	movs	r0, #0
 8007270:	f7ff fd32 	bl	8006cd8 <acc_log_rss>
 8007274:	e7e7      	b.n	8007246 <acc_service_iq_create+0xe>
 8007276:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
 800727a:	eef4 7a67 	vcmp.f32	s15, s15
 800727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007282:	bf78      	it	vc
 8007284:	edc4 7a26 	vstrvc	s15, [r4, #152]	; 0x98
 8007288:	d622      	bvs.n	80072d0 <acc_service_iq_create+0x98>
 800728a:	4629      	mov	r1, r5
 800728c:	9400      	str	r4, [sp, #0]
 800728e:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <acc_service_iq_create+0xbc>)
 8007290:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8007294:	4620      	mov	r0, r4
 8007296:	f7fd fdf7 	bl	8004e88 <acc_service_create_sweep_session>
 800729a:	4605      	mov	r5, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	d0d2      	beq.n	8007246 <acc_service_iq_create+0xe>
 80072a0:	a903      	add	r1, sp, #12
 80072a2:	4620      	mov	r0, r4
 80072a4:	f7fd fdfe 	bl	8004ea4 <acc_service_get_configuration_output>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	9804      	ldr	r0, [sp, #16]
 80072ac:	9907      	ldr	r1, [sp, #28]
 80072ae:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80072b2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80072b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80072ba:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 80072be:	4628      	mov	r0, r5
 80072c0:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
 80072c4:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
 80072c8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80072cc:	b009      	add	sp, #36	; 0x24
 80072ce:	bd30      	pop	{r4, r5, pc}
 80072d0:	4628      	mov	r0, r5
 80072d2:	f7ff fb1b 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 80072d6:	ee07 0a10 	vmov	s14, r0
 80072da:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 80072de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072e6:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
 80072ea:	e7ce      	b.n	800728a <acc_service_iq_create+0x52>
 80072ec:	08012ce8 	.word	0x08012ce8
 80072f0:	08012d14 	.word	0x08012d14
 80072f4:	080071ed 	.word	0x080071ed

080072f8 <acc_service_iq_destroy>:
 80072f8:	f7fd bdd8 	b.w	8004eac <acc_service_destroy_sweep_session>

080072fc <sweep_session_send_data>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	794c      	ldrb	r4, [r1, #5]
 8007302:	f88d 400c 	strb.w	r4, [sp, #12]
 8007306:	460b      	mov	r3, r1
 8007308:	4615      	mov	r5, r2
 800730a:	68ca      	ldr	r2, [r1, #12]
 800730c:	9400      	str	r4, [sp, #0]
 800730e:	791e      	ldrb	r6, [r3, #4]
 8007310:	f88d 600d 	strb.w	r6, [sp, #13]
 8007314:	4601      	mov	r1, r0
 8007316:	4628      	mov	r0, r5
 8007318:	799d      	ldrb	r5, [r3, #6]
 800731a:	f88d 500e 	strb.w	r5, [sp, #14]
 800731e:	ab03      	add	r3, sp, #12
 8007320:	f7fd fe48 	bl	8004fb4 <acc_service_send_data>
 8007324:	b004      	add	sp, #16
 8007326:	bd70      	pop	{r4, r5, r6, pc}

08007328 <acc_service_sparse_create>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	b088      	sub	sp, #32
 800732e:	3024      	adds	r0, #36	; 0x24
 8007330:	f7fd fe96 	bl	8005060 <acc_service_configuration_check>
 8007334:	b918      	cbnz	r0, 800733e <acc_service_sparse_create+0x16>
 8007336:	2500      	movs	r5, #0
 8007338:	4628      	mov	r0, r5
 800733a:	b008      	add	sp, #32
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff fbd6 	bl	8006af4 <acc_base_configuration_check>
 8007348:	2800      	cmp	r0, #0
 800734a:	d0f4      	beq.n	8007336 <acc_service_sparse_create+0xe>
 800734c:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8007350:	b32d      	cbz	r5, 800739e <acc_service_sparse_create+0x76>
 8007352:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8007356:	2b01      	cmp	r3, #1
 8007358:	d027      	beq.n	80073aa <acc_service_sparse_create+0x82>
 800735a:	9400      	str	r4, [sp, #0]
 800735c:	4631      	mov	r1, r6
 800735e:	4b18      	ldr	r3, [pc, #96]	; (80073c0 <acc_service_sparse_create+0x98>)
 8007360:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8007364:	4620      	mov	r0, r4
 8007366:	f7fd fd8f 	bl	8004e88 <acc_service_create_sweep_session>
 800736a:	4605      	mov	r5, r0
 800736c:	2800      	cmp	r0, #0
 800736e:	d0e2      	beq.n	8007336 <acc_service_sparse_create+0xe>
 8007370:	a903      	add	r1, sp, #12
 8007372:	4620      	mov	r0, r4
 8007374:	f7fd fd96 	bl	8004ea4 <acc_service_get_configuration_output>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	9804      	ldr	r0, [sp, #16]
 800737c:	9906      	ldr	r1, [sp, #24]
 800737e:	9a07      	ldr	r2, [sp, #28]
 8007380:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8007384:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007388:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 800738c:	4628      	mov	r0, r5
 800738e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 8007392:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 8007396:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800739a:	b008      	add	sp, #32
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <acc_service_sparse_create+0x9c>)
 80073a0:	4909      	ldr	r1, [pc, #36]	; (80073c8 <acc_service_sparse_create+0xa0>)
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff fc98 	bl	8006cd8 <acc_log_rss>
 80073a8:	e7c6      	b.n	8007338 <acc_service_sparse_create+0x10>
 80073aa:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d9d3      	bls.n	800735a <acc_service_sparse_create+0x32>
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <acc_service_sparse_create+0xa4>)
 80073b4:	4904      	ldr	r1, [pc, #16]	; (80073c8 <acc_service_sparse_create+0xa0>)
 80073b6:	2000      	movs	r0, #0
 80073b8:	f7ff fc8e 	bl	8006cd8 <acc_log_rss>
 80073bc:	e7bb      	b.n	8007336 <acc_service_sparse_create+0xe>
 80073be:	bf00      	nop
 80073c0:	080072fd 	.word	0x080072fd
 80073c4:	08012d20 	.word	0x08012d20
 80073c8:	08012d9c 	.word	0x08012d9c
 80073cc:	08012d60 	.word	0x08012d60

080073d0 <acc_service_sparse_destroy>:
 80073d0:	f7fd bd6c 	b.w	8004eac <acc_service_destroy_sweep_session>

080073d4 <output_type>:
 80073d4:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop

080073dc <inject_data>:
 80073dc:	f002 b8b8 	b.w	8009550 <acc_element_source_adc_inject_data>

080073e0 <produce>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	4604      	mov	r4, r0
 80073e4:	f002 f856 	bl	8009494 <acc_element_source_adc_produce>
 80073e8:	b960      	cbnz	r0, 8007404 <produce+0x24>
 80073ea:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 80073ee:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
 80073f2:	60d8      	str	r0, [r3, #12]
 80073f4:	2101      	movs	r1, #1
 80073f6:	7198      	strb	r0, [r3, #6]
 80073f8:	7159      	strb	r1, [r3, #5]
 80073fa:	f504 709e 	add.w	r0, r4, #316	; 0x13c
 80073fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007402:	4710      	bx	r2
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop

08007408 <disassemble>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	6804      	ldr	r4, [r0, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b14c      	cbz	r4, 8007424 <disassemble+0x1c>
 8007410:	4620      	mov	r0, r4
 8007412:	f002 f831 	bl	8009478 <acc_element_source_adc_release>
 8007416:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
 800741a:	f7ff fc4b 	bl	8006cb4 <acc_integration_mem_free>
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff fc48 	bl	8006cb4 <acc_integration_mem_free>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800742a:	f7ff bc43 	b.w	8006cb4 <acc_integration_mem_free>
 800742e:	bf00      	nop

08007430 <acc_pipeline_power_bins_assemble>:
 8007430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	4607      	mov	r7, r0
 8007436:	460e      	mov	r6, r1
 8007438:	4691      	mov	r9, r2
 800743a:	4981      	ldr	r1, [pc, #516]	; (8007640 <acc_pipeline_power_bins_assemble+0x210>)
 800743c:	2295      	movs	r2, #149	; 0x95
 800743e:	2014      	movs	r0, #20
 8007440:	f7ff fbfe 	bl	8006c40 <acc_integration_mem_alloc_debug>
 8007444:	4605      	mov	r5, r0
 8007446:	2800      	cmp	r0, #0
 8007448:	f000 80ed 	beq.w	8007626 <acc_pipeline_power_bins_assemble+0x1f6>
 800744c:	23f2      	movs	r3, #242	; 0xf2
 800744e:	4a7c      	ldr	r2, [pc, #496]	; (8007640 <acc_pipeline_power_bins_assemble+0x210>)
 8007450:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007454:	2001      	movs	r0, #1
 8007456:	f7ff fc09 	bl	8006c6c <acc_integration_mem_calloc_debug>
 800745a:	4604      	mov	r4, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	f000 80e8 	beq.w	8007632 <acc_pipeline_power_bins_assemble+0x202>
 8007462:	4631      	mov	r1, r6
 8007464:	f500 72d0 	add.w	r2, r0, #416	; 0x1a0
 8007468:	f001 ffe6 	bl	8009438 <acc_element_source_adc_init>
 800746c:	4606      	mov	r6, r0
 800746e:	2800      	cmp	r0, #0
 8007470:	f000 80d0 	beq.w	8007614 <acc_pipeline_power_bins_assemble+0x1e4>
 8007474:	602c      	str	r4, [r5, #0]
 8007476:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8007644 <acc_pipeline_power_bins_assemble+0x214>
 800747a:	2104      	movs	r1, #4
 800747c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8007480:	f001 ff6a 	bl	8009358 <acc_element_saturation_check_init>
 8007484:	793b      	ldrb	r3, [r7, #4]
 8007486:	b143      	cbz	r3, 800749a <acc_pipeline_power_bins_assemble+0x6a>
 8007488:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800748c:	f8b4 21b4 	ldrh.w	r2, [r4, #436]	; 0x1b4
 8007490:	2104      	movs	r1, #4
 8007492:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8007496:	f001 fe7d 	bl	8009194 <acc_element_noise_level_normalization_init>
 800749a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
 800749e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 80074a2:	2104      	movs	r1, #4
 80074a4:	f001 fe1a 	bl	80090dc <acc_element_crop_init>
 80074a8:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	f001 fed5 	bl	800925c <acc_element_power_bins_init>
 80074b2:	2204      	movs	r2, #4
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	f504 709e 	add.w	r0, r4, #316	; 0x13c
 80074ba:	f001 ffab 	bl	8009414 <acc_element_sink_callback_init>
 80074be:	682c      	ldr	r4, [r5, #0]
 80074c0:	2004      	movs	r0, #4
 80074c2:	f8d4 61c8 	ldr.w	r6, [r4, #456]	; 0x1c8
 80074c6:	f002 f851 	bl	800956c <acc_element_sizeof>
 80074ca:	fb00 f606 	mul.w	r6, r0, r6
 80074ce:	2004      	movs	r0, #4
 80074d0:	f8d7 8000 	ldr.w	r8, [r7]
 80074d4:	f002 f84a 	bl	800956c <acc_element_sizeof>
 80074d8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80074dc:	fb00 6008 	mla	r0, r0, r8, r6
 80074e0:	4957      	ldr	r1, [pc, #348]	; (8007640 <acc_pipeline_power_bins_assemble+0x210>)
 80074e2:	f7ff fbad 	bl	8006c40 <acc_integration_mem_alloc_debug>
 80074e6:	4606      	mov	r6, r0
 80074e8:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d07c      	beq.n	80075ea <acc_pipeline_power_bins_assemble+0x1ba>
 80074f0:	2004      	movs	r0, #4
 80074f2:	f8d4 a1cc 	ldr.w	sl, [r4, #460]	; 0x1cc
 80074f6:	f002 f839 	bl	800956c <acc_element_sizeof>
 80074fa:	fb00 fa0a 	mul.w	sl, r0, sl
 80074fe:	2004      	movs	r0, #4
 8007500:	f8d4 81d0 	ldr.w	r8, [r4, #464]	; 0x1d0
 8007504:	f002 f832 	bl	800956c <acc_element_sizeof>
 8007508:	f504 72c9 	add.w	r2, r4, #402	; 0x192
 800750c:	f504 7cca 	add.w	ip, r4, #404	; 0x194
 8007510:	7939      	ldrb	r1, [r7, #4]
 8007512:	6322      	str	r2, [r4, #48]	; 0x30
 8007514:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 8007518:	f504 72c2 	add.w	r2, r4, #388	; 0x184
 800751c:	f504 7cc4 	add.w	ip, r4, #392	; 0x188
 8007520:	f504 73cc 	add.w	r3, r4, #408	; 0x198
 8007524:	fb00 a008 	mla	r0, r0, r8, sl
 8007528:	62a2      	str	r2, [r4, #40]	; 0x28
 800752a:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 800752e:	f504 72c6 	add.w	r2, r4, #396	; 0x18c
 8007532:	f504 7cc8 	add.w	ip, r4, #400	; 0x190
 8007536:	6166      	str	r6, [r4, #20]
 8007538:	4430      	add	r0, r6
 800753a:	6566      	str	r6, [r4, #84]	; 0x54
 800753c:	6263      	str	r3, [r4, #36]	; 0x24
 800753e:	66a3      	str	r3, [r4, #104]	; 0x68
 8007540:	6222      	str	r2, [r4, #32]
 8007542:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 8007546:	b119      	cbz	r1, 8007550 <acc_pipeline_power_bins_assemble+0x120>
 8007548:	e9c4 6625 	strd	r6, r6, [r4, #148]	; 0x94
 800754c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007550:	f8d5 8000 	ldr.w	r8, [r5]
 8007554:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
 8007558:	4456      	add	r6, sl
 800755a:	f108 0a44 	add.w	sl, r8, #68	; 0x44
 800755e:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
 8007562:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8007566:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800756a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 800756e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8007572:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
 8007576:	f8c4 2174 	str.w	r2, [r4, #372]	; 0x174
 800757a:	4651      	mov	r1, sl
 800757c:	4640      	mov	r0, r8
 800757e:	f002 f801 	bl	8009584 <acc_element_connect>
 8007582:	793b      	ldrb	r3, [r7, #4]
 8007584:	f108 06c4 	add.w	r6, r8, #196	; 0xc4
 8007588:	bb23      	cbnz	r3, 80075d4 <acc_pipeline_power_bins_assemble+0x1a4>
 800758a:	4650      	mov	r0, sl
 800758c:	4631      	mov	r1, r6
 800758e:	f001 fff9 	bl	8009584 <acc_element_connect>
 8007592:	f508 7480 	add.w	r4, r8, #256	; 0x100
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f001 fff3 	bl	8009584 <acc_element_connect>
 800759e:	4620      	mov	r0, r4
 80075a0:	f508 719e 	add.w	r1, r8, #316	; 0x13c
 80075a4:	f001 ffee 	bl	8009584 <acc_element_connect>
 80075a8:	6828      	ldr	r0, [r5, #0]
 80075aa:	f001 ff6f 	bl	800948c <acc_element_source_adc_validate>
 80075ae:	4604      	mov	r4, r0
 80075b0:	b338      	cbz	r0, 8007602 <acc_pipeline_power_bins_assemble+0x1d2>
 80075b2:	6828      	ldr	r0, [r5, #0]
 80075b4:	f001 ff66 	bl	8009484 <acc_element_source_adc_reset>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	4823      	ldr	r0, [pc, #140]	; (8007648 <acc_pipeline_power_bins_assemble+0x218>)
 80075bc:	f8c3 9178 	str.w	r9, [r3, #376]	; 0x178
 80075c0:	4922      	ldr	r1, [pc, #136]	; (800764c <acc_pipeline_power_bins_assemble+0x21c>)
 80075c2:	4a23      	ldr	r2, [pc, #140]	; (8007650 <acc_pipeline_power_bins_assemble+0x220>)
 80075c4:	4b23      	ldr	r3, [pc, #140]	; (8007654 <acc_pipeline_power_bins_assemble+0x224>)
 80075c6:	e9c5 0101 	strd	r0, r1, [r5, #4]
 80075ca:	e9c5 2303 	strd	r2, r3, [r5, #12]
 80075ce:	4628      	mov	r0, r5
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	f108 0484 	add.w	r4, r8, #132	; 0x84
 80075d8:	4650      	mov	r0, sl
 80075da:	4621      	mov	r1, r4
 80075dc:	f001 ffd2 	bl	8009584 <acc_element_connect>
 80075e0:	4631      	mov	r1, r6
 80075e2:	4620      	mov	r0, r4
 80075e4:	f001 ffce 	bl	8009584 <acc_element_connect>
 80075e8:	e7d3      	b.n	8007592 <acc_pipeline_power_bins_assemble+0x162>
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <acc_pipeline_power_bins_assemble+0x228>)
 80075ec:	4a1b      	ldr	r2, [pc, #108]	; (800765c <acc_pipeline_power_bins_assemble+0x22c>)
 80075ee:	491c      	ldr	r1, [pc, #112]	; (8007660 <acc_pipeline_power_bins_assemble+0x230>)
 80075f0:	f7ff fb72 	bl	8006cd8 <acc_log_rss>
 80075f4:	4628      	mov	r0, r5
 80075f6:	4635      	mov	r5, r6
 80075f8:	f7ff ff06 	bl	8007408 <disassemble>
 80075fc:	4628      	mov	r0, r5
 80075fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <acc_pipeline_power_bins_assemble+0x234>)
 8007604:	4916      	ldr	r1, [pc, #88]	; (8007660 <acc_pipeline_power_bins_assemble+0x230>)
 8007606:	f7ff fb67 	bl	8006cd8 <acc_log_rss>
 800760a:	4628      	mov	r0, r5
 800760c:	f7ff fefc 	bl	8007408 <disassemble>
 8007610:	4625      	mov	r5, r4
 8007612:	e7dc      	b.n	80075ce <acc_pipeline_power_bins_assemble+0x19e>
 8007614:	4620      	mov	r0, r4
 8007616:	f7ff fb4d 	bl	8006cb4 <acc_integration_mem_free>
 800761a:	602e      	str	r6, [r5, #0]
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff fb49 	bl	8006cb4 <acc_integration_mem_free>
 8007622:	2500      	movs	r5, #0
 8007624:	e7d3      	b.n	80075ce <acc_pipeline_power_bins_assemble+0x19e>
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <acc_pipeline_power_bins_assemble+0x238>)
 8007628:	4a0c      	ldr	r2, [pc, #48]	; (800765c <acc_pipeline_power_bins_assemble+0x22c>)
 800762a:	490d      	ldr	r1, [pc, #52]	; (8007660 <acc_pipeline_power_bins_assemble+0x230>)
 800762c:	f7ff fb54 	bl	8006cd8 <acc_log_rss>
 8007630:	e7cd      	b.n	80075ce <acc_pipeline_power_bins_assemble+0x19e>
 8007632:	4a0e      	ldr	r2, [pc, #56]	; (800766c <acc_pipeline_power_bins_assemble+0x23c>)
 8007634:	490a      	ldr	r1, [pc, #40]	; (8007660 <acc_pipeline_power_bins_assemble+0x230>)
 8007636:	f7ff fb4f 	bl	8006cd8 <acc_log_rss>
 800763a:	602c      	str	r4, [r5, #0]
 800763c:	e7ee      	b.n	800761c <acc_pipeline_power_bins_assemble+0x1ec>
 800763e:	bf00      	nop
 8007640:	08012de8 	.word	0x08012de8
 8007644:	00000000 	.word	0x00000000
 8007648:	080073e1 	.word	0x080073e1
 800764c:	080073dd 	.word	0x080073dd
 8007650:	080073d5 	.word	0x080073d5
 8007654:	08007409 	.word	0x08007409
 8007658:	08012dd0 	.word	0x08012dd0
 800765c:	0801214c 	.word	0x0801214c
 8007660:	08012e04 	.word	0x08012e04
 8007664:	08012e18 	.word	0x08012e18
 8007668:	08012dac 	.word	0x08012dac
 800766c:	08012150 	.word	0x08012150

08007670 <destroy>:
 8007670:	b510      	push	{r4, lr}
 8007672:	4604      	mov	r4, r0
 8007674:	6800      	ldr	r0, [r0, #0]
 8007676:	f7ff fb1d 	bl	8006cb4 <acc_integration_mem_free>
 800767a:	4620      	mov	r0, r4
 800767c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007680:	f7ff bb18 	b.w	8006cb4 <acc_integration_mem_free>

08007684 <measure_noise>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	f8d0 a0a8 	ldr.w	sl, [r0, #168]	; 0xa8
 800768c:	b0ae      	sub	sp, #184	; 0xb8
 800768e:	4604      	mov	r4, r0
 8007690:	2200      	movs	r2, #0
 8007692:	4650      	mov	r0, sl
 8007694:	460d      	mov	r5, r1
 8007696:	a901      	add	r1, sp, #4
 8007698:	f001 f9a2 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 800769c:	4621      	mov	r1, r4
 800769e:	22a8      	movs	r2, #168	; 0xa8
 80076a0:	a804      	add	r0, sp, #16
 80076a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076a6:	f004 fd67 	bl	800c178 <memcpy>
 80076aa:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 80076ac:	f8b4 80fc 	ldrh.w	r8, [r4, #252]	; 0xfc
 80076b0:	00bf      	lsls	r7, r7, #2
 80076b2:	1e7b      	subs	r3, r7, #1
 80076b4:	2202      	movs	r2, #2
 80076b6:	a904      	add	r1, sp, #16
 80076b8:	2400      	movs	r4, #0
 80076ba:	932a      	str	r3, [sp, #168]	; 0xa8
 80076bc:	4650      	mov	r0, sl
 80076be:	2301      	movs	r3, #1
 80076c0:	922b      	str	r2, [sp, #172]	; 0xac
 80076c2:	9318      	str	r3, [sp, #96]	; 0x60
 80076c4:	941d      	str	r4, [sp, #116]	; 0x74
 80076c6:	9417      	str	r4, [sp, #92]	; 0x5c
 80076c8:	f002 faee 	bl	8009ca8 <acc_cpd_linear_sweep_load_program>
 80076cc:	4650      	mov	r0, sl
 80076ce:	f002 fcf5 	bl	800a0bc <acc_cpd_linear_sweep_run_program>
 80076d2:	4650      	mov	r0, sl
 80076d4:	aa02      	add	r2, sp, #8
 80076d6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80076da:	f001 fa31 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 80076de:	4606      	mov	r6, r0
 80076e0:	b918      	cbnz	r0, 80076ea <measure_noise+0x66>
 80076e2:	4630      	mov	r0, r6
 80076e4:	b02e      	add	sp, #184	; 0xb8
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	217c      	movs	r1, #124	; 0x7c
 80076ec:	fbb1 f8f8 	udiv	r8, r1, r8
 80076f0:	fb07 f808 	mul.w	r8, r7, r8
 80076f4:	4641      	mov	r1, r8
 80076f6:	4650      	mov	r0, sl
 80076f8:	f002 fd24 	bl	800a144 <acc_cpd_linear_sweep_transfer_data>
 80076fc:	4650      	mov	r0, sl
 80076fe:	f644 6120 	movw	r1, #20000	; 0x4e20
 8007702:	f002 fd3f 	bl	800a184 <acc_cpd_linear_sweep_low_power_stop>
 8007706:	f1b8 0f0e 	cmp.w	r8, #14
 800770a:	f1a8 0c0e 	sub.w	ip, r8, #14
 800770e:	d921      	bls.n	8007754 <measure_noise+0xd0>
 8007710:	f109 071a 	add.w	r7, r9, #26
 8007714:	f1a9 0102 	sub.w	r1, r9, #2
 8007718:	4623      	mov	r3, r4
 800771a:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 800771e:	4638      	mov	r0, r7
 8007720:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8007724:	4281      	cmp	r1, r0
 8007726:	4413      	add	r3, r2
 8007728:	d1fa      	bne.n	8007720 <measure_noise+0x9c>
 800772a:	fbb3 f2fc 	udiv	r2, r3, ip
 800772e:	2400      	movs	r4, #0
 8007730:	b292      	uxth	r2, r2
 8007732:	f837 3f02 	ldrh.w	r3, [r7, #2]!
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfb8      	it	lt
 800773c:	425b      	neglt	r3, r3
 800773e:	42b8      	cmp	r0, r7
 8007740:	441c      	add	r4, r3
 8007742:	d1f6      	bne.n	8007732 <measure_noise+0xae>
 8007744:	fbb4 f4fc 	udiv	r4, r4, ip
 8007748:	b2a3      	uxth	r3, r4
 800774a:	4630      	mov	r0, r6
 800774c:	82ab      	strh	r3, [r5, #20]
 800774e:	b02e      	add	sp, #184	; 0xb8
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	4623      	mov	r3, r4
 8007756:	e7f8      	b.n	800774a <measure_noise+0xc6>

08007758 <calibrate>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	b094      	sub	sp, #80	; 0x50
 800775c:	460d      	mov	r5, r1
 800775e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8007762:	f7ff fa49 	bl	8006bf8 <acc_integration_get_sensor_reference_frequency>
 8007766:	a80e      	add	r0, sp, #56	; 0x38
 8007768:	a902      	add	r1, sp, #8
 800776a:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 800776e:	f002 fd0b 	bl	800a188 <acc_cpd_pll_divisors_calculate>
 8007772:	b918      	cbnz	r0, 800777c <calibrate+0x24>
 8007774:	2400      	movs	r4, #0
 8007776:	4620      	mov	r0, r4
 8007778:	b014      	add	sp, #80	; 0x50
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007780:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8007784:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007788:	910b      	str	r1, [sp, #44]	; 0x2c
 800778a:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 800778e:	a901      	add	r1, sp, #4
 8007790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8007794:	920c      	str	r2, [sp, #48]	; 0x30
 8007796:	a809      	add	r0, sp, #36	; 0x24
 8007798:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800779c:	f001 ff28 	bl	80095f0 <acc_cpd_cbank_calibration>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0e7      	beq.n	8007774 <calibrate+0x1c>
 80077a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80077a8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80077ac:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 80077b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80077b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b6:	9110      	str	r1, [sp, #64]	; 0x40
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	940e      	str	r4, [sp, #56]	; 0x38
 80077bc:	a80e      	add	r0, sp, #56	; 0x38
 80077be:	a905      	add	r1, sp, #20
 80077c0:	9611      	str	r6, [sp, #68]	; 0x44
 80077c2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 80077c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80077c8:	f001 ffe4 	bl	8009794 <acc_cpd_dll_calibration>
 80077cc:	4604      	mov	r4, r0
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0d0      	beq.n	8007774 <calibrate+0x1c>
 80077d2:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 80077d6:	9a01      	ldr	r2, [sp, #4]
 80077d8:	9907      	ldr	r1, [sp, #28]
 80077da:	80aa      	strh	r2, [r5, #4]
 80077dc:	80eb      	strh	r3, [r5, #6]
 80077de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80077e2:	8128      	strh	r0, [r5, #8]
 80077e4:	2304      	movs	r3, #4
 80077e6:	8169      	strh	r1, [r5, #10]
 80077e8:	81aa      	strh	r2, [r5, #12]
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	4a03      	ldr	r2, [pc, #12]	; (80077fc <calibrate+0xa4>)
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <calibrate+0xa8>)
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <calibrate+0xac>)
 80077f2:	2002      	movs	r0, #2
 80077f4:	f7ff fa70 	bl	8006cd8 <acc_log_rss>
 80077f8:	e7bd      	b.n	8007776 <calibrate+0x1e>
 80077fa:	bf00      	nop
 80077fc:	08012e90 	.word	0x08012e90
 8007800:	08012e58 	.word	0x08012e58
 8007804:	08012ec4 	.word	0x08012ec4

08007808 <set_calibration_context>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	680b      	ldr	r3, [r1, #0]
 800780c:	2b04      	cmp	r3, #4
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	d00a      	beq.n	8007828 <set_calibration_context+0x20>
 8007812:	2204      	movs	r2, #4
 8007814:	9200      	str	r2, [sp, #0]
 8007816:	4924      	ldr	r1, [pc, #144]	; (80078a8 <set_calibration_context+0xa0>)
 8007818:	4a24      	ldr	r2, [pc, #144]	; (80078ac <set_calibration_context+0xa4>)
 800781a:	2000      	movs	r0, #0
 800781c:	f7ff fa5c 	bl	8006cd8 <acc_log_rss>
 8007820:	2600      	movs	r6, #0
 8007822:	4630      	mov	r0, r6
 8007824:	b00c      	add	sp, #48	; 0x30
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	460d      	mov	r5, r1
 800782a:	4604      	mov	r4, r0
 800782c:	f7ff f9e4 	bl	8006bf8 <acc_integration_get_sensor_reference_frequency>
 8007830:	a806      	add	r0, sp, #24
 8007832:	a903      	add	r1, sp, #12
 8007834:	ed8d 0a06 	vstr	s0, [sp, #24]
 8007838:	f002 fca6 	bl	800a188 <acc_cpd_pll_divisors_calculate>
 800783c:	4606      	mov	r6, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d0ef      	beq.n	8007822 <set_calibration_context+0x1a>
 8007842:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007846:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800784a:	6062      	str	r2, [r4, #4]
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007852:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007856:	6022      	str	r2, [r4, #0]
 8007858:	88aa      	ldrh	r2, [r5, #4]
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	88eb      	ldrh	r3, [r5, #6]
 800785e:	6122      	str	r2, [r4, #16]
 8007860:	892a      	ldrh	r2, [r5, #8]
 8007862:	6163      	str	r3, [r4, #20]
 8007864:	896b      	ldrh	r3, [r5, #10]
 8007866:	61e3      	str	r3, [r4, #28]
 8007868:	61a2      	str	r2, [r4, #24]
 800786a:	a906      	add	r1, sp, #24
 800786c:	89a8      	ldrh	r0, [r5, #12]
 800786e:	f001 fe8b 	bl	8009588 <acc_cpd_area_calibration_calculate_area_settings>
 8007872:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8007876:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800787a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800787e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007882:	6220      	str	r0, [r4, #32]
 8007884:	6261      	str	r1, [r4, #36]	; 0x24
 8007886:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800788a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800788e:	62a2      	str	r2, [r4, #40]	; 0x28
 8007890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007892:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8007896:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800789a:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 800789e:	4630      	mov	r0, r6
 80078a0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 80078a4:	b00c      	add	sp, #48	; 0x30
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	08012ec4 	.word	0x08012ec4
 80078ac:	08012ee0 	.word	0x08012ee0

080078b0 <stop>:
 80078b0:	4603      	mov	r3, r0
 80078b2:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 80078b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80078ba:	b911      	cbnz	r1, 80078c2 <stop+0x12>
 80078bc:	4619      	mov	r1, r3
 80078be:	f002 bc61 	b.w	800a184 <acc_cpd_linear_sweep_low_power_stop>
 80078c2:	4619      	mov	r1, r3
 80078c4:	f002 bc5c 	b.w	800a180 <acc_cpd_linear_sweep_stop>

080078c8 <update_data>:
 80078c8:	b530      	push	{r4, r5, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	b083      	sub	sp, #12
 80078ce:	30ac      	adds	r0, #172	; 0xac
 80078d0:	f000 fdb8 	bl	8008444 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 80078d4:	b388      	cbz	r0, 800793a <update_data+0x72>
 80078d6:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 80078da:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80078de:	f002 fc51 	bl	800a184 <acc_cpd_linear_sweep_low_power_stop>
 80078e2:	4605      	mov	r5, r0
 80078e4:	b388      	cbz	r0, 800794a <update_data+0x82>
 80078e6:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 80078ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80078ee:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 80078f2:	1c51      	adds	r1, r2, #1
 80078f4:	fbb1 f2f3 	udiv	r2, r1, r3
 80078f8:	fb03 1212 	mls	r2, r3, r2, r1
 80078fc:	3b01      	subs	r3, #1
 80078fe:	429a      	cmp	r2, r3
 8007900:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8007904:	eb00 1502 	add.w	r5, r0, r2, lsl #4
 8007908:	d02d      	beq.n	8007966 <update_data+0x9e>
 800790a:	220f      	movs	r2, #15
 800790c:	2310      	movs	r3, #16
 800790e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8007912:	4669      	mov	r1, sp
 8007914:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8007918:	e9cd 2500 	strd	r2, r5, [sp]
 800791c:	f002 fbdc 	bl	800a0d8 <acc_cpd_linear_sweep_update_program>
 8007920:	4605      	mov	r5, r0
 8007922:	b1c8      	cbz	r0, 8007958 <update_data+0x90>
 8007924:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8007928:	f002 fbc8 	bl	800a0bc <acc_cpd_linear_sweep_run_program>
 800792c:	4605      	mov	r5, r0
 800792e:	b948      	cbnz	r0, 8007944 <update_data+0x7c>
 8007930:	4a10      	ldr	r2, [pc, #64]	; (8007974 <update_data+0xac>)
 8007932:	4911      	ldr	r1, [pc, #68]	; (8007978 <update_data+0xb0>)
 8007934:	f7ff f9d0 	bl	8006cd8 <acc_log_rss>
 8007938:	e004      	b.n	8007944 <update_data+0x7c>
 800793a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800793e:	f002 fc0d 	bl	800a15c <acc_cpd_linear_sweep_sensor_continue>
 8007942:	4605      	mov	r5, r0
 8007944:	4628      	mov	r0, r5
 8007946:	b003      	add	sp, #12
 8007948:	bd30      	pop	{r4, r5, pc}
 800794a:	4a0c      	ldr	r2, [pc, #48]	; (800797c <update_data+0xb4>)
 800794c:	490a      	ldr	r1, [pc, #40]	; (8007978 <update_data+0xb0>)
 800794e:	f7ff f9c3 	bl	8006cd8 <acc_log_rss>
 8007952:	4628      	mov	r0, r5
 8007954:	b003      	add	sp, #12
 8007956:	bd30      	pop	{r4, r5, pc}
 8007958:	4a09      	ldr	r2, [pc, #36]	; (8007980 <update_data+0xb8>)
 800795a:	4907      	ldr	r1, [pc, #28]	; (8007978 <update_data+0xb0>)
 800795c:	f7ff f9bc 	bl	8006cd8 <acc_log_rss>
 8007960:	4628      	mov	r0, r5
 8007962:	b003      	add	sp, #12
 8007964:	bd30      	pop	{r4, r5, pc}
 8007966:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800796a:	f013 030f 	ands.w	r3, r3, #15
 800796e:	d0cc      	beq.n	800790a <update_data+0x42>
 8007970:	1e5a      	subs	r2, r3, #1
 8007972:	e7cc      	b.n	800790e <update_data+0x46>
 8007974:	08012fcc 	.word	0x08012fcc
 8007978:	08012ec4 	.word	0x08012ec4
 800797c:	08012f88 	.word	0x08012f88
 8007980:	08012fa4 	.word	0x08012fa4

08007984 <transfer_data>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	f8d0 40f4 	ldr.w	r4, [r0, #244]	; 0xf4
 800798a:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
 800798e:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8007992:	237c      	movs	r3, #124	; 0x7c
 8007994:	fbb3 f3f2 	udiv	r3, r3, r2
 8007998:	fb04 f403 	mul.w	r4, r4, r3
 800799c:	4621      	mov	r1, r4
 800799e:	f002 fbd1 	bl	800a144 <acc_cpd_linear_sweep_transfer_data>
 80079a2:	b930      	cbnz	r0, 80079b2 <transfer_data+0x2e>
 80079a4:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <transfer_data+0x34>)
 80079a6:	4a05      	ldr	r2, [pc, #20]	; (80079bc <transfer_data+0x38>)
 80079a8:	4905      	ldr	r1, [pc, #20]	; (80079c0 <transfer_data+0x3c>)
 80079aa:	4605      	mov	r5, r0
 80079ac:	f7ff f994 	bl	8006cd8 <acc_log_rss>
 80079b0:	462c      	mov	r4, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	08012e64 	.word	0x08012e64
 80079bc:	08012f50 	.word	0x08012f50
 80079c0:	08012ec4 	.word	0x08012ec4

080079c4 <start>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4601      	mov	r1, r0
 80079c8:	4604      	mov	r4, r0
 80079ca:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 80079ce:	f002 f96b 	bl	8009ca8 <acc_cpd_linear_sweep_load_program>
 80079d2:	b128      	cbz	r0, 80079e0 <start+0x1c>
 80079d4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80079d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079dc:	f002 bb6e 	b.w	800a0bc <acc_cpd_linear_sweep_run_program>
 80079e0:	4605      	mov	r5, r0
 80079e2:	4a03      	ldr	r2, [pc, #12]	; (80079f0 <start+0x2c>)
 80079e4:	4903      	ldr	r1, [pc, #12]	; (80079f4 <start+0x30>)
 80079e6:	f7ff f977 	bl	8006cd8 <acc_log_rss>
 80079ea:	4628      	mov	r0, r5
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	08012f30 	.word	0x08012f30
 80079f4:	08012ec4 	.word	0x08012ec4

080079f8 <initialize>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4b71      	ldr	r3, [pc, #452]	; (8007bc4 <initialize+0x1cc>)
 80079fe:	460d      	mov	r5, r1
 8007a00:	b082      	sub	sp, #8
 8007a02:	4611      	mov	r1, r2
 8007a04:	4616      	mov	r6, r2
 8007a06:	4604      	mov	r4, r0
 8007a08:	ed93 0a00 	vldr	s0, [r3]
 8007a0c:	edd3 0a01 	vldr	s1, [r3, #4]
 8007a10:	4628      	mov	r0, r5
 8007a12:	2210      	movs	r2, #16
 8007a14:	f000 f954 	bl	8007cc0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range>
 8007a18:	4607      	mov	r7, r0
 8007a1a:	b918      	cbnz	r0, 8007a24 <initialize+0x2c>
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	b002      	add	sp, #8
 8007a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a26:	f8b4 00fc 	ldrh.w	r0, [r4, #252]	; 0xfc
 8007a2a:	f44f 7161 	mov.w	r1, #900	; 0x384
 8007a2e:	227c      	movs	r2, #124	; 0x7c
 8007a30:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 8007a34:	fbb2 f2f0 	udiv	r2, r2, r0
 8007a38:	fb03 f302 	mul.w	r3, r3, r2
 8007a3c:	82b1      	strh	r1, [r6, #20]
 8007a3e:	61b3      	str	r3, [r6, #24]
 8007a40:	4640      	mov	r0, r8
 8007a42:	2244      	movs	r2, #68	; 0x44
 8007a44:	4631      	mov	r1, r6
 8007a46:	f004 fb97 	bl	800c178 <memcpy>
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f000 fcfa 	bl	8008444 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8007a50:	b9e0      	cbnz	r0, 8007a8c <initialize+0x94>
 8007a52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a54:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 fcf9 	bl	8008450 <acc_radar_engine_common_get_timeout_us>
 8007a5e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7fe ff0c 	bl	8006880 <acc_base_configuration_sweep_type_debug_get>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	f000 80a6 	beq.w	8007bba <initialize+0x1c2>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	2300      	movs	r3, #0
 8007a72:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8007a76:	2300      	movs	r3, #0
 8007a78:	64a3      	str	r3, [r4, #72]	; 0x48
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f7fe fe52 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 8007a80:	2803      	cmp	r0, #3
 8007a82:	d813      	bhi.n	8007aac <initialize+0xb4>
 8007a84:	e8df f000 	tbb	[pc, r0]
 8007a88:	04877a81 	.word	0x04877a81
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	e7e1      	b.n	8007a54 <initialize+0x5c>
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7fe fe51 	bl	8006738 <acc_base_configuration_update_rate_get>
 8007a96:	4669      	mov	r1, sp
 8007a98:	a801      	add	r0, sp, #4
 8007a9a:	f000 fcf9 	bl	8008490 <acc_radar_engine_common_frequency_to_main_clk>
 8007a9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8007aa8:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7fe fd9f 	bl	80065f0 <acc_base_configuration_power_save_mode_get>
 8007ab2:	2803      	cmp	r0, #3
 8007ab4:	d806      	bhi.n	8007ac4 <initialize+0xcc>
 8007ab6:	e8df f000 	tbb	[pc, r0]
 8007aba:	5858      	.short	0x5858
 8007abc:	025c      	.short	0x025c
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f7fe fdab 	bl	8006620 <acc_base_configuration_tx_disable_get>
 8007aca:	f080 0001 	eor.w	r0, r0, #1
 8007ace:	b2c0      	uxtb	r0, r0
 8007ad0:	6660      	str	r0, [r4, #100]	; 0x64
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7fe fdc0 	bl	8006658 <acc_base_configuration_decrease_tx_emission_get>
 8007ad8:	f080 0001 	eor.w	r0, r0, #1
 8007adc:	2601      	movs	r6, #1
 8007ade:	b2c0      	uxtb	r0, r0
 8007ae0:	e9c4 061a 	strd	r0, r6, [r4, #104]	; 0x68
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7fe fdd3 	bl	8006690 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007aea:	3801      	subs	r0, #1
 8007aec:	6720      	str	r0, [r4, #112]	; 0x70
 8007aee:	4628      	mov	r0, r5
 8007af0:	f7fe fe56 	bl	80067a0 <acc_base_configuration_gain_get>
 8007af4:	6760      	str	r0, [r4, #116]	; 0x74
 8007af6:	4628      	mov	r0, r5
 8007af8:	f7fe fe6a 	bl	80067d0 <acc_base_configuration_integrator_get>
 8007afc:	67a0      	str	r0, [r4, #120]	; 0x78
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7fe fe96 	bl	8006830 <acc_base_configuration_integrator_ramp_up_get>
 8007b04:	3801      	subs	r0, #1
 8007b06:	67e0      	str	r0, [r4, #124]	; 0x7c
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7fe fe79 	bl	8006800 <acc_base_configuration_wg_duration_get>
 8007b0e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7fe fefa 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 8007b18:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f7fe fe27 	bl	8006770 <acc_base_configuration_sweep_average_get>
 8007b22:	42b0      	cmp	r0, r6
 8007b24:	bf96      	itet	ls
 8007b26:	2300      	movls	r3, #0
 8007b28:	3802      	subhi	r0, #2
 8007b2a:	f8c4 3084 	strls.w	r3, [r4, #132]	; 0x84
 8007b2e:	f04f 0100 	mov.w	r1, #0
 8007b32:	f04f 02bd 	mov.w	r2, #189	; 0xbd
 8007b36:	f04f 035d 	mov.w	r3, #93	; 0x5d
 8007b3a:	bf88      	it	hi
 8007b3c:	e9c4 6021 	strdhi	r6, r0, [r4, #132]	; 0x84
 8007b40:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
 8007b44:	4640      	mov	r0, r8
 8007b46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8007b4a:	f000 fc7b 	bl	8008444 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8007b4e:	bb90      	cbnz	r0, 8007bb6 <initialize+0x1be>
 8007b50:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8007b54:	3b01      	subs	r3, #1
 8007b56:	e9d4 2132 	ldrd	r2, r1, [r4, #200]	; 0xc8
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	e9c4 3126 	strd	r3, r1, [r4, #152]	; 0x98
 8007b60:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8007b64:	b002      	add	sp, #8
 8007b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8007b70:	e7a8      	b.n	8007ac4 <initialize+0xcc>
 8007b72:	2201      	movs	r2, #1
 8007b74:	2300      	movs	r3, #0
 8007b76:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 8007b7a:	e7a3      	b.n	8007ac4 <initialize+0xcc>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2201      	movs	r2, #1
 8007b80:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007b82:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8007b86:	6522      	str	r2, [r4, #80]	; 0x50
 8007b88:	e790      	b.n	8007aac <initialize+0xb4>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8007b90:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8007b94:	e78a      	b.n	8007aac <initialize+0xb4>
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7fe fdce 	bl	8006738 <acc_base_configuration_update_rate_get>
 8007b9c:	4669      	mov	r1, sp
 8007b9e:	a801      	add	r0, sp, #4
 8007ba0:	f000 fc76 	bl	8008490 <acc_radar_engine_common_frequency_to_main_clk>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	9a00      	ldr	r2, [sp, #0]
 8007ba8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007baa:	2100      	movs	r1, #0
 8007bac:	9b01      	ldr	r3, [sp, #4]
 8007bae:	65a3      	str	r3, [r4, #88]	; 0x58
 8007bb0:	e9c4 1214 	strd	r1, r2, [r4, #80]	; 0x50
 8007bb4:	e77a      	b.n	8007aac <initialize+0xb4>
 8007bb6:	230f      	movs	r3, #15
 8007bb8:	e7cd      	b.n	8007b56 <initialize+0x15e>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e9c4 0310 	strd	r0, r3, [r4, #64]	; 0x40
 8007bc0:	e759      	b.n	8007a76 <initialize+0x7e>
 8007bc2:	bf00      	nop
 8007bc4:	08012ed8 	.word	0x08012ed8

08007bc8 <acc_radar_engine_linear_create>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	f240 1209 	movw	r2, #265	; 0x109
 8007bce:	4606      	mov	r6, r0
 8007bd0:	491f      	ldr	r1, [pc, #124]	; (8007c50 <acc_radar_engine_linear_create+0x88>)
 8007bd2:	202c      	movs	r0, #44	; 0x2c
 8007bd4:	f7ff f834 	bl	8006c40 <acc_integration_mem_alloc_debug>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	b348      	cbz	r0, 8007c30 <acc_radar_engine_linear_create+0x68>
 8007bdc:	f240 1311 	movw	r3, #273	; 0x111
 8007be0:	4a1b      	ldr	r2, [pc, #108]	; (8007c50 <acc_radar_engine_linear_create+0x88>)
 8007be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007be6:	2001      	movs	r0, #1
 8007be8:	f7ff f840 	bl	8006c6c <acc_integration_mem_calloc_debug>
 8007bec:	4605      	mov	r5, r0
 8007bee:	6020      	str	r0, [r4, #0]
 8007bf0:	b320      	cbz	r0, 8007c3c <acc_radar_engine_linear_create+0x74>
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7fe fc94 	bl	8006520 <acc_base_configuration_sensor_get>
 8007bf8:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	4e14      	ldr	r6, [pc, #80]	; (8007c54 <acc_radar_engine_linear_create+0x8c>)
 8007c02:	f7fe fe83 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 8007c06:	4914      	ldr	r1, [pc, #80]	; (8007c58 <acc_radar_engine_linear_create+0x90>)
 8007c08:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <acc_radar_engine_linear_create+0x94>)
 8007c0a:	f8a5 00fc 	strh.w	r0, [r5, #252]	; 0xfc
 8007c0e:	4d14      	ldr	r5, [pc, #80]	; (8007c60 <acc_radar_engine_linear_create+0x98>)
 8007c10:	4814      	ldr	r0, [pc, #80]	; (8007c64 <acc_radar_engine_linear_create+0x9c>)
 8007c12:	60a1      	str	r1, [r4, #8]
 8007c14:	60e2      	str	r2, [r4, #12]
 8007c16:	4914      	ldr	r1, [pc, #80]	; (8007c68 <acc_radar_engine_linear_create+0xa0>)
 8007c18:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <acc_radar_engine_linear_create+0xa4>)
 8007c1a:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <acc_radar_engine_linear_create+0xa8>)
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	e9c4 5005 	strd	r5, r0, [r4, #20]
 8007c22:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <acc_radar_engine_linear_create+0xac>)
 8007c28:	6066      	str	r6, [r4, #4]
 8007c2a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <acc_radar_engine_linear_create+0xb0>)
 8007c32:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <acc_radar_engine_linear_create+0xb4>)
 8007c34:	4912      	ldr	r1, [pc, #72]	; (8007c80 <acc_radar_engine_linear_create+0xb8>)
 8007c36:	f7ff f84f 	bl	8006cd8 <acc_log_rss>
 8007c3a:	e7f7      	b.n	8007c2c <acc_radar_engine_linear_create+0x64>
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <acc_radar_engine_linear_create+0xb0>)
 8007c3e:	4a0f      	ldr	r2, [pc, #60]	; (8007c7c <acc_radar_engine_linear_create+0xb4>)
 8007c40:	490f      	ldr	r1, [pc, #60]	; (8007c80 <acc_radar_engine_linear_create+0xb8>)
 8007c42:	f7ff f849 	bl	8006cd8 <acc_log_rss>
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff f834 	bl	8006cb4 <acc_integration_mem_free>
 8007c4c:	462c      	mov	r4, r5
 8007c4e:	e7ed      	b.n	8007c2c <acc_radar_engine_linear_create+0x64>
 8007c50:	08012e74 	.word	0x08012e74
 8007c54:	080079f9 	.word	0x080079f9
 8007c58:	08007809 	.word	0x08007809
 8007c5c:	08007759 	.word	0x08007759
 8007c60:	080079c5 	.word	0x080079c5
 8007c64:	08007985 	.word	0x08007985
 8007c68:	080078c9 	.word	0x080078c9
 8007c6c:	080078b1 	.word	0x080078b1
 8007c70:	08007685 	.word	0x08007685
 8007c74:	08007671 	.word	0x08007671
 8007c78:	08012e38 	.word	0x08012e38
 8007c7c:	0801214c 	.word	0x0801214c
 8007c80:	08012ec4 	.word	0x08012ec4

08007c84 <get_dt>:
 8007c84:	b508      	push	{r3, lr}
 8007c86:	ed2d 8b02 	vpush	{d8}
 8007c8a:	f7fe ffb5 	bl	8006bf8 <acc_integration_get_sensor_reference_frequency>
 8007c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8007c92:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007cb8 <get_dt+0x34>
 8007c96:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8007c9a:	f005 fc5f 	bl	800d55c <roundf>
 8007c9e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8007ca2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ca6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007caa:	ecbd 8b02 	vpop	{d8}
 8007cae:	eddf 7a03 	vldr	s15, [pc, #12]	; 8007cbc <get_dt+0x38>
 8007cb2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007cb6:	bd08      	pop	{r3, pc}
 8007cb8:	4f1502f9 	.word	0x4f1502f9
 8007cbc:	42f80000 	.word	0x42f80000

08007cc0 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	ed2d 8b08 	vpush	{d8-d11}
 8007cc8:	b089      	sub	sp, #36	; 0x24
 8007cca:	460e      	mov	r6, r1
 8007ccc:	eeb0 ba40 	vmov.f32	s22, s0
 8007cd0:	eef0 8a60 	vmov.f32	s17, s1
 8007cd4:	4690      	mov	r8, r2
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	f7fe fdee 	bl	80068b8 <acc_base_configuration_use_point_range_get>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f040 8279 	bne.w	80081d4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x514>
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f7fe fc34 	bl	8006550 <acc_base_configuration_requested_start_get>
 8007ce8:	4638      	mov	r0, r7
 8007cea:	eeb0 8a40 	vmov.f32	s16, s0
 8007cee:	f7fe fc51 	bl	8006594 <acc_base_configuration_requested_length_get>
 8007cf2:	ee78 9a00 	vadd.f32	s19, s16, s0
 8007cf6:	f7ff ffc5 	bl	8007c84 <get_dt>
 8007cfa:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 8007cfe:	ee38 7a08 	vadd.f32	s14, s16, s16
 8007d02:	ee20 0a09 	vmul.f32	s0, s0, s18
 8007d06:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007d0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d12:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8007d16:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8007d1a:	bf54      	ite	pl
 8007d1c:	eeb0 7a4a 	vmovpl.f32	s14, s20
 8007d20:	eeb0 7a48 	vmovmi.f32	s14, s16
 8007d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d2c:	ee17 4a90 	vmov	r4, s15
 8007d30:	f7ff ffa8 	bl	8007c84 <get_dt>
 8007d34:	ee39 7aa9 	vadd.f32	s14, s19, s19
 8007d38:	ee20 0a09 	vmul.f32	s0, s0, s18
 8007d3c:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8007d40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	bf58      	it	pl
 8007d4a:	eeb0 8a4a 	vmovpl.f32	s16, s20
 8007d4e:	ee37 8a88 	vadd.f32	s16, s15, s16
 8007d52:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d56:	ee17 5a90 	vmov	r5, s15
 8007d5a:	f7ff ff93 	bl	8007c84 <get_dt>
 8007d5e:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8007d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d66:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8007d6a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8007d6e:	bf54      	ite	pl
 8007d70:	eef0 ba4a 	vmovpl.f32	s23, s20
 8007d74:	eef0 ba48 	vmovmi.f32	s23, s16
 8007d78:	eef0 9a40 	vmov.f32	s19, s0
 8007d7c:	f7ff ff82 	bl	8007c84 <get_dt>
 8007d80:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	4638      	mov	r0, r7
 8007d8a:	bf58      	it	pl
 8007d8c:	eeb0 8a4a 	vmovpl.f32	s16, s20
 8007d90:	eef0 aa40 	vmov.f32	s21, s0
 8007d94:	f7fe fdba 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 8007d98:	2801      	cmp	r0, #1
 8007d9a:	4681      	mov	r9, r0
 8007d9c:	d90b      	bls.n	8007db6 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xf6>
 8007d9e:	2802      	cmp	r0, #2
 8007da0:	f000 820f 	beq.w	80081c2 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x502>
 8007da4:	1b2a      	subs	r2, r5, r4
 8007da6:	fb92 f3f9 	sdiv	r3, r2, r9
 8007daa:	fb09 2913 	mls	r9, r9, r3, r2
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	f300 80cd 	bgt.w	8007f50 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x290>
 8007db6:	42a5      	cmp	r5, r4
 8007db8:	f2c0 80d4 	blt.w	8007f64 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2a4>
 8007dbc:	ed9f aa74 	vldr	s20, [pc, #464]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 8007dc0:	ee7b 7a0b 	vadd.f32	s15, s22, s22
 8007dc4:	ee69 9a8a 	vmul.f32	s19, s19, s20
 8007dc8:	ee87 9aa9 	vdiv.f32	s18, s15, s19
 8007dcc:	ee39 9a2b 	vadd.f32	s18, s18, s23
 8007dd0:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 8007dd4:	ee19 3a10 	vmov	r3, s18
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	f300 80df 	bgt.w	8007f9c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2dc>
 8007dde:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8007de2:	ee6a aa8a 	vmul.f32	s21, s21, s20
 8007de6:	ee88 0aaa 	vdiv.f32	s0, s17, s21
 8007dea:	ee30 8a08 	vadd.f32	s16, s0, s16
 8007dee:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8007df2:	ee18 3a10 	vmov	r3, s16
 8007df6:	429d      	cmp	r5, r3
 8007df8:	f300 81f9 	bgt.w	80081ee <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x52e>
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7fe fd85 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 8007e02:	4681      	mov	r9, r0
 8007e04:	f7ff ff3e 	bl	8007c84 <get_dt>
 8007e08:	fb94 f1f9 	sdiv	r1, r4, r9
 8007e0c:	0fe2      	lsrs	r2, r4, #31
 8007e0e:	485b      	ldr	r0, [pc, #364]	; (8007f7c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2bc>)
 8007e10:	eb02 0a04 	add.w	sl, r2, r4
 8007e14:	0feb      	lsrs	r3, r5, #31
 8007e16:	4696      	mov	lr, r2
 8007e18:	fb80 c20a 	smull	ip, r2, r0, sl
 8007e1c:	469c      	mov	ip, r3
 8007e1e:	18eb      	adds	r3, r5, r3
 8007e20:	eb02 0b0a 	add.w	fp, r2, sl
 8007e24:	ee07 9a90 	vmov	s15, r9
 8007e28:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8007e2c:	fb80 a003 	smull	sl, r0, r0, r3
 8007e30:	4418      	add	r0, r3
 8007e32:	17db      	asrs	r3, r3, #31
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8007e3c:	ebc2 12ab 	rsb	r2, r2, fp, asr #6
 8007e40:	eba2 020e 	sub.w	r2, r2, lr
 8007e44:	eba3 030c 	sub.w	r3, r3, ip
 8007e48:	fb09 4111 	mls	r1, r9, r1, r4
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e52:	4449      	add	r1, r9
 8007e54:	3301      	adds	r3, #1
 8007e56:	fb91 f0f9 	sdiv	r0, r1, r9
 8007e5a:	fb09 1110 	mls	r1, r9, r0, r1
 8007e5e:	e9c6 2308 	strd	r2, r3, [r6, #32]
 8007e62:	ed86 0a03 	vstr	s0, [r6, #12]
 8007e66:	61f1      	str	r1, [r6, #28]
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7fe fbc1 	bl	80065f0 <acc_base_configuration_power_save_mode_get>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7fe fc57 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 8007e76:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	f040 81b3 	bne.w	80081e6 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x526>
 8007e80:	4590      	cmp	r8, r2
 8007e82:	f0c0 82c7 	bcc.w	8008414 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x754>
 8007e86:	fa1f f088 	uxth.w	r0, r8
 8007e8a:	b293      	uxth	r3, r2
 8007e8c:	fbb2 f1f0 	udiv	r1, r2, r0
 8007e90:	fb00 2711 	mls	r7, r0, r1, r2
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	bf18      	it	ne
 8007e98:	3101      	addne	r1, #1
 8007e9a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8007e9e:	4290      	cmp	r0, r2
 8007ea0:	bf28      	it	cs
 8007ea2:	e9c6 220e 	strdcs	r2, r2, [r6, #56]	; 0x38
 8007ea6:	6371      	str	r1, [r6, #52]	; 0x34
 8007ea8:	bf38      	it	cc
 8007eaa:	e9c6 070e 	strdcc	r0, r7, [r6, #56]	; 0x38
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	fb93 f3f9 	sdiv	r3, r3, r9
 8007eb4:	62b3      	str	r3, [r6, #40]	; 0x28
 8007eb6:	237c      	movs	r3, #124	; 0x7c
 8007eb8:	fb93 f3f9 	sdiv	r3, r3, r9
 8007ebc:	6433      	str	r3, [r6, #64]	; 0x40
 8007ebe:	f7ff fee1 	bl	8007c84 <get_dt>
 8007ec2:	ee07 4a90 	vmov	s15, r4
 8007ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eca:	eddf 8a31 	vldr	s17, [pc, #196]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 8007ece:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007ed2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8007ed6:	ee20 0a28 	vmul.f32	s0, s0, s17
 8007eda:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007ede:	ed86 0a00 	vstr	s0, [r6]
 8007ee2:	f7ff fecf 	bl	8007c84 <get_dt>
 8007ee6:	ee07 5a90 	vmov	s15, r5
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2bc>)
 8007eec:	4824      	ldr	r0, [pc, #144]	; (8007f80 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c0>)
 8007eee:	ed96 7a00 	vldr	s14, [r6]
 8007ef2:	fb83 2304 	smull	r2, r3, r3, r4
 8007ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efa:	1919      	adds	r1, r3, r4
 8007efc:	17e3      	asrs	r3, r4, #31
 8007efe:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8007f02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007f06:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8007f0a:	ee20 0a28 	vmul.f32	s0, s0, s17
 8007f0e:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8007f12:	337c      	adds	r3, #124	; 0x7c
 8007f14:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007f18:	089a      	lsrs	r2, r3, #2
 8007f1a:	fba0 1202 	umull	r1, r2, r0, r2
 8007f1e:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007f22:	0892      	lsrs	r2, r2, #2
 8007f24:	1b2c      	subs	r4, r5, r4
 8007f26:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8007f2a:	fb94 f4f9 	sdiv	r4, r4, r9
 8007f2e:	2001      	movs	r0, #1
 8007f30:	3401      	adds	r4, #1
 8007f32:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8007f36:	ed86 0a02 	vstr	s0, [r6, #8]
 8007f3a:	fb93 f3f9 	sdiv	r3, r3, r9
 8007f3e:	6334      	str	r4, [r6, #48]	; 0x30
 8007f40:	ed86 7a01 	vstr	s14, [r6, #4]
 8007f44:	62f3      	str	r3, [r6, #44]	; 0x2c
 8007f46:	b009      	add	sp, #36	; 0x24
 8007f48:	ecbd 8b08 	vpop	{d8-d11}
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	4a0c      	ldr	r2, [pc, #48]	; (8007f84 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c4>)
 8007f52:	490d      	ldr	r1, [pc, #52]	; (8007f88 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c8>)
 8007f54:	2002      	movs	r0, #2
 8007f56:	eba5 0509 	sub.w	r5, r5, r9
 8007f5a:	f7fe febd 	bl	8006cd8 <acc_log_rss>
 8007f5e:	42a5      	cmp	r5, r4
 8007f60:	f6bf af2c 	bge.w	8007dbc <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xfc>
 8007f64:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2cc>)
 8007f66:	4908      	ldr	r1, [pc, #32]	; (8007f88 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2c8>)
 8007f68:	2000      	movs	r0, #0
 8007f6a:	f7fe feb5 	bl	8006cd8 <acc_log_rss>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	b009      	add	sp, #36	; 0x24
 8007f72:	ecbd 8b08 	vpop	{d8-d11}
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	bf00      	nop
 8007f7c:	84210843 	.word	0x84210843
 8007f80:	21084211 	.word	0x21084211
 8007f84:	08013050 	.word	0x08013050
 8007f88:	08013030 	.word	0x08013030
 8007f8c:	08013094 	.word	0x08013094
 8007f90:	4d8ef3c2 	.word	0x4d8ef3c2
 8007f94:	350637bd 	.word	0x350637bd
 8007f98:	49742400 	.word	0x49742400
 8007f9c:	f7ff fe72 	bl	8007c84 <get_dt>
 8007fa0:	ee07 4a90 	vmov	s15, r4
 8007fa4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8007fa8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8007fac:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007fb0:	ed5f aa09 	vldr	s21, [pc, #-36]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 8007fb4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8007fb8:	ee20 0a29 	vmul.f32	s0, s0, s19
 8007fbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc4:	bf4c      	ite	mi
 8007fc6:	272d      	movmi	r7, #45	; 0x2d
 8007fc8:	2720      	movpl	r7, #32
 8007fca:	f7ff fe5b 	bl	8007c84 <get_dt>
 8007fce:	ee28 8a80 	vmul.f32	s16, s17, s0
 8007fd2:	f7ff fe57 	bl	8007c84 <get_dt>
 8007fd6:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007fda:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8007fde:	ee20 aa0a 	vmul.f32	s20, s0, s20
 8007fe2:	ee28 8a29 	vmul.f32	s16, s16, s19
 8007fe6:	ee2a aa29 	vmul.f32	s20, s20, s19
 8007fea:	ed5f 7a16 	vldr	s15, [pc, #-88]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 8007fee:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8007ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff6:	bf48      	it	mi
 8007ff8:	eeb1 8a48 	vnegmi.f32	s16, s16
 8007ffc:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008000:	ed1f aa1d 	vldr	s20, [pc, #-116]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 8008004:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8008008:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800800c:	ee17 5a90 	vmov	r5, s15
 8008010:	f7ff fe38 	bl	8007c84 <get_dt>
 8008014:	ee28 8a80 	vmul.f32	s16, s17, s0
 8008018:	f7ff fe34 	bl	8007c84 <get_dt>
 800801c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8008020:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8008024:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8008028:	ee28 8a29 	vmul.f32	s16, s16, s19
 800802c:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008030:	ed5f 7a28 	vldr	s15, [pc, #-160]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 8008034:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	bf48      	it	mi
 800803e:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008042:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008046:	f7ff fe1d 	bl	8007c84 <get_dt>
 800804a:	ee68 9a80 	vmul.f32	s19, s17, s0
 800804e:	f7ff fe19 	bl	8007c84 <get_dt>
 8008052:	ee28 0a80 	vmul.f32	s0, s17, s0
 8008056:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 800805a:	ee20 0a2a 	vmul.f32	s0, s0, s21
 800805e:	ee69 9aaa 	vmul.f32	s19, s19, s21
 8008062:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8008066:	ee69 9a8a 	vmul.f32	s19, s19, s20
 800806a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800806e:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 8008072:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 8007f98 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d8>
 8008076:	ed1f aa3a 	vldr	s20, [pc, #-232]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	bf48      	it	mi
 8008080:	eef1 9a69 	vnegmi.f32	s19, s19
 8008084:	ee79 9a87 	vadd.f32	s19, s19, s14
 8008088:	eef8 8ac9 	vcvt.f32.s32	s17, s18
 800808c:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 8008090:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008094:	eef8 9a69 	vcvt.f32.u32	s19, s19
 8008098:	ee38 8a69 	vsub.f32	s16, s16, s19
 800809c:	ed5f 9a44 	vldr	s19, [pc, #-272]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 80080a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80080a4:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80080a8:	ee17 4a90 	vmov	r4, s15
 80080ac:	f7ff fdea 	bl	8007c84 <get_dt>
 80080b0:	ee28 0a80 	vmul.f32	s0, s17, s0
 80080b4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80080b8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80080bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	bf4c      	ite	mi
 80080c6:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 80080ca:	f04f 0820 	movpl.w	r8, #32
 80080ce:	f7ff fdd9 	bl	8007c84 <get_dt>
 80080d2:	ee28 8a80 	vmul.f32	s16, s17, s0
 80080d6:	f7ff fdd5 	bl	8007c84 <get_dt>
 80080da:	ee28 0a80 	vmul.f32	s0, s17, s0
 80080de:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80080e2:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80080e6:	ee28 8a09 	vmul.f32	s16, s16, s18
 80080ea:	ee20 0a09 	vmul.f32	s0, s0, s18
 80080ee:	ed5f 7a57 	vldr	s15, [pc, #-348]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 80080f2:	ed1f aa59 	vldr	s20, [pc, #-356]	; 8007f90 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d0>
 80080f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	bf48      	it	mi
 8008100:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008104:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008108:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800810c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8008110:	ee17 6a90 	vmov	r6, s15
 8008114:	f7ff fdb6 	bl	8007c84 <get_dt>
 8008118:	ee28 8a80 	vmul.f32	s16, s17, s0
 800811c:	f7ff fdb2 	bl	8007c84 <get_dt>
 8008120:	ee28 0a80 	vmul.f32	s0, s17, s0
 8008124:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008128:	ee20 0a29 	vmul.f32	s0, s0, s19
 800812c:	ee28 8a09 	vmul.f32	s16, s16, s18
 8008130:	ee20 0a09 	vmul.f32	s0, s0, s18
 8008134:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 8008138:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800813c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008140:	bf48      	it	mi
 8008142:	eeb1 8a48 	vnegmi.f32	s16, s16
 8008146:	ee38 8a27 	vadd.f32	s16, s16, s15
 800814a:	f7ff fd9b 	bl	8007c84 <get_dt>
 800814e:	ee28 9a80 	vmul.f32	s18, s17, s0
 8008152:	f7ff fd97 	bl	8007c84 <get_dt>
 8008156:	ee28 0a80 	vmul.f32	s0, s17, s0
 800815a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800815e:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8008162:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008166:	ee20 0a29 	vmul.f32	s0, s0, s19
 800816a:	ee29 9a29 	vmul.f32	s18, s18, s19
 800816e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008176:	ed1f 7a79 	vldr	s14, [pc, #-484]	; 8007f94 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d4>
 800817a:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 8007f98 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x2d8>
 800817e:	9603      	str	r6, [sp, #12]
 8008180:	bf48      	it	mi
 8008182:	eeb1 9a49 	vnegmi.f32	s18, s18
 8008186:	ee39 9a07 	vadd.f32	s18, s18, s14
 800818a:	2000      	movs	r0, #0
 800818c:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 8008190:	f8cd 8008 	str.w	r8, [sp, #8]
 8008194:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8008198:	9401      	str	r4, [sp, #4]
 800819a:	ee38 8a49 	vsub.f32	s16, s16, s18
 800819e:	9500      	str	r5, [sp, #0]
 80081a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80081a4:	463b      	mov	r3, r7
 80081a6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80081aa:	4a9e      	ldr	r2, [pc, #632]	; (8008424 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x764>)
 80081ac:	499e      	ldr	r1, [pc, #632]	; (8008428 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 80081ae:	ed8d 8a04 	vstr	s16, [sp, #16]
 80081b2:	f7fe fd91 	bl	8006cd8 <acc_log_rss>
 80081b6:	2000      	movs	r0, #0
 80081b8:	b009      	add	sp, #36	; 0x24
 80081ba:	ecbd 8b08 	vpop	{d8-d11}
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	07e3      	lsls	r3, r4, #31
 80081c4:	f53f adee 	bmi.w	8007da4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xe4>
 80081c8:	4a98      	ldr	r2, [pc, #608]	; (800842c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x76c>)
 80081ca:	4997      	ldr	r1, [pc, #604]	; (8008428 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 80081cc:	f7fe fd84 	bl	8006cd8 <acc_log_rss>
 80081d0:	3401      	adds	r4, #1
 80081d2:	e5e7      	b.n	8007da4 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0xe4>
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7fe fa91 	bl	80066fc <acc_base_configuration_point_start_get>
 80081da:	4604      	mov	r4, r0
 80081dc:	4638      	mov	r0, r7
 80081de:	f7fe fa97 	bl	8006710 <acc_base_configuration_point_length_get>
 80081e2:	1825      	adds	r5, r4, r0
 80081e4:	e5b9      	b.n	8007d5a <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x9a>
 80081e6:	2801      	cmp	r0, #1
 80081e8:	f47f ae4a 	bne.w	8007e80 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x1c0>
 80081ec:	e64b      	b.n	8007e86 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x1c6>
 80081ee:	f7ff fd49 	bl	8007c84 <get_dt>
 80081f2:	ee07 5a90 	vmov	s15, r5
 80081f6:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80081fa:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80081fe:	ee29 0a00 	vmul.f32	s0, s18, s0
 8008202:	eddf aa8b 	vldr	s21, [pc, #556]	; 8008430 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 8008206:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800820a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800820e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	bf4c      	ite	mi
 8008218:	272d      	movmi	r7, #45	; 0x2d
 800821a:	2720      	movpl	r7, #32
 800821c:	f7ff fd32 	bl	8007c84 <get_dt>
 8008220:	ee69 8a00 	vmul.f32	s17, s18, s0
 8008224:	f7ff fd2e 	bl	8007c84 <get_dt>
 8008228:	ee29 0a00 	vmul.f32	s0, s18, s0
 800822c:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8008230:	ee20 aa0a 	vmul.f32	s20, s0, s20
 8008234:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8008238:	ee2a aa29 	vmul.f32	s20, s20, s19
 800823c:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 8008240:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8008244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008248:	bf48      	it	mi
 800824a:	eef1 8a68 	vnegmi.f32	s17, s17
 800824e:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008252:	ed9f aa77 	vldr	s20, [pc, #476]	; 8008430 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 8008256:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800825a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800825e:	ee17 5a90 	vmov	r5, s15
 8008262:	f7ff fd0f 	bl	8007c84 <get_dt>
 8008266:	ee69 8a00 	vmul.f32	s17, s18, s0
 800826a:	f7ff fd0b 	bl	8007c84 <get_dt>
 800826e:	ee29 0a00 	vmul.f32	s0, s18, s0
 8008272:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8008276:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800827a:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800827e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008282:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 8008286:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828e:	bf48      	it	mi
 8008290:	eef1 8a68 	vnegmi.f32	s17, s17
 8008294:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8008298:	f7ff fcf4 	bl	8007c84 <get_dt>
 800829c:	ee69 9a00 	vmul.f32	s19, s18, s0
 80082a0:	f7ff fcf0 	bl	8007c84 <get_dt>
 80082a4:	ee29 0a00 	vmul.f32	s0, s18, s0
 80082a8:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 80082ac:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80082b0:	ee69 9aaa 	vmul.f32	s19, s19, s21
 80082b4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80082b8:	ee69 9a8a 	vmul.f32	s19, s19, s20
 80082bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082c0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 80082c4:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8008438 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x778>
 80082c8:	ed9f 9a59 	vldr	s18, [pc, #356]	; 8008430 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	bf48      	it	mi
 80082d2:	eef1 9a69 	vnegmi.f32	s19, s19
 80082d6:	ee79 9a87 	vadd.f32	s19, s19, s14
 80082da:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80082de:	eefc 9ae9 	vcvt.u32.f32	s19, s19
 80082e2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 80082e6:	eef8 9a69 	vcvt.f32.u32	s19, s19
 80082ea:	ee78 8ae9 	vsub.f32	s17, s17, s19
 80082ee:	eddf 9a50 	vldr	s19, [pc, #320]	; 8008430 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 80082f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80082f6:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 80082fa:	ee17 4a90 	vmov	r4, s15
 80082fe:	f7ff fcc1 	bl	8007c84 <get_dt>
 8008302:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008306:	ee20 0a09 	vmul.f32	s0, s0, s18
 800830a:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800830e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008316:	bf4c      	ite	mi
 8008318:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 800831c:	f04f 0820 	movpl.w	r8, #32
 8008320:	f7ff fcb0 	bl	8007c84 <get_dt>
 8008324:	ee68 8a00 	vmul.f32	s17, s16, s0
 8008328:	f7ff fcac 	bl	8007c84 <get_dt>
 800832c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008330:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008334:	ee20 0a09 	vmul.f32	s0, s0, s18
 8008338:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800833c:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8008340:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 8008344:	ed9f aa3a 	vldr	s20, [pc, #232]	; 8008430 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x770>
 8008348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	bf48      	it	mi
 8008352:	eef1 8a68 	vnegmi.f32	s17, s17
 8008356:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800835a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800835e:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8008362:	ee17 6a90 	vmov	r6, s15
 8008366:	f7ff fc8d 	bl	8007c84 <get_dt>
 800836a:	ee68 8a00 	vmul.f32	s17, s16, s0
 800836e:	f7ff fc89 	bl	8007c84 <get_dt>
 8008372:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008376:	ee68 8aa9 	vmul.f32	s17, s17, s19
 800837a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800837e:	ee68 8a89 	vmul.f32	s17, s17, s18
 8008382:	ee20 0a09 	vmul.f32	s0, s0, s18
 8008386:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 800838a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800838e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008392:	bf48      	it	mi
 8008394:	eef1 8a68 	vnegmi.f32	s17, s17
 8008398:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800839c:	f7ff fc72 	bl	8007c84 <get_dt>
 80083a0:	ee28 9a00 	vmul.f32	s18, s16, s0
 80083a4:	f7ff fc6e 	bl	8007c84 <get_dt>
 80083a8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80083ac:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80083b0:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80083b4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80083b8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80083bc:	ee29 9a29 	vmul.f32	s18, s18, s19
 80083c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008434 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x774>
 80083cc:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008438 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x778>
 80083d0:	9603      	str	r6, [sp, #12]
 80083d2:	bf48      	it	mi
 80083d4:	eeb1 9a49 	vnegmi.f32	s18, s18
 80083d8:	ee39 9a07 	vadd.f32	s18, s18, s14
 80083dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80083e0:	eebc 9ac9 	vcvt.u32.f32	s18, s18
 80083e4:	9401      	str	r4, [sp, #4]
 80083e6:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 80083ea:	9500      	str	r5, [sp, #0]
 80083ec:	ee78 8ac9 	vsub.f32	s17, s17, s18
 80083f0:	463b      	mov	r3, r7
 80083f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80083f6:	4a11      	ldr	r2, [pc, #68]	; (800843c <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x77c>)
 80083f8:	490b      	ldr	r1, [pc, #44]	; (8008428 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 80083fa:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 80083fe:	2000      	movs	r0, #0
 8008400:	edcd 8a04 	vstr	s17, [sp, #16]
 8008404:	f7fe fc68 	bl	8006cd8 <acc_log_rss>
 8008408:	2000      	movs	r0, #0
 800840a:	b009      	add	sp, #36	; 0x24
 800840c:	ecbd 8b08 	vpop	{d8-d11}
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	2000      	movs	r0, #0
 8008416:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x780>)
 8008418:	4903      	ldr	r1, [pc, #12]	; (8008428 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x768>)
 800841a:	f7fe fc5d 	bl	8006cd8 <acc_log_rss>
 800841e:	2000      	movs	r0, #0
 8008420:	e6ca      	b.n	80081b8 <acc_radar_engine_common_sweep_w_dly_initialize_metadata_range+0x4f8>
 8008422:	bf00      	nop
 8008424:	080130d4 	.word	0x080130d4
 8008428:	08013030 	.word	0x08013030
 800842c:	08012fec 	.word	0x08012fec
 8008430:	4d8ef3c2 	.word	0x4d8ef3c2
 8008434:	350637bd 	.word	0x350637bd
 8008438:	49742400 	.word	0x49742400
 800843c:	08013120 	.word	0x08013120
 8008440:	0801316c 	.word	0x0801316c

08008444 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8008444:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008446:	2801      	cmp	r0, #1
 8008448:	bf94      	ite	ls
 800844a:	2000      	movls	r0, #0
 800844c:	2001      	movhi	r0, #1
 800844e:	4770      	bx	lr

08008450 <acc_radar_engine_common_get_timeout_us>:
 8008450:	b510      	push	{r4, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	4604      	mov	r4, r0
 8008456:	f7fe f965 	bl	8006724 <acc_base_configuration_repetition_mode_get>
 800845a:	2801      	cmp	r0, #1
 800845c:	d00f      	beq.n	800847e <acc_radar_engine_common_get_timeout_us+0x2e>
 800845e:	4620      	mov	r0, r4
 8008460:	f7fe f96a 	bl	8006738 <acc_base_configuration_update_rate_get>
 8008464:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008488 <acc_radar_engine_common_get_timeout_us+0x38>
 8008468:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800846c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008470:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008474:	edcd 7a01 	vstr	s15, [sp, #4]
 8008478:	9801      	ldr	r0, [sp, #4]
 800847a:	b002      	add	sp, #8
 800847c:	bd10      	pop	{r4, pc}
 800847e:	4b03      	ldr	r3, [pc, #12]	; (800848c <acc_radar_engine_common_get_timeout_us+0x3c>)
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	9801      	ldr	r0, [sp, #4]
 8008484:	b002      	add	sp, #8
 8008486:	bd10      	pop	{r4, pc}
 8008488:	49f42400 	.word	0x49f42400
 800848c:	001e8480 	.word	0x001e8480

08008490 <acc_radar_engine_common_frequency_to_main_clk>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	ed2d 8b02 	vpush	{d8}
 8008496:	4604      	mov	r4, r0
 8008498:	eeb0 8a40 	vmov.f32	s16, s0
 800849c:	460d      	mov	r5, r1
 800849e:	f7fe fbab 	bl	8006bf8 <acc_integration_get_sensor_reference_frequency>
 80084a2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80084a6:	ecbd 8b02 	vpop	{d8}
 80084aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80084ae:	ee17 3a90 	vmov	r3, s15
 80084b2:	0c1a      	lsrs	r2, r3, #16
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	602a      	str	r2, [r5, #0]
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}

080084bc <internal_reg_read>:
 80084bc:	b530      	push	{r4, r5, lr}
 80084be:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 80084c2:	b083      	sub	sp, #12
 80084c4:	ba4b      	rev16	r3, r1
 80084c6:	4615      	mov	r5, r2
 80084c8:	2400      	movs	r4, #0
 80084ca:	2206      	movs	r2, #6
 80084cc:	4669      	mov	r1, sp
 80084ce:	f8ad 3000 	strh.w	r3, [sp]
 80084d2:	f8ad 4002 	strh.w	r4, [sp, #2]
 80084d6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80084da:	f7fe fbab 	bl	8006c34 <acc_integration_sensor_device_transfer>
 80084de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80084e2:	ba5b      	rev16	r3, r3
 80084e4:	802b      	strh	r3, [r5, #0]
 80084e6:	b003      	add	sp, #12
 80084e8:	bd30      	pop	{r4, r5, pc}
 80084ea:	bf00      	nop

080084ec <internal_buffer_processed_read>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	4682      	mov	sl, r0
 80084f2:	482e      	ldr	r0, [pc, #184]	; (80085ac <internal_buffer_processed_read+0xc0>)
 80084f4:	f10a 4480 	add.w	r4, sl, #1073741824	; 0x40000000
 80084f8:	b087      	sub	sp, #28
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8008500:	9202      	str	r2, [sp, #8]
 8008502:	3c01      	subs	r4, #1
 8008504:	461f      	mov	r7, r3
 8008506:	9403      	str	r4, [sp, #12]
 8008508:	460e      	mov	r6, r1
 800850a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800850e:	f7fe fb79 	bl	8006c04 <acc_integration_get_max_spi_transfer_size>
 8008512:	0843      	lsrs	r3, r0, #1
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	bf09      	itett	eq
 8008518:	1cfb      	addeq	r3, r7, #3
 800851a:	f1a3 0803 	subne.w	r8, r3, #3
 800851e:	9301      	streq	r3, [sp, #4]
 8008520:	46b8      	moveq	r8, r7
 8008522:	2f00      	cmp	r7, #0
 8008524:	d037      	beq.n	8008596 <internal_buffer_processed_read+0xaa>
 8008526:	2d00      	cmp	r5, #0
 8008528:	bf14      	ite	ne
 800852a:	f44f 49e0 	movne.w	r9, #28672	; 0x7000
 800852e:	f44f 4900 	moveq.w	r9, #32768	; 0x8000
 8008532:	fa0f f989 	sxth.w	r9, r9
 8008536:	4547      	cmp	r7, r8
 8008538:	bf88      	it	hi
 800853a:	9d01      	ldrhi	r5, [sp, #4]
 800853c:	ea49 0106 	orr.w	r1, r9, r6
 8008540:	f107 32ff 	add.w	r2, r7, #4294967295
 8008544:	bf98      	it	ls
 8008546:	1cfd      	addls	r5, r7, #3
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	ba49      	rev16	r1, r1
 800854e:	ba52      	rev16	r2, r2
 8008550:	80a3      	strh	r3, [r4, #4]
 8008552:	8021      	strh	r1, [r4, #0]
 8008554:	8062      	strh	r2, [r4, #2]
 8008556:	4621      	mov	r1, r4
 8008558:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800855c:	4650      	mov	r0, sl
 800855e:	bf94      	ite	ls
 8008560:	46bb      	movls	fp, r7
 8008562:	46c3      	movhi	fp, r8
 8008564:	f7fe fb66 	bl	8006c34 <acc_integration_sensor_device_transfer>
 8008568:	4620      	mov	r0, r4
 800856a:	4629      	mov	r1, r5
 800856c:	f000 fd02 	bl	8008f74 <acc_utils_swap16_array>
 8008570:	9804      	ldr	r0, [sp, #16]
 8008572:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8008576:	6020      	str	r0, [r4, #0]
 8008578:	80a2      	strh	r2, [r4, #4]
 800857a:	eb04 044b 	add.w	r4, r4, fp, lsl #1
 800857e:	1eeb      	subs	r3, r5, #3
 8008580:	f1c5 0503 	rsb	r5, r5, #3
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	88a2      	ldrh	r2, [r4, #4]
 8008588:	9004      	str	r0, [sp, #16]
 800858a:	441e      	add	r6, r3
 800858c:	197f      	adds	r7, r7, r5
 800858e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008592:	b2b6      	uxth	r6, r6
 8008594:	d1cf      	bne.n	8008536 <internal_buffer_processed_read+0x4a>
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <internal_buffer_processed_read+0xc0>)
 8008598:	9a03      	ldr	r2, [sp, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	3306      	adds	r3, #6
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	b007      	add	sp, #28
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	200001e0 	.word	0x200001e0

080085b0 <acc_sensor_activate>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800863c <acc_sensor_activate+0x8c>
 80085b8:	f899 7000 	ldrb.w	r7, [r9]
 80085bc:	b117      	cbz	r7, 80085c4 <acc_sensor_activate+0x14>
 80085be:	4638      	mov	r0, r7
 80085c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c4:	f7fe fb12 	bl	8006bec <acc_integration_get_sensor_count>
 80085c8:	f44f 728a 	mov.w	r2, #276	; 0x114
 80085cc:	0080      	lsls	r0, r0, #2
 80085ce:	4916      	ldr	r1, [pc, #88]	; (8008628 <acc_sensor_activate+0x78>)
 80085d0:	4d16      	ldr	r5, [pc, #88]	; (800862c <acc_sensor_activate+0x7c>)
 80085d2:	f7fe fb35 	bl	8006c40 <acc_integration_mem_alloc_debug>
 80085d6:	6028      	str	r0, [r5, #0]
 80085d8:	b1e0      	cbz	r0, 8008614 <acc_sensor_activate+0x64>
 80085da:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008628 <acc_sensor_activate+0x78>
 80085de:	463c      	mov	r4, r7
 80085e0:	e009      	b.n	80085f6 <acc_sensor_activate+0x46>
 80085e2:	682e      	ldr	r6, [r5, #0]
 80085e4:	f7fe fb2c 	bl	8006c40 <acc_integration_mem_alloc_debug>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80085ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085f2:	b17b      	cbz	r3, 8008614 <acc_sensor_activate+0x64>
 80085f4:	3401      	adds	r4, #1
 80085f6:	f7fe faf9 	bl	8006bec <acc_integration_get_sensor_count>
 80085fa:	42a0      	cmp	r0, r4
 80085fc:	f240 121f 	movw	r2, #287	; 0x11f
 8008600:	4641      	mov	r1, r8
 8008602:	f241 0006 	movw	r0, #4102	; 0x1006
 8008606:	d8ec      	bhi.n	80085e2 <acc_sensor_activate+0x32>
 8008608:	2701      	movs	r7, #1
 800860a:	f889 7000 	strb.w	r7, [r9]
 800860e:	4638      	mov	r0, r7
 8008610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008614:	4b06      	ldr	r3, [pc, #24]	; (8008630 <acc_sensor_activate+0x80>)
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <acc_sensor_activate+0x84>)
 8008618:	4907      	ldr	r1, [pc, #28]	; (8008638 <acc_sensor_activate+0x88>)
 800861a:	2000      	movs	r0, #0
 800861c:	f7fe fb5c 	bl	8006cd8 <acc_log_rss>
 8008620:	4638      	mov	r0, r7
 8008622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008626:	bf00      	nop
 8008628:	080131bc 	.word	0x080131bc
 800862c:	200001e0 	.word	0x200001e0
 8008630:	080131a8 	.word	0x080131a8
 8008634:	0801214c 	.word	0x0801214c
 8008638:	080131cc 	.word	0x080131cc
 800863c:	200001dc 	.word	0x200001dc

08008640 <acc_sensor_deactivate>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4e0b      	ldr	r6, [pc, #44]	; (8008670 <acc_sensor_deactivate+0x30>)
 8008644:	7833      	ldrb	r3, [r6, #0]
 8008646:	b18b      	cbz	r3, 800866c <acc_sensor_deactivate+0x2c>
 8008648:	4d0a      	ldr	r5, [pc, #40]	; (8008674 <acc_sensor_deactivate+0x34>)
 800864a:	2400      	movs	r4, #0
 800864c:	e005      	b.n	800865a <acc_sensor_deactivate+0x1a>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008654:	f7fe fb2e 	bl	8006cb4 <acc_integration_mem_free>
 8008658:	3401      	adds	r4, #1
 800865a:	f7fe fac7 	bl	8006bec <acc_integration_get_sensor_count>
 800865e:	42a0      	cmp	r0, r4
 8008660:	d8f5      	bhi.n	800864e <acc_sensor_deactivate+0xe>
 8008662:	6828      	ldr	r0, [r5, #0]
 8008664:	f7fe fb26 	bl	8006cb4 <acc_integration_mem_free>
 8008668:	2300      	movs	r3, #0
 800866a:	7033      	strb	r3, [r6, #0]
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	bf00      	nop
 8008670:	200001dc 	.word	0x200001dc
 8008674:	200001e0 	.word	0x200001e0

08008678 <acc_sensor_reg_read>:
 8008678:	f7ff bf20 	b.w	80084bc <internal_reg_read>

0800867c <acc_sensor_reg_write>:
 800867c:	b510      	push	{r4, lr}
 800867e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008682:	b082      	sub	sp, #8
 8008684:	ba4b      	rev16	r3, r1
 8008686:	ba54      	rev16	r4, r2
 8008688:	a901      	add	r1, sp, #4
 800868a:	2204      	movs	r2, #4
 800868c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008690:	f8ad 4006 	strh.w	r4, [sp, #6]
 8008694:	f7fe face 	bl	8006c34 <acc_integration_sensor_device_transfer>
 8008698:	b002      	add	sp, #8
 800869a:	bd10      	pop	{r4, pc}

0800869c <acc_sensor_reg_field_write>:
 800869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	4688      	mov	r8, r1
 80086a4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80086a8:	4619      	mov	r1, r3
 80086aa:	4617      	mov	r7, r2
 80086ac:	f10d 0202 	add.w	r2, sp, #2
 80086b0:	461d      	mov	r5, r3
 80086b2:	4606      	mov	r6, r0
 80086b4:	f7ff ff02 	bl	80084bc <internal_reg_read>
 80086b8:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80086bc:	fa04 f208 	lsl.w	r2, r4, r8
 80086c0:	4042      	eors	r2, r0
 80086c2:	403a      	ands	r2, r7
 80086c4:	4042      	eors	r2, r0
 80086c6:	ba54      	rev16	r4, r2
 80086c8:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 80086cc:	2204      	movs	r2, #4
 80086ce:	ba6d      	rev16	r5, r5
 80086d0:	4630      	mov	r0, r6
 80086d2:	eb0d 0102 	add.w	r1, sp, r2
 80086d6:	f8ad 5004 	strh.w	r5, [sp, #4]
 80086da:	f8ad 4006 	strh.w	r4, [sp, #6]
 80086de:	f7fe faa9 	bl	8006c34 <acc_integration_sensor_device_transfer>
 80086e2:	b002      	add	sp, #8
 80086e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086e8 <acc_sensor_conf_read>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	4698      	mov	r8, r3
 80086f2:	6038      	str	r0, [r7, #0]
 80086f4:	460d      	mov	r5, r1
 80086f6:	4691      	mov	r9, r2
 80086f8:	f7fe fa84 	bl	8006c04 <acc_integration_get_max_spi_transfer_size>
 80086fc:	0880      	lsrs	r0, r0, #2
 80086fe:	bf1a      	itte	ne
 8008700:	1e83      	subne	r3, r0, #2
 8008702:	607b      	strne	r3, [r7, #4]
 8008704:	f8c7 8004 	streq.w	r8, [r7, #4]
 8008708:	f1b8 0f00 	cmp.w	r8, #0
 800870c:	d02c      	beq.n	8008768 <acc_sensor_conf_read+0x80>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4543      	cmp	r3, r8
 8008712:	bf28      	it	cs
 8008714:	4643      	movcs	r3, r8
 8008716:	0059      	lsls	r1, r3, #1
 8008718:	1cca      	adds	r2, r1, #3
 800871a:	0052      	lsls	r2, r2, #1
 800871c:	f102 0008 	add.w	r0, r2, #8
 8008720:	f020 0007 	bic.w	r0, r0, #7
 8008724:	46eb      	mov	fp, sp
 8008726:	ebad 0d00 	sub.w	sp, sp, r0
 800872a:	466e      	mov	r6, sp
 800872c:	f445 4020 	orr.w	r0, r5, #40960	; 0xa000
 8008730:	3901      	subs	r1, #1
 8008732:	ba49      	rev16	r1, r1
 8008734:	ba40      	rev16	r0, r0
 8008736:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800873a:	8071      	strh	r1, [r6, #2]
 800873c:	8030      	strh	r0, [r6, #0]
 800873e:	4631      	mov	r1, r6
 8008740:	6838      	ldr	r0, [r7, #0]
 8008742:	461c      	mov	r4, r3
 8008744:	f7fe fa76 	bl	8006c34 <acc_integration_sensor_device_transfer>
 8008748:	1db1      	adds	r1, r6, #6
 800874a:	4652      	mov	r2, sl
 800874c:	4648      	mov	r0, r9
 800874e:	f003 fd13 	bl	800c178 <memcpy>
 8008752:	4648      	mov	r0, r9
 8008754:	4621      	mov	r1, r4
 8008756:	f000 fc17 	bl	8008f88 <acc_utils_swap32_array>
 800875a:	4425      	add	r5, r4
 800875c:	ebb8 0804 	subs.w	r8, r8, r4
 8008760:	44d1      	add	r9, sl
 8008762:	b2ad      	uxth	r5, r5
 8008764:	46dd      	mov	sp, fp
 8008766:	d1d2      	bne.n	800870e <acc_sensor_conf_read+0x26>
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008770 <acc_sensor_conf_write_32bit>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	4698      	mov	r8, r3
 800877a:	6038      	str	r0, [r7, #0]
 800877c:	468b      	mov	fp, r1
 800877e:	4692      	mov	sl, r2
 8008780:	f7fe fa40 	bl	8006c04 <acc_integration_get_max_spi_transfer_size>
 8008784:	0880      	lsrs	r0, r0, #2
 8008786:	bf1a      	itte	ne
 8008788:	f100 33ff 	addne.w	r3, r0, #4294967295
 800878c:	607b      	strne	r3, [r7, #4]
 800878e:	f8c7 8004 	streq.w	r8, [r7, #4]
 8008792:	f1b8 0f00 	cmp.w	r8, #0
 8008796:	d037      	beq.n	8008808 <acc_sensor_conf_write_32bit+0x98>
 8008798:	4653      	mov	r3, sl
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	f8c7 d00c 	str.w	sp, [r7, #12]
 80087a0:	4542      	cmp	r2, r8
 80087a2:	bf28      	it	cs
 80087a4:	4642      	movcs	r2, r8
 80087a6:	0095      	lsls	r5, r2, #2
 80087a8:	f105 010a 	add.w	r1, r5, #10
 80087ac:	f021 0107 	bic.w	r1, r1, #7
 80087b0:	ebad 0d01 	sub.w	sp, sp, r1
 80087b4:	46e9      	mov	r9, sp
 80087b6:	4614      	mov	r4, r2
 80087b8:	ebad 0d01 	sub.w	sp, sp, r1
 80087bc:	462a      	mov	r2, r5
 80087be:	4619      	mov	r1, r3
 80087c0:	4648      	mov	r0, r9
 80087c2:	60bb      	str	r3, [r7, #8]
 80087c4:	46ea      	mov	sl, sp
 80087c6:	f003 fcd7 	bl	800c178 <memcpy>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4648      	mov	r0, r9
 80087ce:	f000 fbdb 	bl	8008f88 <acc_utils_swap32_array>
 80087d2:	4650      	mov	r0, sl
 80087d4:	f44b 42a0 	orr.w	r2, fp, #20480	; 0x5000
 80087d8:	ba52      	rev16	r2, r2
 80087da:	462e      	mov	r6, r5
 80087dc:	f820 2b02 	strh.w	r2, [r0], #2
 80087e0:	4649      	mov	r1, r9
 80087e2:	462a      	mov	r2, r5
 80087e4:	3602      	adds	r6, #2
 80087e6:	f003 fcc7 	bl	800c178 <memcpy>
 80087ea:	4632      	mov	r2, r6
 80087ec:	4651      	mov	r1, sl
 80087ee:	6838      	ldr	r0, [r7, #0]
 80087f0:	f7fe fa20 	bl	8006c34 <acc_integration_sensor_device_transfer>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f8d7 d00c 	ldr.w	sp, [r7, #12]
 80087fa:	44a3      	add	fp, r4
 80087fc:	ebb8 0804 	subs.w	r8, r8, r4
 8008800:	442b      	add	r3, r5
 8008802:	fa1f fb8b 	uxth.w	fp, fp
 8008806:	d1c8      	bne.n	800879a <acc_sensor_conf_write_32bit+0x2a>
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008810 <acc_sensor_conf_write_8bit>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4681      	mov	r9, r0
 8008816:	481c      	ldr	r0, [pc, #112]	; (8008888 <acc_sensor_conf_write_8bit+0x78>)
 8008818:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 800881c:	3b01      	subs	r3, #1
 800881e:	6800      	ldr	r0, [r0, #0]
 8008820:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8008824:	b083      	sub	sp, #12
 8008826:	468b      	mov	fp, r1
 8008828:	4616      	mov	r6, r2
 800882a:	3404      	adds	r4, #4
 800882c:	f7fe f9ea 	bl	8006c04 <acc_integration_get_max_spi_transfer_size>
 8008830:	b340      	cbz	r0, 8008884 <acc_sensor_conf_write_8bit+0x74>
 8008832:	1e87      	subs	r7, r0, #2
 8008834:	f027 0703 	bic.w	r7, r7, #3
 8008838:	b30e      	cbz	r6, 800887e <acc_sensor_conf_write_8bit+0x6e>
 800883a:	1cbb      	adds	r3, r7, #2
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	42b7      	cmp	r7, r6
 8008840:	bf38      	it	cc
 8008842:	9d01      	ldrcc	r5, [sp, #4]
 8008844:	f44b 42a0 	orr.w	r2, fp, #20480	; 0x5000
 8008848:	bf28      	it	cs
 800884a:	1cb5      	addcs	r5, r6, #2
 800884c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8008850:	bf34      	ite	cc
 8008852:	46ba      	movcc	sl, r7
 8008854:	46b2      	movcs	sl, r6
 8008856:	7062      	strb	r2, [r4, #1]
 8008858:	7021      	strb	r1, [r4, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4621      	mov	r1, r4
 800885e:	4648      	mov	r0, r9
 8008860:	f7fe f9e8 	bl	8006c34 <acc_integration_sensor_device_transfer>
 8008864:	f1c5 0502 	rsb	r5, r5, #2
 8008868:	f8a4 8000 	strh.w	r8, [r4]
 800886c:	4454      	add	r4, sl
 800886e:	eb0b 0b9a 	add.w	fp, fp, sl, lsr #2
 8008872:	1976      	adds	r6, r6, r5
 8008874:	fa1f fb8b 	uxth.w	fp, fp
 8008878:	f8b4 8000 	ldrh.w	r8, [r4]
 800887c:	d1df      	bne.n	800883e <acc_sensor_conf_write_8bit+0x2e>
 800887e:	b003      	add	sp, #12
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	4637      	mov	r7, r6
 8008886:	e7d5      	b.n	8008834 <acc_sensor_conf_write_8bit+0x24>
 8008888:	200001e0 	.word	0x200001e0

0800888c <acc_sensor_buffer_processed_read>:
 800888c:	b510      	push	{r4, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	2400      	movs	r4, #0
 8008892:	9400      	str	r4, [sp, #0]
 8008894:	f7ff fe2a 	bl	80084ec <internal_buffer_processed_read>
 8008898:	b002      	add	sp, #8
 800889a:	bd10      	pop	{r4, pc}

0800889c <acc_sensor_get_communication_buffer>:
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <acc_sensor_get_communication_buffer+0x1c>)
 800889e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80088a2:	3801      	subs	r0, #1
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088aa:	3306      	adds	r3, #6
 80088ac:	600b      	str	r3, [r1, #0]
 80088ae:	b112      	cbz	r2, 80088b6 <acc_sensor_get_communication_buffer+0x1a>
 80088b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	4770      	bx	lr
 80088b8:	200001e0 	.word	0x200001e0

080088bc <acc_sensor_protocol_get_indication_header.part.0>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	460c      	mov	r4, r1
 80088c2:	f10d 020e 	add.w	r2, sp, #14
 80088c6:	2128      	movs	r1, #40	; 0x28
 80088c8:	4606      	mov	r6, r0
 80088ca:	f7ff fed5 	bl	8008678 <acc_sensor_reg_read>
 80088ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80088d2:	b2d3      	uxtb	r3, r2
 80088d4:	7023      	strb	r3, [r4, #0]
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	d846      	bhi.n	8008968 <acc_sensor_protocol_get_indication_header.part.0+0xac>
 80088da:	e8df f003 	tbb	[pc, r3]
 80088de:	0939      	.short	0x0939
 80088e0:	19060606 	.word	0x19060606
 80088e4:	06060622 	.word	0x06060622
 80088e8:	06          	.byte	0x06
 80088e9:	00          	.byte	0x00
 80088ea:	2001      	movs	r0, #1
 80088ec:	b004      	add	sp, #16
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	0a12      	lsrs	r2, r2, #8
 80088f2:	2a10      	cmp	r2, #16
 80088f4:	d807      	bhi.n	8008906 <acc_sensor_protocol_get_indication_header.part.0+0x4a>
 80088f6:	2001      	movs	r0, #1
 80088f8:	4b23      	ldr	r3, [pc, #140]	; (8008988 <acc_sensor_protocol_get_indication_header.part.0+0xcc>)
 80088fa:	fa00 f102 	lsl.w	r1, r0, r2
 80088fe:	400b      	ands	r3, r1
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d13e      	bne.n	8008984 <acc_sensor_protocol_get_indication_header.part.0+0xc8>
 8008906:	2321      	movs	r3, #33	; 0x21
 8008908:	2001      	movs	r0, #1
 800890a:	7063      	strb	r3, [r4, #1]
 800890c:	b004      	add	sp, #16
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	f3c2 2300 	ubfx	r3, r2, #8, #1
 8008914:	2001      	movs	r0, #1
 8008916:	f3c2 2240 	ubfx	r2, r2, #9, #1
 800891a:	7063      	strb	r3, [r4, #1]
 800891c:	70a2      	strb	r2, [r4, #2]
 800891e:	b004      	add	sp, #16
 8008920:	bd70      	pop	{r4, r5, r6, pc}
 8008922:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008926:	2b00      	cmp	r3, #0
 8008928:	f3c2 2100 	ubfx	r1, r2, #8, #1
 800892c:	f3c2 2340 	ubfx	r3, r2, #9, #1
 8008930:	bf14      	ite	ne
 8008932:	2001      	movne	r0, #1
 8008934:	2000      	moveq	r0, #0
 8008936:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 800893a:	70e0      	strb	r0, [r4, #3]
 800893c:	7061      	strb	r1, [r4, #1]
 800893e:	70a3      	strb	r3, [r4, #2]
 8008940:	7122      	strb	r2, [r4, #4]
 8008942:	d0d2      	beq.n	80088ea <acc_sensor_protocol_get_indication_header.part.0+0x2e>
 8008944:	200c      	movs	r0, #12
 8008946:	4631      	mov	r1, r6
 8008948:	f7fe fa1e 	bl	8006d88 <acc_probes_execute_primitive_probe>
 800894c:	2001      	movs	r0, #1
 800894e:	e7cd      	b.n	80088ec <acc_sensor_protocol_get_indication_header.part.0+0x30>
 8008950:	4633      	mov	r3, r6
 8008952:	4a0e      	ldr	r2, [pc, #56]	; (800898c <acc_sensor_protocol_get_indication_header.part.0+0xd0>)
 8008954:	490e      	ldr	r1, [pc, #56]	; (8008990 <acc_sensor_protocol_get_indication_header.part.0+0xd4>)
 8008956:	2000      	movs	r0, #0
 8008958:	f7fe f9be 	bl	8006cd8 <acc_log_rss>
 800895c:	4630      	mov	r0, r6
 800895e:	f001 ff31 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008962:	2000      	movs	r0, #0
 8008964:	b004      	add	sp, #16
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	2000      	movs	r0, #0
 800896a:	4605      	mov	r5, r0
 800896c:	4a09      	ldr	r2, [pc, #36]	; (8008994 <acc_sensor_protocol_get_indication_header.part.0+0xd8>)
 800896e:	4908      	ldr	r1, [pc, #32]	; (8008990 <acc_sensor_protocol_get_indication_header.part.0+0xd4>)
 8008970:	9600      	str	r6, [sp, #0]
 8008972:	f7fe f9b1 	bl	8006cd8 <acc_log_rss>
 8008976:	4630      	mov	r0, r6
 8008978:	7025      	strb	r5, [r4, #0]
 800897a:	f001 ff23 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 800897e:	4628      	mov	r0, r5
 8008980:	b004      	add	sp, #16
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	7062      	strb	r2, [r4, #1]
 8008986:	e7b1      	b.n	80088ec <acc_sensor_protocol_get_indication_header.part.0+0x30>
 8008988:	00010016 	.word	0x00010016
 800898c:	0801332c 	.word	0x0801332c
 8008990:	08013360 	.word	0x08013360
 8008994:	08013370 	.word	0x08013370

08008998 <acc_sensor_protocol_check_asic_id>:
 8008998:	b500      	push	{lr}
 800899a:	b083      	sub	sp, #12
 800899c:	aa02      	add	r2, sp, #8
 800899e:	2100      	movs	r1, #0
 80089a0:	f822 1d02 	strh.w	r1, [r2, #-2]!
 80089a4:	f7ff fe68 	bl	8008678 <acc_sensor_reg_read>
 80089a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80089ac:	f241 1312 	movw	r3, #4370	; 0x1112
 80089b0:	1ac0      	subs	r0, r0, r3
 80089b2:	fab0 f080 	clz	r0, r0
 80089b6:	0940      	lsrs	r0, r0, #5
 80089b8:	b003      	add	sp, #12
 80089ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80089be:	bf00      	nop

080089c0 <acc_sensor_protocol_is_sensor_running>:
 80089c0:	b500      	push	{lr}
 80089c2:	b083      	sub	sp, #12
 80089c4:	aa02      	add	r2, sp, #8
 80089c6:	2300      	movs	r3, #0
 80089c8:	f822 3d02 	strh.w	r3, [r2, #-2]!
 80089cc:	2111      	movs	r1, #17
 80089ce:	f7ff fe53 	bl	8008678 <acc_sensor_reg_read>
 80089d2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80089d6:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80089da:	b003      	add	sp, #12
 80089dc:	f85d fb04 	ldr.w	pc, [sp], #4

080089e0 <acc_sensor_protocol_get_communication_buffer>:
 80089e0:	f7ff bf5c 	b.w	800889c <acc_sensor_get_communication_buffer>

080089e4 <acc_sensor_protocol_load_program>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089ec:	429a      	cmp	r2, r3
 80089ee:	b086      	sub	sp, #24
 80089f0:	4616      	mov	r6, r2
 80089f2:	d840      	bhi.n	8008a76 <acc_sensor_protocol_load_program+0x92>
 80089f4:	ac06      	add	r4, sp, #24
 80089f6:	2300      	movs	r3, #0
 80089f8:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80089fc:	4688      	mov	r8, r1
 80089fe:	4622      	mov	r2, r4
 8008a00:	212a      	movs	r1, #42	; 0x2a
 8008a02:	4605      	mov	r5, r0
 8008a04:	f7ff fe38 	bl	8008678 <acc_sensor_reg_read>
 8008a08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008a0c:	065b      	lsls	r3, r3, #25
 8008a0e:	d43f      	bmi.n	8008a90 <acc_sensor_protocol_load_program+0xac>
 8008a10:	4622      	mov	r2, r4
 8008a12:	2111      	movs	r1, #17
 8008a14:	2400      	movs	r4, #0
 8008a16:	4628      	mov	r0, r5
 8008a18:	f8ad 4016 	strh.w	r4, [sp, #22]
 8008a1c:	f7ff fe2c 	bl	8008678 <acc_sensor_reg_read>
 8008a20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008a24:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
 8008a28:	d117      	bne.n	8008a5a <acc_sensor_protocol_load_program+0x76>
 8008a2a:	2401      	movs	r4, #1
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4628      	mov	r0, r5
 8008a32:	f7ff feed 	bl	8008810 <acc_sensor_conf_write_8bit>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	9400      	str	r4, [sp, #0]
 8008a3c:	2380      	movs	r3, #128	; 0x80
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f7ff fe2c 	bl	800869c <acc_sensor_reg_field_write>
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	4628      	mov	r0, r5
 8008a48:	9700      	str	r7, [sp, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	2107      	movs	r1, #7
 8008a4e:	f7ff fe25 	bl	800869c <acc_sensor_reg_field_write>
 8008a52:	4620      	mov	r0, r4
 8008a54:	b006      	add	sp, #24
 8008a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <acc_sensor_protocol_load_program+0xc0>)
 8008a5c:	4a12      	ldr	r2, [pc, #72]	; (8008aa8 <acc_sensor_protocol_load_program+0xc4>)
 8008a5e:	4913      	ldr	r1, [pc, #76]	; (8008aac <acc_sensor_protocol_load_program+0xc8>)
 8008a60:	9500      	str	r5, [sp, #0]
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7fe f938 	bl	8006cd8 <acc_log_rss>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f001 feab 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008a6e:	4620      	mov	r0, r4
 8008a70:	b006      	add	sp, #24
 8008a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a76:	2400      	movs	r4, #0
 8008a78:	e9cd 2400 	strd	r2, r4, [sp]
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <acc_sensor_protocol_load_program+0xcc>)
 8008a82:	490a      	ldr	r1, [pc, #40]	; (8008aac <acc_sensor_protocol_load_program+0xc8>)
 8008a84:	f7fe f928 	bl	8006cd8 <acc_log_rss>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	b006      	add	sp, #24
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a90:	462b      	mov	r3, r5
 8008a92:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <acc_sensor_protocol_load_program+0xd0>)
 8008a94:	4905      	ldr	r1, [pc, #20]	; (8008aac <acc_sensor_protocol_load_program+0xc8>)
 8008a96:	2001      	movs	r0, #1
 8008a98:	f7fe f91e 	bl	8006cd8 <acc_log_rss>
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f001 fe91 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008aa2:	e7b5      	b.n	8008a10 <acc_sensor_protocol_load_program+0x2c>
 8008aa4:	08013258 	.word	0x08013258
 8008aa8:	0801343c 	.word	0x0801343c
 8008aac:	08013360 	.word	0x08013360
 8008ab0:	080133cc 	.word	0x080133cc
 8008ab4:	0801340c 	.word	0x0801340c

08008ab8 <acc_sensor_protocol_clear_resources>:
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2174      	movs	r1, #116	; 0x74
 8008abc:	f7ff bdde 	b.w	800867c <acc_sensor_reg_write>

08008ac0 <acc_sensor_protocol_run_program>:
 8008ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	aa04      	add	r2, sp, #16
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	f822 5d02 	strh.w	r5, [r2, #-2]!
 8008acc:	460e      	mov	r6, r1
 8008ace:	2111      	movs	r1, #17
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	f7ff fdd1 	bl	8008678 <acc_sensor_reg_read>
 8008ad6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8008ada:	f412 6480 	ands.w	r4, r2, #1024	; 0x400
 8008ade:	d11a      	bne.n	8008b16 <acc_sensor_protocol_run_program+0x56>
 8008ae0:	f640 73fb 	movw	r3, #4091	; 0xffb
 8008ae4:	429e      	cmp	r6, r3
 8008ae6:	d80d      	bhi.n	8008b04 <acc_sensor_protocol_run_program+0x44>
 8008ae8:	4622      	mov	r2, r4
 8008aea:	4638      	mov	r0, r7
 8008aec:	2110      	movs	r1, #16
 8008aee:	f7ff fdc5 	bl	800867c <acc_sensor_reg_write>
 8008af2:	4638      	mov	r0, r7
 8008af4:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 8008af8:	2110      	movs	r1, #16
 8008afa:	f7ff fdbf 	bl	800867c <acc_sensor_reg_write>
 8008afe:	2001      	movs	r0, #1
 8008b00:	b005      	add	sp, #20
 8008b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b04:	4620      	mov	r0, r4
 8008b06:	4633      	mov	r3, r6
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <acc_sensor_protocol_run_program+0x70>)
 8008b0a:	490a      	ldr	r1, [pc, #40]	; (8008b34 <acc_sensor_protocol_run_program+0x74>)
 8008b0c:	f7fe f8e4 	bl	8006cd8 <acc_log_rss>
 8008b10:	4620      	mov	r0, r4
 8008b12:	b005      	add	sp, #20
 8008b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b16:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <acc_sensor_protocol_run_program+0x78>)
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <acc_sensor_protocol_run_program+0x7c>)
 8008b1a:	4906      	ldr	r1, [pc, #24]	; (8008b34 <acc_sensor_protocol_run_program+0x74>)
 8008b1c:	9700      	str	r7, [sp, #0]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f7fe f8da 	bl	8006cd8 <acc_log_rss>
 8008b24:	4638      	mov	r0, r7
 8008b26:	f001 fe4d 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	b005      	add	sp, #20
 8008b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b30:	0801356c 	.word	0x0801356c
 8008b34:	08013360 	.word	0x08013360
 8008b38:	0801327c 	.word	0x0801327c
 8008b3c:	08013538 	.word	0x08013538

08008b40 <acc_sensor_protocol_try_get_indication>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4e24      	ldr	r6, [pc, #144]	; (8008bd8 <acc_sensor_protocol_try_get_indication+0x98>)
 8008b46:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008bec <acc_sensor_protocol_try_get_indication+0xac>
 8008b4a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8008be0 <acc_sensor_protocol_try_get_indication+0xa0>
 8008b4e:	fba6 3601 	umull	r3, r6, r6, r1
 8008b52:	b084      	sub	sp, #16
 8008b54:	4604      	mov	r4, r0
 8008b56:	4692      	mov	sl, r2
 8008b58:	09b6      	lsrs	r6, r6, #6
 8008b5a:	2564      	movs	r5, #100	; 0x64
 8008b5c:	2700      	movs	r7, #0
 8008b5e:	e012      	b.n	8008b86 <acc_sensor_protocol_try_get_indication+0x46>
 8008b60:	f822 7d02 	strh.w	r7, [r2, #-2]!
 8008b64:	4620      	mov	r0, r4
 8008b66:	f7ff fd87 	bl	8008678 <acc_sensor_reg_read>
 8008b6a:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8008b6e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8008b72:	4623      	mov	r3, r4
 8008b74:	464a      	mov	r2, r9
 8008b76:	4641      	mov	r1, r8
 8008b78:	f04f 0001 	mov.w	r0, #1
 8008b7c:	d118      	bne.n	8008bb0 <acc_sensor_protocol_try_get_indication+0x70>
 8008b7e:	f7fe f8ab 	bl	8006cd8 <acc_log_rss>
 8008b82:	3d01      	subs	r5, #1
 8008b84:	d007      	beq.n	8008b96 <acc_sensor_protocol_try_get_indication+0x56>
 8008b86:	4631      	mov	r1, r6
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7fe f84d 	bl	8006c28 <acc_integration_wait_for_sensor_interrupt>
 8008b8e:	aa04      	add	r2, sp, #16
 8008b90:	212a      	movs	r1, #42	; 0x2a
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1e4      	bne.n	8008b60 <acc_sensor_protocol_try_get_indication+0x20>
 8008b96:	4623      	mov	r3, r4
 8008b98:	4a10      	ldr	r2, [pc, #64]	; (8008bdc <acc_sensor_protocol_try_get_indication+0x9c>)
 8008b9a:	4911      	ldr	r1, [pc, #68]	; (8008be0 <acc_sensor_protocol_try_get_indication+0xa0>)
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f7fe f89b 	bl	8006cd8 <acc_log_rss>
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f001 fe0e 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	b004      	add	sp, #16
 8008bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb0:	f1ba 0f00 	cmp.w	sl, #0
 8008bb4:	d005      	beq.n	8008bc2 <acc_sensor_protocol_try_get_indication+0x82>
 8008bb6:	4651      	mov	r1, sl
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fe7f 	bl	80088bc <acc_sensor_protocol_get_indication_header.part.0>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d1f3      	bne.n	8008baa <acc_sensor_protocol_try_get_indication+0x6a>
 8008bc2:	9400      	str	r4, [sp, #0]
 8008bc4:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <acc_sensor_protocol_try_get_indication+0xa4>)
 8008bc6:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <acc_sensor_protocol_try_get_indication+0xa8>)
 8008bc8:	4905      	ldr	r1, [pc, #20]	; (8008be0 <acc_sensor_protocol_try_get_indication+0xa0>)
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f7fe f884 	bl	8006cd8 <acc_log_rss>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	b004      	add	sp, #16
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	10624dd3 	.word	0x10624dd3
 8008bdc:	080136f0 	.word	0x080136f0
 8008be0:	08013360 	.word	0x08013360
 8008be4:	0801329c 	.word	0x0801329c
 8008be8:	080136bc 	.word	0x080136bc
 8008bec:	08013698 	.word	0x08013698

08008bf0 <acc_sensor_protocol_get_indication_payload>:
 8008bf0:	b162      	cbz	r2, 8008c0c <acc_sensor_protocol_get_indication_payload+0x1c>
 8008bf2:	b570      	push	{r4, r5, r6, lr}
 8008bf4:	3903      	subs	r1, #3
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	2906      	cmp	r1, #6
 8008bfe:	d807      	bhi.n	8008c10 <acc_sensor_protocol_get_indication_payload+0x20>
 8008c00:	e8df f001 	tbb	[pc, r1]
 8008c04:	44372009 	.word	0x44372009
 8008c08:	594e      	.short	0x594e
 8008c0a:	66          	.byte	0x66
 8008c0b:	00          	.byte	0x00
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4770      	bx	lr
 8008c10:	2001      	movs	r0, #1
 8008c12:	b002      	add	sp, #8
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	f10d 0206 	add.w	r2, sp, #6
 8008c1a:	219d      	movs	r1, #157	; 0x9d
 8008c1c:	f7ff fd2c 	bl	8008678 <acc_sensor_reg_read>
 8008c20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c24:	4629      	mov	r1, r5
 8008c26:	2004      	movs	r0, #4
 8008c28:	f003 0507 	and.w	r5, r3, #7
 8008c2c:	f10d 0206 	add.w	r2, sp, #6
 8008c30:	2301      	movs	r3, #1
 8008c32:	f8ad 5006 	strh.w	r5, [sp, #6]
 8008c36:	f7fe f88f 	bl	8006d58 <acc_probes_execute_uint16>
 8008c3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c3e:	7023      	strb	r3, [r4, #0]
 8008c40:	2001      	movs	r0, #1
 8008c42:	e7e6      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008c44:	1c96      	adds	r6, r2, #2
 8008c46:	2127      	movs	r1, #39	; 0x27
 8008c48:	f7ff fd16 	bl	8008678 <acc_sensor_reg_read>
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	2126      	movs	r1, #38	; 0x26
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff fd11 	bl	8008678 <acc_sensor_reg_read>
 8008c56:	4622      	mov	r2, r4
 8008c58:	2301      	movs	r3, #1
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	2006      	movs	r0, #6
 8008c5e:	f7fe f87b 	bl	8006d58 <acc_probes_execute_uint16>
 8008c62:	2005      	movs	r0, #5
 8008c64:	4632      	mov	r2, r6
 8008c66:	4629      	mov	r1, r5
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f7fe f875 	bl	8006d58 <acc_probes_execute_uint16>
 8008c6e:	2001      	movs	r0, #1
 8008c70:	e7cf      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008c72:	2100      	movs	r1, #0
 8008c74:	f852 3b04 	ldr.w	r3, [r2], #4
 8008c78:	f7ff fe08 	bl	800888c <acc_sensor_buffer_processed_read>
 8008c7c:	2007      	movs	r0, #7
 8008c7e:	4629      	mov	r1, r5
 8008c80:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008c84:	f7fe f868 	bl	8006d58 <acc_probes_execute_uint16>
 8008c88:	2001      	movs	r0, #1
 8008c8a:	e7c2      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008c8c:	6813      	ldr	r3, [r2, #0]
 8008c8e:	bb73      	cbnz	r3, 8008cee <acc_sensor_protocol_get_indication_payload+0xfe>
 8008c90:	4603      	mov	r3, r0
 8008c92:	4a18      	ldr	r2, [pc, #96]	; (8008cf4 <acc_sensor_protocol_get_indication_payload+0x104>)
 8008c94:	4918      	ldr	r1, [pc, #96]	; (8008cf8 <acc_sensor_protocol_get_indication_payload+0x108>)
 8008c96:	2001      	movs	r0, #1
 8008c98:	f7fe f81e 	bl	8006cd8 <acc_log_rss>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	e7b8      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008ca0:	2127      	movs	r1, #39	; 0x27
 8008ca2:	f7ff fce9 	bl	8008678 <acc_sensor_reg_read>
 8008ca6:	200b      	movs	r0, #11
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	2301      	movs	r3, #1
 8008cae:	f7fe f853 	bl	8006d58 <acc_probes_execute_uint16>
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7ad      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	f852 3b04 	ldr.w	r3, [r2], #4
 8008cbc:	f7ff fde6 	bl	800888c <acc_sensor_buffer_processed_read>
 8008cc0:	2008      	movs	r0, #8
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008cc8:	f7fe f846 	bl	8006d58 <acc_probes_execute_uint16>
 8008ccc:	2001      	movs	r0, #1
 8008cce:	e7a0      	b.n	8008c12 <acc_sensor_protocol_get_indication_payload+0x22>
 8008cd0:	f852 3b04 	ldr.w	r3, [r2], #4
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f7ff fdd8 	bl	800888c <acc_sensor_buffer_processed_read>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f7fe f838 	bl	8006d58 <acc_probes_execute_uint16>
 8008ce8:	2001      	movs	r0, #1
 8008cea:	b002      	add	sp, #8
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
 8008cee:	3204      	adds	r2, #4
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	e7f0      	b.n	8008cd6 <acc_sensor_protocol_get_indication_payload+0xe6>
 8008cf4:	080133a4 	.word	0x080133a4
 8008cf8:	08013360 	.word	0x08013360

08008cfc <acc_sensor_protocol_respond_to_indication>:
 8008cfc:	b530      	push	{r4, r5, lr}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	aa02      	add	r2, sp, #8
 8008d02:	2300      	movs	r3, #0
 8008d04:	f822 3d02 	strh.w	r3, [r2, #-2]!
 8008d08:	2138      	movs	r1, #56	; 0x38
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	f7ff fcb4 	bl	8008678 <acc_sensor_reg_read>
 8008d10:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8008d14:	b114      	cbz	r4, 8008d1c <acc_sensor_protocol_respond_to_indication+0x20>
 8008d16:	2001      	movs	r0, #1
 8008d18:	b003      	add	sp, #12
 8008d1a:	bd30      	pop	{r4, r5, pc}
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	4a05      	ldr	r2, [pc, #20]	; (8008d34 <acc_sensor_protocol_respond_to_indication+0x38>)
 8008d20:	4905      	ldr	r1, [pc, #20]	; (8008d38 <acc_sensor_protocol_respond_to_indication+0x3c>)
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7fd ffd8 	bl	8006cd8 <acc_log_rss>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f001 fd4b 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008d2e:	4620      	mov	r0, r4
 8008d30:	b003      	add	sp, #12
 8008d32:	bd30      	pop	{r4, r5, pc}
 8008d34:	08013504 	.word	0x08013504
 8008d38:	08013360 	.word	0x08013360

08008d3c <acc_sensor_protocol_terminate_program>:
 8008d3c:	b530      	push	{r4, r5, lr}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	aa02      	add	r2, sp, #8
 8008d42:	2300      	movs	r3, #0
 8008d44:	f822 3d02 	strh.w	r3, [r2, #-2]!
 8008d48:	2111      	movs	r1, #17
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	f7ff fc94 	bl	8008678 <acc_sensor_reg_read>
 8008d50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008d54:	f410 6480 	ands.w	r4, r0, #1024	; 0x400
 8008d58:	d007      	beq.n	8008d6a <acc_sensor_protocol_terminate_program+0x2e>
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2174      	movs	r1, #116	; 0x74
 8008d60:	f7ff fc8c 	bl	800867c <acc_sensor_reg_write>
 8008d64:	2001      	movs	r0, #1
 8008d66:	b003      	add	sp, #12
 8008d68:	bd30      	pop	{r4, r5, pc}
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <acc_sensor_protocol_terminate_program+0x48>)
 8008d6c:	4a06      	ldr	r2, [pc, #24]	; (8008d88 <acc_sensor_protocol_terminate_program+0x4c>)
 8008d6e:	4907      	ldr	r1, [pc, #28]	; (8008d8c <acc_sensor_protocol_terminate_program+0x50>)
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7fd ffb1 	bl	8006cd8 <acc_log_rss>
 8008d76:	4628      	mov	r0, r5
 8008d78:	f001 fd24 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	b003      	add	sp, #12
 8008d80:	bd30      	pop	{r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	080132c4 	.word	0x080132c4
 8008d88:	08013660 	.word	0x08013660
 8008d8c:	08013360 	.word	0x08013360

08008d90 <acc_sensor_protocol_stop>:
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	b085      	sub	sp, #20
 8008d94:	460e      	mov	r6, r1
 8008d96:	4605      	mov	r5, r0
 8008d98:	f7ff ffd0 	bl	8008d3c <acc_sensor_protocol_terminate_program>
 8008d9c:	b360      	cbz	r0, 8008df8 <acc_sensor_protocol_stop+0x68>
 8008d9e:	2703      	movs	r7, #3
 8008da0:	aa02      	add	r2, sp, #8
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	f7ff fecb 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 8008daa:	4604      	mov	r4, r0
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d042      	beq.n	8008e36 <acc_sensor_protocol_stop+0xa6>
 8008db0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d028      	beq.n	8008e0a <acc_sensor_protocol_stop+0x7a>
 8008db8:	2b06      	cmp	r3, #6
 8008dba:	d026      	beq.n	8008e0a <acc_sensor_protocol_stop+0x7a>
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d00d      	beq.n	8008ddc <acc_sensor_protocol_stop+0x4c>
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	4a23      	ldr	r2, [pc, #140]	; (8008e50 <acc_sensor_protocol_stop+0xc0>)
 8008dc4:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008dc6:	4924      	ldr	r1, [pc, #144]	; (8008e58 <acc_sensor_protocol_stop+0xc8>)
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f7fd ff85 	bl	8006cd8 <acc_log_rss>
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f001 fcf8 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008dd4:	2400      	movs	r4, #0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	b005      	add	sp, #20
 8008dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ddc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	bf96      	itet	ls
 8008de8:	4a1c      	ldrls	r2, [pc, #112]	; (8008e5c <acc_sensor_protocol_stop+0xcc>)
 8008dea:	4b1d      	ldrhi	r3, [pc, #116]	; (8008e60 <acc_sensor_protocol_stop+0xd0>)
 8008dec:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	4a1c      	ldr	r2, [pc, #112]	; (8008e64 <acc_sensor_protocol_stop+0xd4>)
 8008df4:	4b17      	ldr	r3, [pc, #92]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008df6:	e7e6      	b.n	8008dc6 <acc_sensor_protocol_stop+0x36>
 8008df8:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <acc_sensor_protocol_stop+0xd8>)
 8008dfc:	4916      	ldr	r1, [pc, #88]	; (8008e58 <acc_sensor_protocol_stop+0xc8>)
 8008dfe:	4604      	mov	r4, r0
 8008e00:	f7fd ff6a 	bl	8006cd8 <acc_log_rss>
 8008e04:	4620      	mov	r0, r4
 8008e06:	b005      	add	sp, #20
 8008e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7ff ff76 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 8008e10:	4604      	mov	r4, r0
 8008e12:	b1b0      	cbz	r0, 8008e42 <acc_sensor_protocol_stop+0xb2>
 8008e14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d0dc      	beq.n	8008dd6 <acc_sensor_protocol_stop+0x46>
 8008e1c:	3f01      	subs	r7, #1
 8008e1e:	d1bf      	bne.n	8008da0 <acc_sensor_protocol_stop+0x10>
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <acc_sensor_protocol_stop+0xdc>)
 8008e24:	490c      	ldr	r1, [pc, #48]	; (8008e58 <acc_sensor_protocol_stop+0xc8>)
 8008e26:	4638      	mov	r0, r7
 8008e28:	f7fd ff56 	bl	8006cd8 <acc_log_rss>
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f001 fcc9 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008e32:	463c      	mov	r4, r7
 8008e34:	e7cf      	b.n	8008dd6 <acc_sensor_protocol_stop+0x46>
 8008e36:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008e38:	4a0d      	ldr	r2, [pc, #52]	; (8008e70 <acc_sensor_protocol_stop+0xe0>)
 8008e3a:	4907      	ldr	r1, [pc, #28]	; (8008e58 <acc_sensor_protocol_stop+0xc8>)
 8008e3c:	f7fd ff4c 	bl	8006cd8 <acc_log_rss>
 8008e40:	e7c9      	b.n	8008dd6 <acc_sensor_protocol_stop+0x46>
 8008e42:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <acc_sensor_protocol_stop+0xc4>)
 8008e44:	4a0b      	ldr	r2, [pc, #44]	; (8008e74 <acc_sensor_protocol_stop+0xe4>)
 8008e46:	4904      	ldr	r1, [pc, #16]	; (8008e58 <acc_sensor_protocol_stop+0xc8>)
 8008e48:	f7fd ff46 	bl	8006cd8 <acc_log_rss>
 8008e4c:	e7c3      	b.n	8008dd6 <acc_sensor_protocol_stop+0x46>
 8008e4e:	bf00      	nop
 8008e50:	080135f8 	.word	0x080135f8
 8008e54:	080132ec 	.word	0x080132ec
 8008e58:	08013360 	.word	0x08013360
 8008e5c:	080131d4 	.word	0x080131d4
 8008e60:	08013588 	.word	0x08013588
 8008e64:	080135dc 	.word	0x080135dc
 8008e68:	08013598 	.word	0x08013598
 8008e6c:	0801363c 	.word	0x0801363c
 8008e70:	080135b8 	.word	0x080135b8
 8008e74:	08013618 	.word	0x08013618

08008e78 <acc_sensor_protocol_low_power_stop>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	4605      	mov	r5, r0
 8008e80:	f7ff ff5c 	bl	8008d3c <acc_sensor_protocol_terminate_program>
 8008e84:	b338      	cbz	r0, 8008ed6 <acc_sensor_protocol_low_power_stop+0x5e>
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7ff ff38 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	b1d0      	cbz	r0, 8008ec6 <acc_sensor_protocol_low_power_stop+0x4e>
 8008e90:	4631      	mov	r1, r6
 8008e92:	aa02      	add	r2, sp, #8
 8008e94:	4628      	mov	r0, r5
 8008e96:	f7ff fe53 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	b1c0      	cbz	r0, 8008ed0 <acc_sensor_protocol_low_power_stop+0x58>
 8008e9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d020      	beq.n	8008ee8 <acc_sensor_protocol_low_power_stop+0x70>
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d038      	beq.n	8008f1c <acc_sensor_protocol_low_power_stop+0xa4>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d028      	beq.n	8008f00 <acc_sensor_protocol_low_power_stop+0x88>
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <acc_sensor_protocol_low_power_stop+0xb8>)
 8008eb2:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <acc_sensor_protocol_low_power_stop+0xbc>)
 8008eb4:	4920      	ldr	r1, [pc, #128]	; (8008f38 <acc_sensor_protocol_low_power_stop+0xc0>)
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f7fd ff0e 	bl	8006cd8 <acc_log_rss>
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f001 fc81 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	e004      	b.n	8008ed0 <acc_sensor_protocol_low_power_stop+0x58>
 8008ec6:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <acc_sensor_protocol_low_power_stop+0xbc>)
 8008ec8:	4a1c      	ldr	r2, [pc, #112]	; (8008f3c <acc_sensor_protocol_low_power_stop+0xc4>)
 8008eca:	491b      	ldr	r1, [pc, #108]	; (8008f38 <acc_sensor_protocol_low_power_stop+0xc0>)
 8008ecc:	f7fd ff04 	bl	8006cd8 <acc_log_rss>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	b004      	add	sp, #16
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <acc_sensor_protocol_low_power_stop+0xbc>)
 8008ed8:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <acc_sensor_protocol_low_power_stop+0xc8>)
 8008eda:	4917      	ldr	r1, [pc, #92]	; (8008f38 <acc_sensor_protocol_low_power_stop+0xc0>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	f7fd fefb 	bl	8006cd8 <acc_log_rss>
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	b004      	add	sp, #16
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7ff ff07 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 8008eee:	4604      	mov	r4, r0
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1ed      	bne.n	8008ed0 <acc_sensor_protocol_low_power_stop+0x58>
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <acc_sensor_protocol_low_power_stop+0xbc>)
 8008ef6:	4a13      	ldr	r2, [pc, #76]	; (8008f44 <acc_sensor_protocol_low_power_stop+0xcc>)
 8008ef8:	490f      	ldr	r1, [pc, #60]	; (8008f38 <acc_sensor_protocol_low_power_stop+0xc0>)
 8008efa:	f7fd feed 	bl	8006cd8 <acc_log_rss>
 8008efe:	e7e7      	b.n	8008ed0 <acc_sensor_protocol_low_power_stop+0x58>
 8008f00:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	bf96      	itet	ls
 8008f0c:	4a0e      	ldrls	r2, [pc, #56]	; (8008f48 <acc_sensor_protocol_low_power_stop+0xd0>)
 8008f0e:	4b0f      	ldrhi	r3, [pc, #60]	; (8008f4c <acc_sensor_protocol_low_power_stop+0xd4>)
 8008f10:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <acc_sensor_protocol_low_power_stop+0xd8>)
 8008f18:	4b06      	ldr	r3, [pc, #24]	; (8008f34 <acc_sensor_protocol_low_power_stop+0xbc>)
 8008f1a:	e7cb      	b.n	8008eb4 <acc_sensor_protocol_low_power_stop+0x3c>
 8008f1c:	4a0d      	ldr	r2, [pc, #52]	; (8008f54 <acc_sensor_protocol_low_power_stop+0xdc>)
 8008f1e:	4906      	ldr	r1, [pc, #24]	; (8008f38 <acc_sensor_protocol_low_power_stop+0xc0>)
 8008f20:	2000      	movs	r0, #0
 8008f22:	f7fd fed9 	bl	8006cd8 <acc_log_rss>
 8008f26:	4628      	mov	r0, r5
 8008f28:	f001 fc4c 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8008f2c:	2400      	movs	r4, #0
 8008f2e:	e7cf      	b.n	8008ed0 <acc_sensor_protocol_low_power_stop+0x58>
 8008f30:	080135f8 	.word	0x080135f8
 8008f34:	08013308 	.word	0x08013308
 8008f38:	08013360 	.word	0x08013360
 8008f3c:	08013470 	.word	0x08013470
 8008f40:	08013598 	.word	0x08013598
 8008f44:	080134d8 	.word	0x080134d8
 8008f48:	080131d4 	.word	0x080131d4
 8008f4c:	08013588 	.word	0x08013588
 8008f50:	080135dc 	.word	0x080135dc
 8008f54:	080134a0 	.word	0x080134a0

08008f58 <acc_sensor_protocol_get_error_message>:
 8008f58:	3801      	subs	r0, #1
 8008f5a:	b2c0      	uxtb	r0, r0
 8008f5c:	2820      	cmp	r0, #32
 8008f5e:	bf9a      	itte	ls
 8008f60:	4b02      	ldrls	r3, [pc, #8]	; (8008f6c <acc_sensor_protocol_get_error_message+0x14>)
 8008f62:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8008f66:	4802      	ldrhi	r0, [pc, #8]	; (8008f70 <acc_sensor_protocol_get_error_message+0x18>)
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	080131d4 	.word	0x080131d4
 8008f70:	08013588 	.word	0x08013588

08008f74 <acc_utils_swap16_array>:
 8008f74:	1e4a      	subs	r2, r1, #1
 8008f76:	b131      	cbz	r1, 8008f86 <acc_utils_swap16_array+0x12>
 8008f78:	8803      	ldrh	r3, [r0, #0]
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	ba5b      	rev16	r3, r3
 8008f7e:	f820 3b02 	strh.w	r3, [r0], #2
 8008f82:	1c53      	adds	r3, r2, #1
 8008f84:	d1f8      	bne.n	8008f78 <acc_utils_swap16_array+0x4>
 8008f86:	4770      	bx	lr

08008f88 <acc_utils_swap32_array>:
 8008f88:	1e4a      	subs	r2, r1, #1
 8008f8a:	b131      	cbz	r1, 8008f9a <acc_utils_swap32_array+0x12>
 8008f8c:	6803      	ldr	r3, [r0, #0]
 8008f8e:	3a01      	subs	r2, #1
 8008f90:	ba1b      	rev	r3, r3
 8008f92:	f840 3b04 	str.w	r3, [r0], #4
 8008f96:	1c53      	adds	r3, r2, #1
 8008f98:	d1f8      	bne.n	8008f8c <acc_utils_swap32_array+0x4>
 8008f9a:	4770      	bx	lr

08008f9c <acc_utils_uint8_to_uint32_swap>:
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	ba00      	rev	r0, r0
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop

08008fa4 <acc_utils_uint32_to_uint8_swap>:
 8008fa4:	ba00      	rev	r0, r0
 8008fa6:	6008      	str	r0, [r1, #0]
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop

08008fac <sweep_session_send_data>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	794c      	ldrb	r4, [r1, #5]
 8008fb2:	f88d 400d 	strb.w	r4, [sp, #13]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4615      	mov	r5, r2
 8008fba:	68ca      	ldr	r2, [r1, #12]
 8008fbc:	9400      	str	r4, [sp, #0]
 8008fbe:	791e      	ldrb	r6, [r3, #4]
 8008fc0:	f88d 600e 	strb.w	r6, [sp, #14]
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	799d      	ldrb	r5, [r3, #6]
 8008fca:	f88d 500c 	strb.w	r5, [sp, #12]
 8008fce:	ab03      	add	r3, sp, #12
 8008fd0:	f7fb fff0 	bl	8004fb4 <acc_service_send_data>
 8008fd4:	b004      	add	sp, #16
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <acc_service_envelope_create>:
 8008fd8:	b530      	push	{r4, r5, lr}
 8008fda:	f100 0540 	add.w	r5, r0, #64	; 0x40
 8008fde:	4604      	mov	r4, r0
 8008fe0:	b089      	sub	sp, #36	; 0x24
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f7fd fc92 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 8008fe8:	ee07 0a10 	vmov	s14, r0
 8008fec:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8008ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ffc:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
 8009000:	f7fc f82e 	bl	8005060 <acc_service_configuration_check>
 8009004:	b918      	cbnz	r0, 800900e <acc_service_envelope_create+0x36>
 8009006:	2500      	movs	r5, #0
 8009008:	4628      	mov	r0, r5
 800900a:	b009      	add	sp, #36	; 0x24
 800900c:	bd30      	pop	{r4, r5, pc}
 800900e:	4628      	mov	r0, r5
 8009010:	f7fd fd70 	bl	8006af4 <acc_base_configuration_check>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0f6      	beq.n	8009006 <acc_service_envelope_create+0x2e>
 8009018:	4628      	mov	r0, r5
 800901a:	f7fd fc77 	bl	800690c <acc_base_configuration_downsampling_factor_get>
 800901e:	1e43      	subs	r3, r0, #1
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b01      	cmp	r3, #1
 8009024:	d907      	bls.n	8009036 <acc_service_envelope_create+0x5e>
 8009026:	2804      	cmp	r0, #4
 8009028:	d005      	beq.n	8009036 <acc_service_envelope_create+0x5e>
 800902a:	4a14      	ldr	r2, [pc, #80]	; (800907c <acc_service_envelope_create+0xa4>)
 800902c:	4914      	ldr	r1, [pc, #80]	; (8009080 <acc_service_envelope_create+0xa8>)
 800902e:	2000      	movs	r0, #0
 8009030:	f7fd fe52 	bl	8006cd8 <acc_log_rss>
 8009034:	e7e7      	b.n	8009006 <acc_service_envelope_create+0x2e>
 8009036:	4629      	mov	r1, r5
 8009038:	9400      	str	r4, [sp, #0]
 800903a:	4b12      	ldr	r3, [pc, #72]	; (8009084 <acc_service_envelope_create+0xac>)
 800903c:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8009040:	4620      	mov	r0, r4
 8009042:	f7fb ff21 	bl	8004e88 <acc_service_create_sweep_session>
 8009046:	4605      	mov	r5, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	d0dc      	beq.n	8009006 <acc_service_envelope_create+0x2e>
 800904c:	a903      	add	r1, sp, #12
 800904e:	4620      	mov	r0, r4
 8009050:	f7fb ff28 	bl	8004ea4 <acc_service_get_configuration_output>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	9804      	ldr	r0, [sp, #16]
 8009058:	9907      	ldr	r1, [sp, #28]
 800905a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800905e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8009062:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009066:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 800906a:	4628      	mov	r0, r5
 800906c:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
 8009070:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
 8009074:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
 8009078:	b009      	add	sp, #36	; 0x24
 800907a:	bd30      	pop	{r4, r5, pc}
 800907c:	080137cc 	.word	0x080137cc
 8009080:	080137fc 	.word	0x080137fc
 8009084:	08008fad 	.word	0x08008fad

08009088 <acc_service_envelope_destroy>:
 8009088:	f7fb bf10 	b.w	8004eac <acc_service_destroy_sweep_session>

0800908c <event>:
 800908c:	4603      	mov	r3, r0
 800908e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009090:	6800      	ldr	r0, [r0, #0]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	6843      	ldr	r3, [r0, #4]
 8009098:	4718      	bx	r3
 800909a:	bf00      	nop

0800909c <reset>:
 800909c:	6800      	ldr	r0, [r0, #0]
 800909e:	68c3      	ldr	r3, [r0, #12]
 80090a0:	4718      	bx	r3
 80090a2:	bf00      	nop

080090a4 <validate>:
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	b510      	push	{r4, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	b123      	cbz	r3, 80090b6 <validate+0x12>
 80090ac:	4a08      	ldr	r2, [pc, #32]	; (80090d0 <validate+0x2c>)
 80090ae:	4909      	ldr	r1, [pc, #36]	; (80090d4 <validate+0x30>)
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7fd fe11 	bl	8006cd8 <acc_log_rss>
 80090b6:	69e3      	ldr	r3, [r4, #28]
 80090b8:	b123      	cbz	r3, 80090c4 <validate+0x20>
 80090ba:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <validate+0x34>)
 80090bc:	4905      	ldr	r1, [pc, #20]	; (80090d4 <validate+0x30>)
 80090be:	2001      	movs	r0, #1
 80090c0:	f7fd fe0a 	bl	8006cd8 <acc_log_rss>
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ca:	6883      	ldr	r3, [r0, #8]
 80090cc:	4718      	bx	r3
 80090ce:	bf00      	nop
 80090d0:	08013810 	.word	0x08013810
 80090d4:	08013824 	.word	0x08013824
 80090d8:	08013834 	.word	0x08013834

080090dc <acc_element_crop_init>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4604      	mov	r4, r0
 80090e0:	4608      	mov	r0, r1
 80090e2:	4615      	mov	r5, r2
 80090e4:	f000 fa42 	bl	800956c <acc_element_sizeof>
 80090e8:	4a04      	ldr	r2, [pc, #16]	; (80090fc <acc_element_crop_init+0x20>)
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <acc_element_crop_init+0x24>)
 80090ec:	4905      	ldr	r1, [pc, #20]	; (8009104 <acc_element_crop_init+0x28>)
 80090ee:	6061      	str	r1, [r4, #4]
 80090f0:	fb05 f000 	mul.w	r0, r5, r0
 80090f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80090f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	080090a5 	.word	0x080090a5
 8009100:	0800909d 	.word	0x0800909d
 8009104:	0800908d 	.word	0x0800908d

08009108 <noise_level_normalization_u16>:
 8009108:	0849      	lsrs	r1, r1, #1
 800910a:	d014      	beq.n	8009136 <noise_level_normalization_u16+0x2e>
 800910c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009110:	b410      	push	{r4}
 8009112:	3802      	subs	r0, #2
 8009114:	1e8c      	subs	r4, r1, #2
 8009116:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 800911a:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800911e:	fb03 f101 	mul.w	r1, r3, r1
 8009122:	4284      	cmp	r4, r0
 8009124:	fb91 f1f2 	sdiv	r1, r1, r2
 8009128:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800912c:	8001      	strh	r1, [r0, #0]
 800912e:	d1f2      	bne.n	8009116 <noise_level_normalization_u16+0xe>
 8009130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	4770      	bx	lr

08009138 <event>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800913c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8009142:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8009144:	4604      	mov	r4, r0
 8009146:	6900      	ldr	r0, [r0, #16]
 8009148:	47a8      	blx	r5
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009150:	6843      	ldr	r3, [r0, #4]
 8009152:	4718      	bx	r3

08009154 <reset>:
 8009154:	6800      	ldr	r0, [r0, #0]
 8009156:	68c3      	ldr	r3, [r0, #12]
 8009158:	4718      	bx	r3
 800915a:	bf00      	nop

0800915c <validate>:
 800915c:	6983      	ldr	r3, [r0, #24]
 800915e:	b510      	push	{r4, lr}
 8009160:	4604      	mov	r4, r0
 8009162:	b123      	cbz	r3, 800916e <validate+0x12>
 8009164:	4a08      	ldr	r2, [pc, #32]	; (8009188 <validate+0x2c>)
 8009166:	4909      	ldr	r1, [pc, #36]	; (800918c <validate+0x30>)
 8009168:	2001      	movs	r0, #1
 800916a:	f7fd fdb5 	bl	8006cd8 <acc_log_rss>
 800916e:	69e3      	ldr	r3, [r4, #28]
 8009170:	b123      	cbz	r3, 800917c <validate+0x20>
 8009172:	4a07      	ldr	r2, [pc, #28]	; (8009190 <validate+0x34>)
 8009174:	4905      	ldr	r1, [pc, #20]	; (800918c <validate+0x30>)
 8009176:	2001      	movs	r0, #1
 8009178:	f7fd fdae 	bl	8006cd8 <acc_log_rss>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009182:	6883      	ldr	r3, [r0, #8]
 8009184:	4718      	bx	r3
 8009186:	bf00      	nop
 8009188:	08013810 	.word	0x08013810
 800918c:	08013888 	.word	0x08013888
 8009190:	08013834 	.word	0x08013834

08009194 <acc_element_noise_level_normalization_init>:
 8009194:	2902      	cmp	r1, #2
 8009196:	b510      	push	{r4, lr}
 8009198:	8702      	strh	r2, [r0, #56]	; 0x38
 800919a:	8743      	strh	r3, [r0, #58]	; 0x3a
 800919c:	d00b      	beq.n	80091b6 <acc_element_noise_level_normalization_init+0x22>
 800919e:	2904      	cmp	r1, #4
 80091a0:	d009      	beq.n	80091b6 <acc_element_noise_level_normalization_init+0x22>
 80091a2:	2400      	movs	r4, #0
 80091a4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <acc_element_noise_level_normalization_init+0x38>)
 80091a8:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <acc_element_noise_level_normalization_init+0x3c>)
 80091aa:	490a      	ldr	r1, [pc, #40]	; (80091d4 <acc_element_noise_level_normalization_init+0x40>)
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7fd fd93 	bl	8006cd8 <acc_log_rss>
 80091b2:	4620      	mov	r0, r4
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	4908      	ldr	r1, [pc, #32]	; (80091d8 <acc_element_noise_level_normalization_init+0x44>)
 80091b8:	4a08      	ldr	r2, [pc, #32]	; (80091dc <acc_element_noise_level_normalization_init+0x48>)
 80091ba:	4c09      	ldr	r4, [pc, #36]	; (80091e0 <acc_element_noise_level_normalization_init+0x4c>)
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <acc_element_noise_level_normalization_init+0x50>)
 80091be:	63c4      	str	r4, [r0, #60]	; 0x3c
 80091c0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80091c4:	60c3      	str	r3, [r0, #12]
 80091c6:	2001      	movs	r0, #1
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	08013844 	.word	0x08013844
 80091d0:	08013870 	.word	0x08013870
 80091d4:	08013888 	.word	0x08013888
 80091d8:	08009139 	.word	0x08009139
 80091dc:	0800915d 	.word	0x0800915d
 80091e0:	08009109 	.word	0x08009109
 80091e4:	08009155 	.word	0x08009155

080091e8 <reset>:
 80091e8:	6800      	ldr	r0, [r0, #0]
 80091ea:	68c3      	ldr	r3, [r0, #12]
 80091ec:	4718      	bx	r3
 80091ee:	bf00      	nop

080091f0 <validate>:
 80091f0:	6983      	ldr	r3, [r0, #24]
 80091f2:	b510      	push	{r4, lr}
 80091f4:	4604      	mov	r4, r0
 80091f6:	b123      	cbz	r3, 8009202 <validate+0x12>
 80091f8:	4a08      	ldr	r2, [pc, #32]	; (800921c <validate+0x2c>)
 80091fa:	4909      	ldr	r1, [pc, #36]	; (8009220 <validate+0x30>)
 80091fc:	2001      	movs	r0, #1
 80091fe:	f7fd fd6b 	bl	8006cd8 <acc_log_rss>
 8009202:	69e3      	ldr	r3, [r4, #28]
 8009204:	b123      	cbz	r3, 8009210 <validate+0x20>
 8009206:	4a07      	ldr	r2, [pc, #28]	; (8009224 <validate+0x34>)
 8009208:	4905      	ldr	r1, [pc, #20]	; (8009220 <validate+0x30>)
 800920a:	2001      	movs	r0, #1
 800920c:	f7fd fd64 	bl	8006cd8 <acc_log_rss>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009216:	6883      	ldr	r3, [r0, #8]
 8009218:	4718      	bx	r3
 800921a:	bf00      	nop
 800921c:	08013810 	.word	0x08013810
 8009220:	080138ac 	.word	0x080138ac
 8009224:	08013834 	.word	0x08013834

08009228 <event>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4604      	mov	r4, r0
 800922c:	2004      	movs	r0, #4
 800922e:	f000 f99d 	bl	800956c <acc_element_sizeof>
 8009232:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009234:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8009236:	6811      	ldr	r1, [r2, #0]
 8009238:	6962      	ldr	r2, [r4, #20]
 800923a:	fbb1 f1f0 	udiv	r1, r1, r0
 800923e:	4605      	mov	r5, r0
 8009240:	6920      	ldr	r0, [r4, #16]
 8009242:	f001 fcdf 	bl	800ac04 <acc_alg_power_bins>
 8009246:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8009248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	fb05 f502 	mul.w	r5, r5, r2
 8009250:	601d      	str	r5, [r3, #0]
 8009252:	6843      	ldr	r3, [r0, #4]
 8009254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009258:	4718      	bx	r3
 800925a:	bf00      	nop

0800925c <acc_element_power_bins_init>:
 800925c:	b410      	push	{r4}
 800925e:	4a05      	ldr	r2, [pc, #20]	; (8009274 <acc_element_power_bins_init+0x18>)
 8009260:	4c05      	ldr	r4, [pc, #20]	; (8009278 <acc_element_power_bins_init+0x1c>)
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <acc_element_power_bins_init+0x20>)
 8009264:	8701      	strh	r1, [r0, #56]	; 0x38
 8009266:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800926a:	60c3      	str	r3, [r0, #12]
 800926c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	080091f1 	.word	0x080091f1
 8009278:	08009229 	.word	0x08009229
 800927c:	080091e9 	.word	0x080091e9

08009280 <saturation_check_u16>:
 8009280:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80092ec <saturation_check_u16+0x6c>
 8009284:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80092f0 <saturation_check_u16+0x70>
 8009288:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800928c:	ee80 7a26 	vdiv.f32	s14, s0, s13
 8009290:	0849      	lsrs	r1, r1, #1
 8009292:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 8009296:	ee27 7a06 	vmul.f32	s14, s14, s12
 800929a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800929e:	d023      	beq.n	80092e8 <saturation_check_u16+0x68>
 80092a0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80092a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a8:	ee17 3a10 	vmov	r3, s14
 80092ac:	b410      	push	{r4}
 80092ae:	b29c      	uxth	r4, r3
 80092b0:	ee17 3a90 	vmov	r3, s15
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	8803      	ldrh	r3, [r0, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d911      	bls.n	80092e0 <saturation_check_u16+0x60>
 80092bc:	429c      	cmp	r4, r3
 80092be:	d20f      	bcs.n	80092e0 <saturation_check_u16+0x60>
 80092c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80092c4:	3902      	subs	r1, #2
 80092c6:	e005      	b.n	80092d4 <saturation_check_u16+0x54>
 80092c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d207      	bcs.n	80092e0 <saturation_check_u16+0x60>
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d905      	bls.n	80092e0 <saturation_check_u16+0x60>
 80092d4:	4288      	cmp	r0, r1
 80092d6:	d1f7      	bne.n	80092c8 <saturation_check_u16+0x48>
 80092d8:	2000      	movs	r0, #0
 80092da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	2001      	movs	r0, #1
 80092e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	4608      	mov	r0, r1
 80092ea:	4770      	bx	lr
 80092ec:	42c80000 	.word	0x42c80000
 80092f0:	477fff00 	.word	0x477fff00

080092f4 <event>:
 80092f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80092f6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80092f8:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 80092fc:	6811      	ldr	r1, [r2, #0]
 80092fe:	b570      	push	{r4, r5, r6, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8009306:	4798      	blx	r3
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	7028      	strb	r0, [r5, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009314:	4710      	bx	r2
 8009316:	bf00      	nop

08009318 <reset>:
 8009318:	6800      	ldr	r0, [r0, #0]
 800931a:	68c3      	ldr	r3, [r0, #12]
 800931c:	4718      	bx	r3
 800931e:	bf00      	nop

08009320 <validate>:
 8009320:	6983      	ldr	r3, [r0, #24]
 8009322:	b510      	push	{r4, lr}
 8009324:	4604      	mov	r4, r0
 8009326:	b123      	cbz	r3, 8009332 <validate+0x12>
 8009328:	4a08      	ldr	r2, [pc, #32]	; (800934c <validate+0x2c>)
 800932a:	4909      	ldr	r1, [pc, #36]	; (8009350 <validate+0x30>)
 800932c:	2001      	movs	r0, #1
 800932e:	f7fd fcd3 	bl	8006cd8 <acc_log_rss>
 8009332:	69e3      	ldr	r3, [r4, #28]
 8009334:	b123      	cbz	r3, 8009340 <validate+0x20>
 8009336:	4a07      	ldr	r2, [pc, #28]	; (8009354 <validate+0x34>)
 8009338:	4905      	ldr	r1, [pc, #20]	; (8009350 <validate+0x30>)
 800933a:	2001      	movs	r0, #1
 800933c:	f7fd fccc 	bl	8006cd8 <acc_log_rss>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009346:	6883      	ldr	r3, [r0, #8]
 8009348:	4718      	bx	r3
 800934a:	bf00      	nop
 800934c:	08013810 	.word	0x08013810
 8009350:	080138e4 	.word	0x080138e4
 8009354:	08013834 	.word	0x08013834

08009358 <acc_element_saturation_check_init>:
 8009358:	2902      	cmp	r1, #2
 800935a:	b510      	push	{r4, lr}
 800935c:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8009360:	d00b      	beq.n	800937a <acc_element_saturation_check_init+0x22>
 8009362:	2904      	cmp	r1, #4
 8009364:	d009      	beq.n	800937a <acc_element_saturation_check_init+0x22>
 8009366:	2400      	movs	r4, #0
 8009368:	63c4      	str	r4, [r0, #60]	; 0x3c
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <acc_element_saturation_check_init+0x38>)
 800936c:	4a09      	ldr	r2, [pc, #36]	; (8009394 <acc_element_saturation_check_init+0x3c>)
 800936e:	490a      	ldr	r1, [pc, #40]	; (8009398 <acc_element_saturation_check_init+0x40>)
 8009370:	4620      	mov	r0, r4
 8009372:	f7fd fcb1 	bl	8006cd8 <acc_log_rss>
 8009376:	4620      	mov	r0, r4
 8009378:	bd10      	pop	{r4, pc}
 800937a:	4908      	ldr	r1, [pc, #32]	; (800939c <acc_element_saturation_check_init+0x44>)
 800937c:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <acc_element_saturation_check_init+0x48>)
 800937e:	4c09      	ldr	r4, [pc, #36]	; (80093a4 <acc_element_saturation_check_init+0x4c>)
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <acc_element_saturation_check_init+0x50>)
 8009382:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009384:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8009388:	60c3      	str	r3, [r0, #12]
 800938a:	2001      	movs	r0, #1
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop
 8009390:	080138c0 	.word	0x080138c0
 8009394:	08013870 	.word	0x08013870
 8009398:	080138e4 	.word	0x080138e4
 800939c:	080092f5 	.word	0x080092f5
 80093a0:	08009321 	.word	0x08009321
 80093a4:	08009281 	.word	0x08009281
 80093a8:	08009319 	.word	0x08009319

080093ac <consume>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80093b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80093b4:	740b      	strb	r3, [r1, #16]
 80093b6:	4604      	mov	r4, r0
 80093b8:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 80093bc:	6900      	ldr	r0, [r0, #16]
 80093be:	4798      	blx	r3
 80093c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093c2:	2200      	movs	r2, #0
 80093c4:	60da      	str	r2, [r3, #12]
 80093c6:	bd10      	pop	{r4, pc}

080093c8 <reset>:
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop

080093cc <validate>:
 80093cc:	6983      	ldr	r3, [r0, #24]
 80093ce:	b510      	push	{r4, lr}
 80093d0:	4604      	mov	r4, r0
 80093d2:	b123      	cbz	r3, 80093de <validate+0x12>
 80093d4:	4a0b      	ldr	r2, [pc, #44]	; (8009404 <validate+0x38>)
 80093d6:	490c      	ldr	r1, [pc, #48]	; (8009408 <validate+0x3c>)
 80093d8:	2001      	movs	r0, #1
 80093da:	f7fd fc7d 	bl	8006cd8 <acc_log_rss>
 80093de:	69e3      	ldr	r3, [r4, #28]
 80093e0:	b123      	cbz	r3, 80093ec <validate+0x20>
 80093e2:	4a0a      	ldr	r2, [pc, #40]	; (800940c <validate+0x40>)
 80093e4:	4908      	ldr	r1, [pc, #32]	; (8009408 <validate+0x3c>)
 80093e6:	2001      	movs	r0, #1
 80093e8:	f7fd fc76 	bl	8006cd8 <acc_log_rss>
 80093ec:	6963      	ldr	r3, [r4, #20]
 80093ee:	b133      	cbz	r3, 80093fe <validate+0x32>
 80093f0:	4a07      	ldr	r2, [pc, #28]	; (8009410 <validate+0x44>)
 80093f2:	4905      	ldr	r1, [pc, #20]	; (8009408 <validate+0x3c>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7fd fc6f 	bl	8006cd8 <acc_log_rss>
 80093fa:	2000      	movs	r0, #0
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	2001      	movs	r0, #1
 8009400:	bd10      	pop	{r4, pc}
 8009402:	bf00      	nop
 8009404:	08013810 	.word	0x08013810
 8009408:	08013900 	.word	0x08013900
 800940c:	08013834 	.word	0x08013834
 8009410:	08013918 	.word	0x08013918

08009414 <acc_element_sink_callback_init>:
 8009414:	b430      	push	{r4, r5}
 8009416:	4d05      	ldr	r5, [pc, #20]	; (800942c <acc_element_sink_callback_init+0x18>)
 8009418:	4c05      	ldr	r4, [pc, #20]	; (8009430 <acc_element_sink_callback_init+0x1c>)
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <acc_element_sink_callback_init+0x20>)
 800941c:	6401      	str	r1, [r0, #64]	; 0x40
 800941e:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8009422:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8009426:	60c3      	str	r3, [r0, #12]
 8009428:	bc30      	pop	{r4, r5}
 800942a:	4770      	bx	lr
 800942c:	080093ad 	.word	0x080093ad
 8009430:	080093cd 	.word	0x080093cd
 8009434:	080093c9 	.word	0x080093c9

08009438 <acc_element_source_adc_init>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	4605      	mov	r5, r0
 800943e:	4608      	mov	r0, r1
 8009440:	4616      	mov	r6, r2
 8009442:	f7fd fa9b 	bl	800697c <acc_base_configuration_print>
 8009446:	4620      	mov	r0, r4
 8009448:	f7fd f86a 	bl	8006520 <acc_base_configuration_sensor_get>
 800944c:	63a8      	str	r0, [r5, #56]	; 0x38
 800944e:	b150      	cbz	r0, 8009466 <acc_element_source_adc_init+0x2e>
 8009450:	4620      	mov	r0, r4
 8009452:	4631      	mov	r1, r6
 8009454:	f7fc fa60 	bl	8005918 <acc_sensor_manager_prepare_measurement>
 8009458:	6428      	str	r0, [r5, #64]	; 0x40
 800945a:	b150      	cbz	r0, 8009472 <acc_element_source_adc_init+0x3a>
 800945c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800945e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8009462:	2001      	movs	r0, #1
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	4620      	mov	r0, r4
 8009468:	4631      	mov	r1, r6
 800946a:	f7fc fac7 	bl	80059fc <acc_sensor_manager_prepare_metadata_only>
 800946e:	2800      	cmp	r0, #0
 8009470:	d1f4      	bne.n	800945c <acc_element_source_adc_init+0x24>
 8009472:	2000      	movs	r0, #0
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	bf00      	nop

08009478 <acc_element_source_adc_release>:
 8009478:	b108      	cbz	r0, 800947e <acc_element_source_adc_release+0x6>
 800947a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800947c:	b900      	cbnz	r0, 8009480 <acc_element_source_adc_release+0x8>
 800947e:	4770      	bx	lr
 8009480:	f7fc bb8a 	b.w	8005b98 <acc_sensor_manager_release_measurement>

08009484 <acc_element_source_adc_reset>:
 8009484:	6800      	ldr	r0, [r0, #0]
 8009486:	68c3      	ldr	r3, [r0, #12]
 8009488:	4718      	bx	r3
 800948a:	bf00      	nop

0800948c <acc_element_source_adc_validate>:
 800948c:	6800      	ldr	r0, [r0, #0]
 800948e:	6883      	ldr	r3, [r0, #8]
 8009490:	4718      	bx	r3
 8009492:	bf00      	nop

08009494 <acc_element_source_adc_produce>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009498:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800949a:	6a03      	ldr	r3, [r0, #32]
 800949c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800949e:	4c28      	ldr	r4, [pc, #160]	; (8009540 <acc_element_source_adc_produce+0xac>)
 80094a0:	2500      	movs	r5, #0
 80094a2:	6035      	str	r5, [r6, #0]
 80094a4:	600c      	str	r4, [r1, #0]
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	d033      	beq.n	8009516 <acc_element_source_adc_produce+0x82>
 80094ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80094b2:	4604      	mov	r4, r0
 80094b4:	bb23      	cbnz	r3, 8009500 <acc_element_source_adc_produce+0x6c>
 80094b6:	461d      	mov	r5, r3
 80094b8:	e030      	b.n	800951c <acc_element_source_adc_produce+0x88>
 80094ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094be:	685e      	ldr	r6, [r3, #4]
 80094c0:	6810      	ldr	r0, [r2, #0]
 80094c2:	6967      	ldr	r7, [r4, #20]
 80094c4:	6899      	ldr	r1, [r3, #8]
 80094c6:	0076      	lsls	r6, r6, #1
 80094c8:	4632      	mov	r2, r6
 80094ca:	4438      	add	r0, r7
 80094cc:	f002 fe54 	bl	800c178 <memcpy>
 80094d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80094d4:	6813      	ldr	r3, [r2, #0]
 80094d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80094d8:	7800      	ldrb	r0, [r0, #0]
 80094da:	4433      	add	r3, r6
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	7008      	strb	r0, [r1, #0]
 80094e0:	b90d      	cbnz	r5, 80094e6 <acc_element_source_adc_produce+0x52>
 80094e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094e4:	601e      	str	r6, [r3, #0]
 80094e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80094ea:	1e59      	subs	r1, r3, #1
 80094ec:	42a9      	cmp	r1, r5
 80094ee:	bf08      	it	eq
 80094f0:	6ae1      	ldreq	r1, [r4, #44]	; 0x2c
 80094f2:	f105 0501 	add.w	r5, r5, #1
 80094f6:	bf08      	it	eq
 80094f8:	600e      	streq	r6, [r1, #0]
 80094fa:	42ab      	cmp	r3, r5
 80094fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80094fe:	d90c      	bls.n	800951a <acc_element_source_adc_produce+0x86>
 8009500:	4630      	mov	r0, r6
 8009502:	f7fc fad9 	bl	8005ab8 <acc_sensor_manager_wait_for_adc_output>
 8009506:	4606      	mov	r6, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	d1d6      	bne.n	80094ba <acc_element_source_adc_produce+0x26>
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <acc_element_source_adc_produce+0xb0>)
 800950e:	4a0e      	ldr	r2, [pc, #56]	; (8009548 <acc_element_source_adc_produce+0xb4>)
 8009510:	490e      	ldr	r1, [pc, #56]	; (800954c <acc_element_source_adc_produce+0xb8>)
 8009512:	f7fd fbe1 	bl	8006cd8 <acc_log_rss>
 8009516:	4630      	mov	r0, r6
 8009518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800951a:	6815      	ldr	r5, [r2, #0]
 800951c:	6967      	ldr	r7, [r4, #20]
 800951e:	2002      	movs	r0, #2
 8009520:	f000 f824 	bl	800956c <acc_element_sizeof>
 8009524:	4631      	mov	r1, r6
 8009526:	fbb5 f3f0 	udiv	r3, r5, r0
 800952a:	463a      	mov	r2, r7
 800952c:	2001      	movs	r0, #1
 800952e:	f7fd fc13 	bl	8006d58 <acc_probes_execute_uint16>
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	2601      	movs	r6, #1
 8009536:	6843      	ldr	r3, [r0, #4]
 8009538:	4798      	blx	r3
 800953a:	4630      	mov	r0, r6
 800953c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953e:	bf00      	nop
 8009540:	51645c3c 	.word	0x51645c3c
 8009544:	08013940 	.word	0x08013940
 8009548:	08013960 	.word	0x08013960
 800954c:	08013994 	.word	0x08013994

08009550 <acc_element_source_adc_inject_data>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	4604      	mov	r4, r0
 8009554:	6940      	ldr	r0, [r0, #20]
 8009556:	4615      	mov	r5, r2
 8009558:	f002 fe0e 	bl	800c178 <memcpy>
 800955c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800955e:	6820      	ldr	r0, [r4, #0]
 8009560:	601d      	str	r5, [r3, #0]
 8009562:	6843      	ldr	r3, [r0, #4]
 8009564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009568:	4718      	bx	r3
 800956a:	bf00      	nop

0800956c <acc_element_sizeof>:
 800956c:	3801      	subs	r0, #1
 800956e:	b2c0      	uxtb	r0, r0
 8009570:	2806      	cmp	r0, #6
 8009572:	bf9a      	itte	ls
 8009574:	4b02      	ldrls	r3, [pc, #8]	; (8009580 <acc_element_sizeof+0x14>)
 8009576:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800957a:	2000      	movhi	r0, #0
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	080139ac 	.word	0x080139ac

08009584 <acc_element_connect>:
 8009584:	6001      	str	r1, [r0, #0]
 8009586:	4770      	bx	lr

08009588 <acc_cpd_area_calibration_calculate_area_settings>:
 8009588:	0080      	lsls	r0, r0, #2
 800958a:	b280      	uxth	r0, r0
 800958c:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b7b      	cmp	r3, #123	; 0x7b
 8009594:	8008      	strh	r0, [r1, #0]
 8009596:	804b      	strh	r3, [r1, #2]
 8009598:	d91a      	bls.n	80095d0 <acc_cpd_area_calibration_calculate_area_settings+0x48>
 800959a:	b410      	push	{r4}
 800959c:	4c13      	ldr	r4, [pc, #76]	; (80095ec <acc_cpd_area_calibration_calculate_area_settings+0x64>)
 800959e:	8048      	strh	r0, [r1, #2]
 80095a0:	089a      	lsrs	r2, r3, #2
 80095a2:	fba4 0202 	umull	r0, r2, r4, r2
 80095a6:	0892      	lsrs	r2, r2, #2
 80095a8:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 80095ac:	2000      	movs	r0, #0
 80095ae:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80095b2:	2403      	movs	r4, #3
 80095b4:	2201      	movs	r2, #1
 80095b6:	810c      	strh	r4, [r1, #8]
 80095b8:	800b      	strh	r3, [r1, #0]
 80095ba:	808a      	strh	r2, [r1, #4]
 80095bc:	80ca      	strh	r2, [r1, #6]
 80095be:	814a      	strh	r2, [r1, #10]
 80095c0:	820a      	strh	r2, [r1, #16]
 80095c2:	824a      	strh	r2, [r1, #18]
 80095c4:	8188      	strh	r0, [r1, #12]
 80095c6:	81c8      	strh	r0, [r1, #14]
 80095c8:	8288      	strh	r0, [r1, #20]
 80095ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	2301      	movs	r3, #1
 80095d2:	2200      	movs	r2, #0
 80095d4:	2003      	movs	r0, #3
 80095d6:	808b      	strh	r3, [r1, #4]
 80095d8:	814b      	strh	r3, [r1, #10]
 80095da:	818b      	strh	r3, [r1, #12]
 80095dc:	820b      	strh	r3, [r1, #16]
 80095de:	80ca      	strh	r2, [r1, #6]
 80095e0:	824a      	strh	r2, [r1, #18]
 80095e2:	828a      	strh	r2, [r1, #20]
 80095e4:	8108      	strh	r0, [r1, #8]
 80095e6:	81c8      	strh	r0, [r1, #14]
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	21084211 	.word	0x21084211

080095f0 <acc_cpd_cbank_calibration>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	4604      	mov	r4, r0
 80095f6:	2200      	movs	r2, #0
 80095f8:	6800      	ldr	r0, [r0, #0]
 80095fa:	460e      	mov	r6, r1
 80095fc:	a904      	add	r1, sp, #16
 80095fe:	f7ff f9ef 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 8009602:	9d04      	ldr	r5, [sp, #16]
 8009604:	494f      	ldr	r1, [pc, #316]	; (8009744 <acc_cpd_cbank_calibration+0x154>)
 8009606:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800960a:	4628      	mov	r0, r5
 800960c:	f002 fdb4 	bl	800c178 <memcpy>
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	494d      	ldr	r1, [pc, #308]	; (8009748 <acc_cpd_cbank_calibration+0x158>)
 8009614:	4628      	mov	r0, r5
 8009616:	220c      	movs	r2, #12
 8009618:	f001 fc16 	bl	800ae48 <acc_confprogram_patch>
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	494a      	ldr	r1, [pc, #296]	; (8009748 <acc_cpd_cbank_calibration+0x158>)
 8009620:	4628      	mov	r0, r5
 8009622:	220a      	movs	r2, #10
 8009624:	f001 fc10 	bl	800ae48 <acc_confprogram_patch>
 8009628:	68e3      	ldr	r3, [r4, #12]
 800962a:	4947      	ldr	r1, [pc, #284]	; (8009748 <acc_cpd_cbank_calibration+0x158>)
 800962c:	4628      	mov	r0, r5
 800962e:	220b      	movs	r2, #11
 8009630:	f001 fc0a 	bl	800ae48 <acc_confprogram_patch>
 8009634:	4628      	mov	r0, r5
 8009636:	4944      	ldr	r1, [pc, #272]	; (8009748 <acc_cpd_cbank_calibration+0x158>)
 8009638:	8a23      	ldrh	r3, [r4, #16]
 800963a:	2209      	movs	r2, #9
 800963c:	f001 fc04 	bl	800ae48 <acc_confprogram_patch>
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	f240 72b4 	movw	r2, #1972	; 0x7b4
 8009646:	2100      	movs	r1, #0
 8009648:	f7ff f9cc 	bl	80089e4 <acc_sensor_protocol_load_program>
 800964c:	2800      	cmp	r0, #0
 800964e:	d031      	beq.n	80096b4 <acc_cpd_cbank_calibration+0xc4>
 8009650:	4b3e      	ldr	r3, [pc, #248]	; (800974c <acc_cpd_cbank_calibration+0x15c>)
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	8b99      	ldrh	r1, [r3, #28]
 8009656:	f7ff fa33 	bl	8008ac0 <acc_sensor_protocol_run_program>
 800965a:	4605      	mov	r5, r0
 800965c:	b1e8      	cbz	r0, 800969a <acc_cpd_cbank_calibration+0xaa>
 800965e:	6824      	ldr	r4, [r4, #0]
 8009660:	493b      	ldr	r1, [pc, #236]	; (8009750 <acc_cpd_cbank_calibration+0x160>)
 8009662:	4620      	mov	r0, r4
 8009664:	aa02      	add	r2, sp, #8
 8009666:	f7ff fa6b 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 800966a:	2800      	cmp	r0, #0
 800966c:	d053      	beq.n	8009716 <acc_cpd_cbank_calibration+0x126>
 800966e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8009672:	2901      	cmp	r1, #1
 8009674:	d02b      	beq.n	80096ce <acc_cpd_cbank_calibration+0xde>
 8009676:	2903      	cmp	r1, #3
 8009678:	d038      	beq.n	80096ec <acc_cpd_cbank_calibration+0xfc>
 800967a:	9100      	str	r1, [sp, #0]
 800967c:	4b35      	ldr	r3, [pc, #212]	; (8009754 <acc_cpd_cbank_calibration+0x164>)
 800967e:	4a36      	ldr	r2, [pc, #216]	; (8009758 <acc_cpd_cbank_calibration+0x168>)
 8009680:	4936      	ldr	r1, [pc, #216]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 8009682:	2000      	movs	r0, #0
 8009684:	f7fd fb28 	bl	8006cd8 <acc_log_rss>
 8009688:	4a35      	ldr	r2, [pc, #212]	; (8009760 <acc_cpd_cbank_calibration+0x170>)
 800968a:	4934      	ldr	r1, [pc, #208]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 800968c:	2000      	movs	r0, #0
 800968e:	f7fd fb23 	bl	8006cd8 <acc_log_rss>
 8009692:	2500      	movs	r5, #0
 8009694:	4628      	mov	r0, r5
 8009696:	b006      	add	sp, #24
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	4b32      	ldr	r3, [pc, #200]	; (8009764 <acc_cpd_cbank_calibration+0x174>)
 800969c:	4a32      	ldr	r2, [pc, #200]	; (8009768 <acc_cpd_cbank_calibration+0x178>)
 800969e:	492f      	ldr	r1, [pc, #188]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 80096a0:	f7fd fb1a 	bl	8006cd8 <acc_log_rss>
 80096a4:	4628      	mov	r0, r5
 80096a6:	4a31      	ldr	r2, [pc, #196]	; (800976c <acc_cpd_cbank_calibration+0x17c>)
 80096a8:	492c      	ldr	r1, [pc, #176]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 80096aa:	f7fd fb15 	bl	8006cd8 <acc_log_rss>
 80096ae:	4628      	mov	r0, r5
 80096b0:	b006      	add	sp, #24
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	4605      	mov	r5, r0
 80096b6:	4a2e      	ldr	r2, [pc, #184]	; (8009770 <acc_cpd_cbank_calibration+0x180>)
 80096b8:	4928      	ldr	r1, [pc, #160]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 80096ba:	f7fd fb0d 	bl	8006cd8 <acc_log_rss>
 80096be:	4628      	mov	r0, r5
 80096c0:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <acc_cpd_cbank_calibration+0x184>)
 80096c2:	4926      	ldr	r1, [pc, #152]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 80096c4:	f7fd fb08 	bl	8006cd8 <acc_log_rss>
 80096c8:	4628      	mov	r0, r5
 80096ca:	b006      	add	sp, #24
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
 80096ce:	4620      	mov	r0, r4
 80096d0:	f001 f878 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 80096d4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80096d8:	f7ff fc3e 	bl	8008f58 <acc_sensor_protocol_get_error_message>
 80096dc:	4623      	mov	r3, r4
 80096de:	9000      	str	r0, [sp, #0]
 80096e0:	4a25      	ldr	r2, [pc, #148]	; (8009778 <acc_cpd_cbank_calibration+0x188>)
 80096e2:	491e      	ldr	r1, [pc, #120]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 80096e4:	2000      	movs	r0, #0
 80096e6:	f7fd faf7 	bl	8006cd8 <acc_log_rss>
 80096ea:	e7cd      	b.n	8009688 <acc_cpd_cbank_calibration+0x98>
 80096ec:	aa04      	add	r2, sp, #16
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff fa7e 	bl	8008bf0 <acc_sensor_protocol_get_indication_payload>
 80096f4:	b300      	cbz	r0, 8009738 <acc_cpd_cbank_calibration+0x148>
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7ff fb00 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 80096fc:	4605      	mov	r5, r0
 80096fe:	b178      	cbz	r0, 8009720 <acc_cpd_cbank_calibration+0x130>
 8009700:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009704:	6033      	str	r3, [r6, #0]
 8009706:	4a1d      	ldr	r2, [pc, #116]	; (800977c <acc_cpd_cbank_calibration+0x18c>)
 8009708:	4914      	ldr	r1, [pc, #80]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 800970a:	2002      	movs	r0, #2
 800970c:	f7fd fae4 	bl	8006cd8 <acc_log_rss>
 8009710:	4628      	mov	r0, r5
 8009712:	b006      	add	sp, #24
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	4a1a      	ldr	r2, [pc, #104]	; (8009780 <acc_cpd_cbank_calibration+0x190>)
 8009718:	4910      	ldr	r1, [pc, #64]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 800971a:	f7fd fadd 	bl	8006cd8 <acc_log_rss>
 800971e:	e7b3      	b.n	8009688 <acc_cpd_cbank_calibration+0x98>
 8009720:	4b18      	ldr	r3, [pc, #96]	; (8009784 <acc_cpd_cbank_calibration+0x194>)
 8009722:	4a19      	ldr	r2, [pc, #100]	; (8009788 <acc_cpd_cbank_calibration+0x198>)
 8009724:	490d      	ldr	r1, [pc, #52]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 8009726:	f7fd fad7 	bl	8006cd8 <acc_log_rss>
 800972a:	4b18      	ldr	r3, [pc, #96]	; (800978c <acc_cpd_cbank_calibration+0x19c>)
 800972c:	4a18      	ldr	r2, [pc, #96]	; (8009790 <acc_cpd_cbank_calibration+0x1a0>)
 800972e:	490b      	ldr	r1, [pc, #44]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 8009730:	2000      	movs	r0, #0
 8009732:	f7fd fad1 	bl	8006cd8 <acc_log_rss>
 8009736:	e7a7      	b.n	8009688 <acc_cpd_cbank_calibration+0x98>
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <acc_cpd_cbank_calibration+0x194>)
 800973a:	4a15      	ldr	r2, [pc, #84]	; (8009790 <acc_cpd_cbank_calibration+0x1a0>)
 800973c:	4907      	ldr	r1, [pc, #28]	; (800975c <acc_cpd_cbank_calibration+0x16c>)
 800973e:	f7fd facb 	bl	8006cd8 <acc_log_rss>
 8009742:	e7f2      	b.n	800972a <acc_cpd_cbank_calibration+0x13a>
 8009744:	0800e5a4 	.word	0x0800e5a4
 8009748:	08014ab8 	.word	0x08014ab8
 800974c:	0800e570 	.word	0x0800e570
 8009750:	001e8480 	.word	0x001e8480
 8009754:	080139e0 	.word	0x080139e0
 8009758:	08013b04 	.word	0x08013b04
 800975c:	08013a38 	.word	0x08013a38
 8009760:	08013b9c 	.word	0x08013b9c
 8009764:	080139c8 	.word	0x080139c8
 8009768:	08013a8c 	.word	0x08013a8c
 800976c:	08013a90 	.word	0x08013a90
 8009770:	08013a08 	.word	0x08013a08
 8009774:	08013a50 	.word	0x08013a50
 8009778:	08013ae0 	.word	0x08013ae0
 800977c:	08013b78 	.word	0x08013b78
 8009780:	08013ac0 	.word	0x08013ac0
 8009784:	080139fc 	.word	0x080139fc
 8009788:	08013b50 	.word	0x08013b50
 800978c:	080139d4 	.word	0x080139d4
 8009790:	08013b30 	.word	0x08013b30

08009794 <acc_cpd_dll_calibration>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	4b97      	ldr	r3, [pc, #604]	; (80099f8 <acc_cpd_dll_calibration+0x264>)
 800979a:	4e98      	ldr	r6, [pc, #608]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	b0c3      	sub	sp, #268	; 0x10c
 80097a0:	f04f 0902 	mov.w	r9, #2
 80097a4:	4604      	mov	r4, r0
 80097a6:	46cb      	mov	fp, r9
 80097a8:	9102      	str	r1, [sp, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 8111 	bne.w	80099d2 <acc_cpd_dll_calibration+0x23e>
 80097b0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	9135      	str	r1, [sp, #212]	; 0xd4
 80097b8:	68e1      	ldr	r1, [r4, #12]
 80097ba:	9236      	str	r2, [sp, #216]	; 0xd8
 80097bc:	9337      	str	r3, [sp, #220]	; 0xdc
 80097be:	8a22      	ldrh	r2, [r4, #16]
 80097c0:	6963      	ldr	r3, [r4, #20]
 80097c2:	9138      	str	r1, [sp, #224]	; 0xe0
 80097c4:	a835      	add	r0, sp, #212	; 0xd4
 80097c6:	a906      	add	r1, sp, #24
 80097c8:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
 80097cc:	f8ad 20e4 	strh.w	r2, [sp, #228]	; 0xe4
 80097d0:	933b      	str	r3, [sp, #236]	; 0xec
 80097d2:	f000 f937 	bl	8009a44 <acc_cpd_dly_coarse_calibration>
 80097d6:	4680      	mov	r8, r0
 80097d8:	2800      	cmp	r0, #0
 80097da:	f000 8101 	beq.w	80099e0 <acc_cpd_dll_calibration+0x24c>
 80097de:	aa0c      	add	r2, sp, #48	; 0x30
 80097e0:	a906      	add	r1, sp, #24
 80097e2:	200c      	movs	r0, #12
 80097e4:	f001 feec 	bl	800b5c0 <acc_alg_dly_coarse_priority_sort>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	f000 80e0 	beq.w	80099ae <acc_cpd_dll_calibration+0x21a>
 80097ee:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80097f2:	f04f 0a00 	mov.w	sl, #0
 80097f6:	465d      	mov	r5, fp
 80097f8:	4b7f      	ldr	r3, [pc, #508]	; (80099f8 <acc_cpd_dll_calibration+0x264>)
 80097fa:	f839 7b02 	ldrh.w	r7, [r9], #2
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f040 80bb 	bne.w	800997c <acc_cpd_dll_calibration+0x1e8>
 8009806:	e9d4 1200 	ldrd	r1, r2, [r4]
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	9135      	str	r1, [sp, #212]	; 0xd4
 800980e:	68e1      	ldr	r1, [r4, #12]
 8009810:	9236      	str	r2, [sp, #216]	; 0xd8
 8009812:	9337      	str	r3, [sp, #220]	; 0xdc
 8009814:	8a22      	ldrh	r2, [r4, #16]
 8009816:	6963      	ldr	r3, [r4, #20]
 8009818:	9138      	str	r1, [sp, #224]	; 0xe0
 800981a:	a835      	add	r0, sp, #212	; 0xd4
 800981c:	a91b      	add	r1, sp, #108	; 0x6c
 800981e:	e9cd 573a 	strd	r5, r7, [sp, #232]	; 0xe8
 8009822:	f8ad 20e4 	strh.w	r2, [sp, #228]	; 0xe4
 8009826:	933c      	str	r3, [sp, #240]	; 0xf0
 8009828:	f000 fd56 	bl	800a2d8 <acc_cpd_rx_fine_dip_calibration>
 800982c:	2800      	cmp	r0, #0
 800982e:	f000 808f 	beq.w	8009950 <acc_cpd_dll_calibration+0x1bc>
 8009832:	ab28      	add	r3, sp, #160	; 0xa0
 8009834:	aa35      	add	r2, sp, #212	; 0xd4
 8009836:	a91b      	add	r1, sp, #108	; 0x6c
 8009838:	2019      	movs	r0, #25
 800983a:	f001 ff29 	bl	800b690 <acc_alg_plateau_finder>
 800983e:	2800      	cmp	r0, #0
 8009840:	d079      	beq.n	8009936 <acc_cpd_dll_calibration+0x1a2>
 8009842:	3801      	subs	r0, #1
 8009844:	b280      	uxth	r0, r0
 8009846:	f10d 03d6 	add.w	r3, sp, #214	; 0xd6
 800984a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	f8cd 9014 	str.w	r9, [sp, #20]
 8009856:	330c      	adds	r3, #12
 8009858:	9303      	str	r3, [sp, #12]
 800985a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800985e:	f83b 3b02 	ldrh.w	r3, [fp], #2
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	aa42      	add	r2, sp, #264	; 0x108
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	eb02 0803 	add.w	r8, r2, r3
 800986c:	4631      	mov	r1, r6
 800986e:	f838 3c68 	ldrh.w	r3, [r8, #-104]
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	4a62      	ldr	r2, [pc, #392]	; (8009a00 <acc_cpd_dll_calibration+0x26c>)
 8009876:	4b63      	ldr	r3, [pc, #396]	; (8009a04 <acc_cpd_dll_calibration+0x270>)
 8009878:	2004      	movs	r0, #4
 800987a:	f7fd fa2d 	bl	8006cd8 <acc_log_rss>
 800987e:	4b5e      	ldr	r3, [pc, #376]	; (80099f8 <acc_cpd_dll_calibration+0x264>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	46c1      	mov	r9, r8
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 808a 	bne.w	800999e <acc_cpd_dll_calibration+0x20a>
 800988a:	e9d4 1200 	ldrd	r1, r2, [r4]
 800988e:	f839 3c68 	ldrh.w	r3, [r9, #-104]
 8009892:	9319      	str	r3, [sp, #100]	; 0x64
 8009894:	9112      	str	r1, [sp, #72]	; 0x48
 8009896:	68a3      	ldr	r3, [r4, #8]
 8009898:	68e1      	ldr	r1, [r4, #12]
 800989a:	9213      	str	r2, [sp, #76]	; 0x4c
 800989c:	9314      	str	r3, [sp, #80]	; 0x50
 800989e:	8a22      	ldrh	r2, [r4, #16]
 80098a0:	6963      	ldr	r3, [r4, #20]
 80098a2:	9115      	str	r1, [sp, #84]	; 0x54
 80098a4:	a812      	add	r0, sp, #72	; 0x48
 80098a6:	9903      	ldr	r1, [sp, #12]
 80098a8:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
 80098ac:	931a      	str	r3, [sp, #104]	; 0x68
 80098ae:	e9cd 5717 	strd	r5, r7, [sp, #92]	; 0x5c
 80098b2:	f001 fe01 	bl	800b4b8 <acc_cpd_area_calibration>
 80098b6:	4b53      	ldr	r3, [pc, #332]	; (8009a04 <acc_cpd_dll_calibration+0x270>)
 80098b8:	4a53      	ldr	r2, [pc, #332]	; (8009a08 <acc_cpd_dll_calibration+0x274>)
 80098ba:	4631      	mov	r1, r6
 80098bc:	2800      	cmp	r0, #0
 80098be:	d064      	beq.n	800998a <acc_cpd_dll_calibration+0x1f6>
 80098c0:	464b      	mov	r3, r9
 80098c2:	46d3      	mov	fp, sl
 80098c4:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 80098c8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80098cc:	4a4f      	ldr	r2, [pc, #316]	; (8009a0c <acc_cpd_dll_calibration+0x278>)
 80098ce:	f8ca 3000 	str.w	r3, [sl]
 80098d2:	4680      	mov	r8, r0
 80098d4:	e9cd 7300 	strd	r7, r3, [sp]
 80098d8:	4948      	ldr	r1, [pc, #288]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 80098da:	4b4a      	ldr	r3, [pc, #296]	; (8009a04 <acc_cpd_dll_calibration+0x270>)
 80098dc:	4c4c      	ldr	r4, [pc, #304]	; (8009a10 <acc_cpd_dll_calibration+0x27c>)
 80098de:	2004      	movs	r0, #4
 80098e0:	f7fd f9fa 	bl	8006cd8 <acc_log_rss>
 80098e4:	ab42      	add	r3, sp, #264	; 0x108
 80098e6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80098ea:	46a9      	mov	r9, r5
 80098ec:	f833 3cf0 	ldrh.w	r3, [r3, #-240]
 80098f0:	f8ca 7004 	str.w	r7, [sl, #4]
 80098f4:	f8ca 9008 	str.w	r9, [sl, #8]
 80098f8:	4a46      	ldr	r2, [pc, #280]	; (8009a14 <acc_cpd_dll_calibration+0x280>)
 80098fa:	4940      	ldr	r1, [pc, #256]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 80098fc:	e9cd 7300 	strd	r7, r3, [sp]
 8009900:	2002      	movs	r0, #2
 8009902:	4623      	mov	r3, r4
 8009904:	f7fd f9e8 	bl	8006cd8 <acc_log_rss>
 8009908:	f8da 3000 	ldr.w	r3, [sl]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	4a42      	ldr	r2, [pc, #264]	; (8009a18 <acc_cpd_dll_calibration+0x284>)
 8009910:	493a      	ldr	r1, [pc, #232]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 8009912:	4623      	mov	r3, r4
 8009914:	2002      	movs	r0, #2
 8009916:	f7fd f9df 	bl	8006cd8 <acc_log_rss>
 800991a:	f10b 0201 	add.w	r2, fp, #1
 800991e:	9201      	str	r2, [sp, #4]
 8009920:	9400      	str	r4, [sp, #0]
 8009922:	4623      	mov	r3, r4
 8009924:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <acc_cpd_dll_calibration+0x288>)
 8009926:	4935      	ldr	r1, [pc, #212]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 8009928:	2004      	movs	r0, #4
 800992a:	f7fd f9d5 	bl	8006cd8 <acc_log_rss>
 800992e:	4640      	mov	r0, r8
 8009930:	b043      	add	sp, #268	; 0x10c
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	4b33      	ldr	r3, [pc, #204]	; (8009a04 <acc_cpd_dll_calibration+0x270>)
 8009938:	4a39      	ldr	r2, [pc, #228]	; (8009a20 <acc_cpd_dll_calibration+0x28c>)
 800993a:	4631      	mov	r1, r6
 800993c:	2004      	movs	r0, #4
 800993e:	f7fd f9cb 	bl	8006cd8 <acc_log_rss>
 8009942:	9700      	str	r7, [sp, #0]
 8009944:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <acc_cpd_dll_calibration+0x270>)
 8009946:	4a37      	ldr	r2, [pc, #220]	; (8009a24 <acc_cpd_dll_calibration+0x290>)
 8009948:	4631      	mov	r1, r6
 800994a:	2004      	movs	r0, #4
 800994c:	f7fd f9c4 	bl	8006cd8 <acc_log_rss>
 8009950:	e9cd 5700 	strd	r5, r7, [sp]
 8009954:	f10a 0a01 	add.w	sl, sl, #1
 8009958:	4b2d      	ldr	r3, [pc, #180]	; (8009a10 <acc_cpd_dll_calibration+0x27c>)
 800995a:	4a33      	ldr	r2, [pc, #204]	; (8009a28 <acc_cpd_dll_calibration+0x294>)
 800995c:	4631      	mov	r1, r6
 800995e:	2004      	movs	r0, #4
 8009960:	f7fd f9ba 	bl	8006cd8 <acc_log_rss>
 8009964:	f1ba 0f0c 	cmp.w	sl, #12
 8009968:	f47f af46 	bne.w	80097f8 <acc_cpd_dll_calibration+0x64>
 800996c:	2d01      	cmp	r5, #1
 800996e:	d129      	bne.n	80099c4 <acc_cpd_dll_calibration+0x230>
 8009970:	f04f 0800 	mov.w	r8, #0
 8009974:	4640      	mov	r0, r8
 8009976:	b043      	add	sp, #268	; 0x10c
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	463b      	mov	r3, r7
 800997e:	4a2b      	ldr	r2, [pc, #172]	; (8009a2c <acc_cpd_dll_calibration+0x298>)
 8009980:	4631      	mov	r1, r6
 8009982:	2002      	movs	r0, #2
 8009984:	f7fd f9a8 	bl	8006cd8 <acc_log_rss>
 8009988:	e73d      	b.n	8009806 <acc_cpd_dll_calibration+0x72>
 800998a:	2003      	movs	r0, #3
 800998c:	f7fd f9a4 	bl	8006cd8 <acc_log_rss>
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	455b      	cmp	r3, fp
 8009994:	f47f af63 	bne.w	800985e <acc_cpd_dll_calibration+0xca>
 8009998:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800999c:	e7d1      	b.n	8009942 <acc_cpd_dll_calibration+0x1ae>
 800999e:	f838 3c68 	ldrh.w	r3, [r8, #-104]
 80099a2:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <acc_cpd_dll_calibration+0x29c>)
 80099a4:	4631      	mov	r1, r6
 80099a6:	2002      	movs	r0, #2
 80099a8:	f7fd f996 	bl	8006cd8 <acc_log_rss>
 80099ac:	e76d      	b.n	800988a <acc_cpd_dll_calibration+0xf6>
 80099ae:	f8cd b000 	str.w	fp, [sp]
 80099b2:	4b17      	ldr	r3, [pc, #92]	; (8009a10 <acc_cpd_dll_calibration+0x27c>)
 80099b4:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <acc_cpd_dll_calibration+0x2a0>)
 80099b6:	4631      	mov	r1, r6
 80099b8:	2004      	movs	r0, #4
 80099ba:	f7fd f98d 	bl	8006cd8 <acc_log_rss>
 80099be:	f1bb 0f01 	cmp.w	fp, #1
 80099c2:	d0d5      	beq.n	8009970 <acc_cpd_dll_calibration+0x1dc>
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <acc_cpd_dll_calibration+0x264>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f04f 0b01 	mov.w	fp, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f43f aeef 	beq.w	80097b0 <acc_cpd_dll_calibration+0x1c>
 80099d2:	465b      	mov	r3, fp
 80099d4:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <acc_cpd_dll_calibration+0x2a4>)
 80099d6:	4631      	mov	r1, r6
 80099d8:	2002      	movs	r0, #2
 80099da:	f7fd f97d 	bl	8006cd8 <acc_log_rss>
 80099de:	e6e7      	b.n	80097b0 <acc_cpd_dll_calibration+0x1c>
 80099e0:	f8cd b000 	str.w	fp, [sp]
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <acc_cpd_dll_calibration+0x2a8>)
 80099e6:	4a16      	ldr	r2, [pc, #88]	; (8009a40 <acc_cpd_dll_calibration+0x2ac>)
 80099e8:	4904      	ldr	r1, [pc, #16]	; (80099fc <acc_cpd_dll_calibration+0x268>)
 80099ea:	f7fd f975 	bl	8006cd8 <acc_log_rss>
 80099ee:	4640      	mov	r0, r8
 80099f0:	b043      	add	sp, #268	; 0x10c
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	bf00      	nop
 80099f8:	200001e4 	.word	0x200001e4
 80099fc:	08013c1c 	.word	0x08013c1c
 8009a00:	08013cf8 	.word	0x08013cf8
 8009a04:	08013bd0 	.word	0x08013bd0
 8009a08:	08013e48 	.word	0x08013e48
 8009a0c:	08013d44 	.word	0x08013d44
 8009a10:	08013bb8 	.word	0x08013bb8
 8009a14:	08013d98 	.word	0x08013d98
 8009a18:	08013dc8 	.word	0x08013dc8
 8009a1c:	08013df4 	.word	0x08013df4
 8009a20:	08013cd0 	.word	0x08013cd0
 8009a24:	08013e9c 	.word	0x08013e9c
 8009a28:	08013ed4 	.word	0x08013ed4
 8009a2c:	08013cb0 	.word	0x08013cb0
 8009a30:	08013d24 	.word	0x08013d24
 8009a34:	08013c6c 	.word	0x08013c6c
 8009a38:	08013c00 	.word	0x08013c00
 8009a3c:	08013be4 	.word	0x08013be4
 8009a40:	08013c2c 	.word	0x08013c2c

08009a44 <acc_cpd_dly_coarse_calibration>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	b08d      	sub	sp, #52	; 0x34
 8009a4a:	4681      	mov	r9, r0
 8009a4c:	9107      	str	r1, [sp, #28]
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	2200      	movs	r2, #0
 8009a52:	460d      	mov	r5, r1
 8009a54:	a90a      	add	r1, sp, #40	; 0x28
 8009a56:	f7fe ffc3 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 8009a5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a5c:	4979      	ldr	r1, [pc, #484]	; (8009c44 <acc_cpd_dly_coarse_calibration+0x200>)
 8009a5e:	f640 326c 	movw	r2, #2924	; 0xb6c
 8009a62:	4620      	mov	r0, r4
 8009a64:	f002 fb88 	bl	800c178 <memcpy>
 8009a68:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8009a6c:	4976      	ldr	r1, [pc, #472]	; (8009c48 <acc_cpd_dly_coarse_calibration+0x204>)
 8009a6e:	4620      	mov	r0, r4
 8009a70:	2209      	movs	r2, #9
 8009a72:	f001 f9e9 	bl	800ae48 <acc_confprogram_patch>
 8009a76:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009a7a:	4973      	ldr	r1, [pc, #460]	; (8009c48 <acc_cpd_dly_coarse_calibration+0x204>)
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	2222      	movs	r2, #34	; 0x22
 8009a80:	f001 f9e2 	bl	800ae48 <acc_confprogram_patch>
 8009a84:	4620      	mov	r0, r4
 8009a86:	4970      	ldr	r1, [pc, #448]	; (8009c48 <acc_cpd_dly_coarse_calibration+0x204>)
 8009a88:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8009a8c:	2211      	movs	r2, #17
 8009a8e:	f001 f9db 	bl	800ae48 <acc_confprogram_patch>
 8009a92:	f8d9 0000 	ldr.w	r0, [r9]
 8009a96:	f640 326c 	movw	r2, #2924	; 0xb6c
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	f7fe ffa2 	bl	80089e4 <acc_sensor_protocol_load_program>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f000 8087 	beq.w	8009bb4 <acc_cpd_dly_coarse_calibration+0x170>
 8009aa6:	f8d9 6000 	ldr.w	r6, [r9]
 8009aaa:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8009c48 <acc_cpd_dly_coarse_calibration+0x204>
 8009aae:	f1a5 0a02 	sub.w	sl, r5, #2
 8009ab2:	2700      	movs	r7, #0
 8009ab4:	9700      	str	r7, [sp, #0]
 8009ab6:	230b      	movs	r3, #11
 8009ab8:	465a      	mov	r2, fp
 8009aba:	2100      	movs	r1, #0
 8009abc:	4630      	mov	r0, r6
 8009abe:	f001 fa2f 	bl	800af20 <acc_confprogram_live_patch>
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	b300      	cbz	r0, 8009b08 <acc_cpd_dly_coarse_calibration+0xc4>
 8009ac6:	4b61      	ldr	r3, [pc, #388]	; (8009c4c <acc_cpd_dly_coarse_calibration+0x208>)
 8009ac8:	4630      	mov	r0, r6
 8009aca:	8a99      	ldrh	r1, [r3, #20]
 8009acc:	f7fe fff8 	bl	8008ac0 <acc_sensor_protocol_run_program>
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	b318      	cbz	r0, 8009b1c <acc_cpd_dly_coarse_calibration+0xd8>
 8009ad4:	aa08      	add	r2, sp, #32
 8009ad6:	495e      	ldr	r1, [pc, #376]	; (8009c50 <acc_cpd_dly_coarse_calibration+0x20c>)
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff f831 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d052      	beq.n	8009b88 <acc_cpd_dly_coarse_calibration+0x144>
 8009ae2:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8009ae6:	2901      	cmp	r1, #1
 8009ae8:	d054      	beq.n	8009b94 <acc_cpd_dly_coarse_calibration+0x150>
 8009aea:	2904      	cmp	r1, #4
 8009aec:	d01c      	beq.n	8009b28 <acc_cpd_dly_coarse_calibration+0xe4>
 8009aee:	9100      	str	r1, [sp, #0]
 8009af0:	4b58      	ldr	r3, [pc, #352]	; (8009c54 <acc_cpd_dly_coarse_calibration+0x210>)
 8009af2:	4a59      	ldr	r2, [pc, #356]	; (8009c58 <acc_cpd_dly_coarse_calibration+0x214>)
 8009af4:	4959      	ldr	r1, [pc, #356]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009af6:	2000      	movs	r0, #0
 8009af8:	f7fd f8ee 	bl	8006cd8 <acc_log_rss>
 8009afc:	f04f 0800 	mov.w	r8, #0
 8009b00:	4640      	mov	r0, r8
 8009b02:	b00d      	add	sp, #52	; 0x34
 8009b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b08:	9600      	str	r6, [sp, #0]
 8009b0a:	4b55      	ldr	r3, [pc, #340]	; (8009c60 <acc_cpd_dly_coarse_calibration+0x21c>)
 8009b0c:	4a55      	ldr	r2, [pc, #340]	; (8009c64 <acc_cpd_dly_coarse_calibration+0x220>)
 8009b0e:	4953      	ldr	r1, [pc, #332]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009b10:	f7fd f8e2 	bl	8006cd8 <acc_log_rss>
 8009b14:	4640      	mov	r0, r8
 8009b16:	b00d      	add	sp, #52	; 0x34
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	4b52      	ldr	r3, [pc, #328]	; (8009c68 <acc_cpd_dly_coarse_calibration+0x224>)
 8009b1e:	4a53      	ldr	r2, [pc, #332]	; (8009c6c <acc_cpd_dly_coarse_calibration+0x228>)
 8009b20:	494e      	ldr	r1, [pc, #312]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009b22:	f7fd f8d9 	bl	8006cd8 <acc_log_rss>
 8009b26:	e7eb      	b.n	8009b00 <acc_cpd_dly_coarse_calibration+0xbc>
 8009b28:	aa0a      	add	r2, sp, #40	; 0x28
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7ff f860 	bl	8008bf0 <acc_sensor_protocol_get_indication_payload>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d04a      	beq.n	8009bca <acc_cpd_dly_coarse_calibration+0x186>
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff f8e1 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d052      	beq.n	8009be6 <acc_cpd_dly_coarse_calibration+0x1a2>
 8009b40:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8009b44:	f8bd 502a 	ldrh.w	r5, [sp, #42]	; 0x2a
 8009b48:	2c7f      	cmp	r4, #127	; 0x7f
 8009b4a:	d852      	bhi.n	8009bf2 <acc_cpd_dly_coarse_calibration+0x1ae>
 8009b4c:	3480      	adds	r4, #128	; 0x80
 8009b4e:	2d7f      	cmp	r5, #127	; 0x7f
 8009b50:	d90b      	bls.n	8009b6a <acc_cpd_dly_coarse_calibration+0x126>
 8009b52:	237f      	movs	r3, #127	; 0x7f
 8009b54:	9500      	str	r5, [sp, #0]
 8009b56:	9303      	str	r3, [sp, #12]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	9702      	str	r7, [sp, #8]
 8009b5c:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <acc_cpd_dly_coarse_calibration+0x22c>)
 8009b5e:	4a45      	ldr	r2, [pc, #276]	; (8009c74 <acc_cpd_dly_coarse_calibration+0x230>)
 8009b60:	493e      	ldr	r1, [pc, #248]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009b62:	2001      	movs	r0, #1
 8009b64:	f7fd f8b8 	bl	8006cd8 <acc_log_rss>
 8009b68:	257f      	movs	r5, #127	; 0x7f
 8009b6a:	3701      	adds	r7, #1
 8009b6c:	1b64      	subs	r4, r4, r5
 8009b6e:	2f0c      	cmp	r7, #12
 8009b70:	f82a 4f02 	strh.w	r4, [sl, #2]!
 8009b74:	d19e      	bne.n	8009ab4 <acc_cpd_dly_coarse_calibration+0x70>
 8009b76:	4c40      	ldr	r4, [pc, #256]	; (8009c78 <acc_cpd_dly_coarse_calibration+0x234>)
 8009b78:	7823      	ldrb	r3, [r4, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d146      	bne.n	8009c0c <acc_cpd_dly_coarse_calibration+0x1c8>
 8009b7e:	9807      	ldr	r0, [sp, #28]
 8009b80:	210c      	movs	r1, #12
 8009b82:	f000 fd4d 	bl	800a620 <acc_sensor_diagnostics_print_buffer_u16>
 8009b86:	e7bb      	b.n	8009b00 <acc_cpd_dly_coarse_calibration+0xbc>
 8009b88:	4b32      	ldr	r3, [pc, #200]	; (8009c54 <acc_cpd_dly_coarse_calibration+0x210>)
 8009b8a:	4a3c      	ldr	r2, [pc, #240]	; (8009c7c <acc_cpd_dly_coarse_calibration+0x238>)
 8009b8c:	4933      	ldr	r1, [pc, #204]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009b8e:	f7fd f8a3 	bl	8006cd8 <acc_log_rss>
 8009b92:	e7b3      	b.n	8009afc <acc_cpd_dly_coarse_calibration+0xb8>
 8009b94:	4630      	mov	r0, r6
 8009b96:	f000 fe15 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 8009b9a:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
 8009b9e:	f7ff f9db 	bl	8008f58 <acc_sensor_protocol_get_error_message>
 8009ba2:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <acc_cpd_dly_coarse_calibration+0x210>)
 8009ba4:	4a36      	ldr	r2, [pc, #216]	; (8009c80 <acc_cpd_dly_coarse_calibration+0x23c>)
 8009ba6:	492d      	ldr	r1, [pc, #180]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009ba8:	e9cd 6000 	strd	r6, r0, [sp]
 8009bac:	2000      	movs	r0, #0
 8009bae:	f7fd f893 	bl	8006cd8 <acc_log_rss>
 8009bb2:	e7a3      	b.n	8009afc <acc_cpd_dly_coarse_calibration+0xb8>
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	4a33      	ldr	r2, [pc, #204]	; (8009c84 <acc_cpd_dly_coarse_calibration+0x240>)
 8009bb8:	4928      	ldr	r1, [pc, #160]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009bba:	f7fd f88d 	bl	8006cd8 <acc_log_rss>
 8009bbe:	4a32      	ldr	r2, [pc, #200]	; (8009c88 <acc_cpd_dly_coarse_calibration+0x244>)
 8009bc0:	4926      	ldr	r1, [pc, #152]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7fd f888 	bl	8006cd8 <acc_log_rss>
 8009bc8:	e79a      	b.n	8009b00 <acc_cpd_dly_coarse_calibration+0xbc>
 8009bca:	4b30      	ldr	r3, [pc, #192]	; (8009c8c <acc_cpd_dly_coarse_calibration+0x248>)
 8009bcc:	4a30      	ldr	r2, [pc, #192]	; (8009c90 <acc_cpd_dly_coarse_calibration+0x24c>)
 8009bce:	4923      	ldr	r1, [pc, #140]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009bd0:	f7fd f882 	bl	8006cd8 <acc_log_rss>
 8009bd4:	4b2f      	ldr	r3, [pc, #188]	; (8009c94 <acc_cpd_dly_coarse_calibration+0x250>)
 8009bd6:	4a2e      	ldr	r2, [pc, #184]	; (8009c90 <acc_cpd_dly_coarse_calibration+0x24c>)
 8009bd8:	4920      	ldr	r1, [pc, #128]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f7fd f87c 	bl	8006cd8 <acc_log_rss>
 8009be0:	f04f 0800 	mov.w	r8, #0
 8009be4:	e78c      	b.n	8009b00 <acc_cpd_dly_coarse_calibration+0xbc>
 8009be6:	4b29      	ldr	r3, [pc, #164]	; (8009c8c <acc_cpd_dly_coarse_calibration+0x248>)
 8009be8:	4a2b      	ldr	r2, [pc, #172]	; (8009c98 <acc_cpd_dly_coarse_calibration+0x254>)
 8009bea:	491c      	ldr	r1, [pc, #112]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009bec:	f7fd f874 	bl	8006cd8 <acc_log_rss>
 8009bf0:	e7f0      	b.n	8009bd4 <acc_cpd_dly_coarse_calibration+0x190>
 8009bf2:	237f      	movs	r3, #127	; 0x7f
 8009bf4:	9400      	str	r4, [sp, #0]
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	9702      	str	r7, [sp, #8]
 8009bfc:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <acc_cpd_dly_coarse_calibration+0x22c>)
 8009bfe:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <acc_cpd_dly_coarse_calibration+0x258>)
 8009c00:	4916      	ldr	r1, [pc, #88]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009c02:	2001      	movs	r0, #1
 8009c04:	f7fd f868 	bl	8006cd8 <acc_log_rss>
 8009c08:	24ff      	movs	r4, #255	; 0xff
 8009c0a:	e7a0      	b.n	8009b4e <acc_cpd_dly_coarse_calibration+0x10a>
 8009c0c:	e9d9 0505 	ldrd	r0, r5, [r9, #20]
 8009c10:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009c14:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009c18:	f8d9 3000 	ldr.w	r3, [r9]
 8009c1c:	9102      	str	r1, [sp, #8]
 8009c1e:	e9cd 2200 	strd	r2, r2, [sp]
 8009c22:	e9cd 0503 	strd	r0, r5, [sp, #12]
 8009c26:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <acc_cpd_dly_coarse_calibration+0x25c>)
 8009c28:	490c      	ldr	r1, [pc, #48]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009c2a:	2002      	movs	r0, #2
 8009c2c:	f7fd f854 	bl	8006cd8 <acc_log_rss>
 8009c30:	7823      	ldrb	r3, [r4, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0a3      	beq.n	8009b7e <acc_cpd_dly_coarse_calibration+0x13a>
 8009c36:	4a1b      	ldr	r2, [pc, #108]	; (8009ca4 <acc_cpd_dly_coarse_calibration+0x260>)
 8009c38:	4908      	ldr	r1, [pc, #32]	; (8009c5c <acc_cpd_dly_coarse_calibration+0x218>)
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	f7fd f84c 	bl	8006cd8 <acc_log_rss>
 8009c40:	e79d      	b.n	8009b7e <acc_cpd_dly_coarse_calibration+0x13a>
 8009c42:	bf00      	nop
 8009c44:	08010924 	.word	0x08010924
 8009c48:	08016b88 	.word	0x08016b88
 8009c4c:	080108d8 	.word	0x080108d8
 8009c50:	001e8480 	.word	0x001e8480
 8009c54:	08013f74 	.word	0x08013f74
 8009c58:	08014178 	.word	0x08014178
 8009c5c:	08013fe0 	.word	0x08013fe0
 8009c60:	08013f40 	.word	0x08013f40
 8009c64:	08014034 	.word	0x08014034
 8009c68:	08013f5c 	.word	0x08013f5c
 8009c6c:	080140b0 	.word	0x080140b0
 8009c70:	08013f9c 	.word	0x08013f9c
 8009c74:	08014278 	.word	0x08014278
 8009c78:	200001e4 	.word	0x200001e4
 8009c7c:	080140fc 	.word	0x080140fc
 8009c80:	08014138 	.word	0x08014138
 8009c84:	08013fac 	.word	0x08013fac
 8009c88:	08013ff8 	.word	0x08013ff8
 8009c8c:	08013f90 	.word	0x08013f90
 8009c90:	080141b8 	.word	0x080141b8
 8009c94:	08013f68 	.word	0x08013f68
 8009c98:	080141f0 	.word	0x080141f0
 8009c9c:	0801422c 	.word	0x0801422c
 8009ca0:	080142c4 	.word	0x080142c4
 8009ca4:	08014338 	.word	0x08014338

08009ca8 <acc_cpd_linear_sweep_load_program>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	b089      	sub	sp, #36	; 0x24
 8009cae:	460e      	mov	r6, r1
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	a907      	add	r1, sp, #28
 8009cb4:	9004      	str	r0, [sp, #16]
 8009cb6:	f7fe fe93 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 8009cba:	9d07      	ldr	r5, [sp, #28]
 8009cbc:	49c8      	ldr	r1, [pc, #800]	; (8009fe0 <acc_cpd_linear_sweep_load_program+0x338>)
 8009cbe:	f640 5238 	movw	r2, #3384	; 0xd38
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f002 fa58 	bl	800c178 <memcpy>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	49c6      	ldr	r1, [pc, #792]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ccc:	4628      	mov	r0, r5
 8009cce:	2241      	movs	r2, #65	; 0x41
 8009cd0:	f001 f8ba 	bl	800ae48 <acc_confprogram_patch>
 8009cd4:	6873      	ldr	r3, [r6, #4]
 8009cd6:	49c3      	ldr	r1, [pc, #780]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009cd8:	4628      	mov	r0, r5
 8009cda:	223f      	movs	r2, #63	; 0x3f
 8009cdc:	f001 f8b4 	bl	800ae48 <acc_confprogram_patch>
 8009ce0:	68b3      	ldr	r3, [r6, #8]
 8009ce2:	49c0      	ldr	r1, [pc, #768]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	2240      	movs	r2, #64	; 0x40
 8009ce8:	f001 f8ae 	bl	800ae48 <acc_confprogram_patch>
 8009cec:	89b3      	ldrh	r3, [r6, #12]
 8009cee:	49bd      	ldr	r1, [pc, #756]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	223d      	movs	r2, #61	; 0x3d
 8009cf4:	f001 f8a8 	bl	800ae48 <acc_confprogram_patch>
 8009cf8:	6933      	ldr	r3, [r6, #16]
 8009cfa:	49ba      	ldr	r1, [pc, #744]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	2227      	movs	r2, #39	; 0x27
 8009d00:	f001 f8a2 	bl	800ae48 <acc_confprogram_patch>
 8009d04:	6973      	ldr	r3, [r6, #20]
 8009d06:	49b7      	ldr	r1, [pc, #732]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d08:	4628      	mov	r0, r5
 8009d0a:	2251      	movs	r2, #81	; 0x51
 8009d0c:	f001 f89c 	bl	800ae48 <acc_confprogram_patch>
 8009d10:	69b3      	ldr	r3, [r6, #24]
 8009d12:	49b4      	ldr	r1, [pc, #720]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d14:	4628      	mov	r0, r5
 8009d16:	222b      	movs	r2, #43	; 0x2b
 8009d18:	f001 f896 	bl	800ae48 <acc_confprogram_patch>
 8009d1c:	69f3      	ldr	r3, [r6, #28]
 8009d1e:	49b1      	ldr	r1, [pc, #708]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d20:	4628      	mov	r0, r5
 8009d22:	2266      	movs	r2, #102	; 0x66
 8009d24:	f001 f890 	bl	800ae48 <acc_confprogram_patch>
 8009d28:	6a33      	ldr	r3, [r6, #32]
 8009d2a:	49ae      	ldr	r1, [pc, #696]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	225a      	movs	r2, #90	; 0x5a
 8009d30:	f001 f88a 	bl	800ae48 <acc_confprogram_patch>
 8009d34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d36:	49ab      	ldr	r1, [pc, #684]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d38:	4628      	mov	r0, r5
 8009d3a:	225b      	movs	r2, #91	; 0x5b
 8009d3c:	f001 f884 	bl	800ae48 <acc_confprogram_patch>
 8009d40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009d42:	49a8      	ldr	r1, [pc, #672]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d44:	4628      	mov	r0, r5
 8009d46:	2218      	movs	r2, #24
 8009d48:	f001 f87e 	bl	800ae48 <acc_confprogram_patch>
 8009d4c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009d4e:	49a5      	ldr	r1, [pc, #660]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d50:	4628      	mov	r0, r5
 8009d52:	2219      	movs	r2, #25
 8009d54:	f001 f878 	bl	800ae48 <acc_confprogram_patch>
 8009d58:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009d5a:	49a2      	ldr	r1, [pc, #648]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	221a      	movs	r2, #26
 8009d60:	f001 f872 	bl	800ae48 <acc_confprogram_patch>
 8009d64:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009d66:	499f      	ldr	r1, [pc, #636]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d68:	4628      	mov	r0, r5
 8009d6a:	221b      	movs	r2, #27
 8009d6c:	f001 f86c 	bl	800ae48 <acc_confprogram_patch>
 8009d70:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009d72:	499c      	ldr	r1, [pc, #624]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d74:	4628      	mov	r0, r5
 8009d76:	221c      	movs	r2, #28
 8009d78:	f001 f866 	bl	800ae48 <acc_confprogram_patch>
 8009d7c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8009d7e:	4999      	ldr	r1, [pc, #612]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d80:	4628      	mov	r0, r5
 8009d82:	221d      	movs	r2, #29
 8009d84:	f001 f860 	bl	800ae48 <acc_confprogram_patch>
 8009d88:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8009d8a:	4996      	ldr	r1, [pc, #600]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	2245      	movs	r2, #69	; 0x45
 8009d90:	f001 f85a 	bl	800ae48 <acc_confprogram_patch>
 8009d94:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009d96:	4993      	ldr	r1, [pc, #588]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009d98:	4628      	mov	r0, r5
 8009d9a:	2246      	movs	r2, #70	; 0x46
 8009d9c:	f001 f854 	bl	800ae48 <acc_confprogram_patch>
 8009da0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8009da2:	4990      	ldr	r1, [pc, #576]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009da4:	4628      	mov	r0, r5
 8009da6:	2247      	movs	r2, #71	; 0x47
 8009da8:	f001 f84e 	bl	800ae48 <acc_confprogram_patch>
 8009dac:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8009dae:	498d      	ldr	r1, [pc, #564]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009db0:	4628      	mov	r0, r5
 8009db2:	225c      	movs	r2, #92	; 0x5c
 8009db4:	f001 f848 	bl	800ae48 <acc_confprogram_patch>
 8009db8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8009dba:	498a      	ldr	r1, [pc, #552]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	2274      	movs	r2, #116	; 0x74
 8009dc0:	f001 f842 	bl	800ae48 <acc_confprogram_patch>
 8009dc4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009dc6:	4987      	ldr	r1, [pc, #540]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009dc8:	4628      	mov	r0, r5
 8009dca:	2253      	movs	r2, #83	; 0x53
 8009dcc:	f001 f83c 	bl	800ae48 <acc_confprogram_patch>
 8009dd0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8009dd2:	4984      	ldr	r1, [pc, #528]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	2254      	movs	r2, #84	; 0x54
 8009dd8:	f001 f836 	bl	800ae48 <acc_confprogram_patch>
 8009ddc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8009dde:	4981      	ldr	r1, [pc, #516]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009de0:	4628      	mov	r0, r5
 8009de2:	2233      	movs	r2, #51	; 0x33
 8009de4:	f001 f830 	bl	800ae48 <acc_confprogram_patch>
 8009de8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8009dea:	497e      	ldr	r1, [pc, #504]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009dec:	4628      	mov	r0, r5
 8009dee:	2234      	movs	r2, #52	; 0x34
 8009df0:	f001 f82a 	bl	800ae48 <acc_confprogram_patch>
 8009df4:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8009df6:	497b      	ldr	r1, [pc, #492]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009df8:	4628      	mov	r0, r5
 8009dfa:	2263      	movs	r2, #99	; 0x63
 8009dfc:	f001 f824 	bl	800ae48 <acc_confprogram_patch>
 8009e00:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8009e02:	4978      	ldr	r1, [pc, #480]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e04:	4628      	mov	r0, r5
 8009e06:	2244      	movs	r2, #68	; 0x44
 8009e08:	f001 f81e 	bl	800ae48 <acc_confprogram_patch>
 8009e0c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8009e0e:	4975      	ldr	r1, [pc, #468]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e10:	4628      	mov	r0, r5
 8009e12:	222d      	movs	r2, #45	; 0x2d
 8009e14:	f001 f818 	bl	800ae48 <acc_confprogram_patch>
 8009e18:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 8103 	bne.w	800a026 <acc_cpd_linear_sweep_load_program+0x37e>
 8009e20:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009e22:	4970      	ldr	r1, [pc, #448]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e24:	2242      	movs	r2, #66	; 0x42
 8009e26:	4628      	mov	r0, r5
 8009e28:	f001 f80e 	bl	800ae48 <acc_confprogram_patch>
 8009e2c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009e2e:	496d      	ldr	r1, [pc, #436]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e30:	2267      	movs	r2, #103	; 0x67
 8009e32:	4628      	mov	r0, r5
 8009e34:	f001 f808 	bl	800ae48 <acc_confprogram_patch>
 8009e38:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 8009e3a:	496a      	ldr	r1, [pc, #424]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e3c:	2236      	movs	r2, #54	; 0x36
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f001 f802 	bl	800ae48 <acc_confprogram_patch>
 8009e44:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8009e46:	4967      	ldr	r1, [pc, #412]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e48:	2235      	movs	r2, #53	; 0x35
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f000 fffc 	bl	800ae48 <acc_confprogram_patch>
 8009e50:	f8d6 4080 	ldr.w	r4, [r6, #128]	; 0x80
 8009e54:	b2a3      	uxth	r3, r4
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	f200 80d6 	bhi.w	800a008 <acc_cpd_linear_sweep_load_program+0x360>
 8009e5c:	461c      	mov	r4, r3
 8009e5e:	2700      	movs	r7, #0
 8009e60:	4623      	mov	r3, r4
 8009e62:	4628      	mov	r0, r5
 8009e64:	225d      	movs	r2, #93	; 0x5d
 8009e66:	495f      	ldr	r1, [pc, #380]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e68:	f000 ffee 	bl	800ae48 <acc_confprogram_patch>
 8009e6c:	4623      	mov	r3, r4
 8009e6e:	2248      	movs	r2, #72	; 0x48
 8009e70:	4628      	mov	r0, r5
 8009e72:	495c      	ldr	r1, [pc, #368]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e74:	f000 ffe8 	bl	800ae48 <acc_confprogram_patch>
 8009e78:	215f      	movs	r1, #95	; 0x5f
 8009e7a:	485a      	ldr	r0, [pc, #360]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e7c:	f001 f8d2 	bl	800b024 <acc_confprogram_get_default_value>
 8009e80:	2161      	movs	r1, #97	; 0x61
 8009e82:	9005      	str	r0, [sp, #20]
 8009e84:	4857      	ldr	r0, [pc, #348]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e86:	f001 f8cd 	bl	800b024 <acc_confprogram_get_default_value>
 8009e8a:	2160      	movs	r1, #96	; 0x60
 8009e8c:	4683      	mov	fp, r0
 8009e8e:	4855      	ldr	r0, [pc, #340]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e90:	f001 f8c8 	bl	800b024 <acc_confprogram_get_default_value>
 8009e94:	214a      	movs	r1, #74	; 0x4a
 8009e96:	4682      	mov	sl, r0
 8009e98:	4852      	ldr	r0, [pc, #328]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009e9a:	f001 f8c3 	bl	800b024 <acc_confprogram_get_default_value>
 8009e9e:	214c      	movs	r1, #76	; 0x4c
 8009ea0:	4681      	mov	r9, r0
 8009ea2:	4850      	ldr	r0, [pc, #320]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ea4:	f001 f8be 	bl	800b024 <acc_confprogram_get_default_value>
 8009ea8:	214b      	movs	r1, #75	; 0x4b
 8009eaa:	4680      	mov	r8, r0
 8009eac:	484d      	ldr	r0, [pc, #308]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009eae:	f001 f8b9 	bl	800b024 <acc_confprogram_get_default_value>
 8009eb2:	213b      	movs	r1, #59	; 0x3b
 8009eb4:	9001      	str	r0, [sp, #4]
 8009eb6:	484b      	ldr	r0, [pc, #300]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009eb8:	f001 f8b4 	bl	800b024 <acc_confprogram_get_default_value>
 8009ebc:	2137      	movs	r1, #55	; 0x37
 8009ebe:	9002      	str	r0, [sp, #8]
 8009ec0:	4848      	ldr	r0, [pc, #288]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ec2:	f001 f8af 	bl	800b024 <acc_confprogram_get_default_value>
 8009ec6:	2123      	movs	r1, #35	; 0x23
 8009ec8:	9003      	str	r0, [sp, #12]
 8009eca:	4846      	ldr	r0, [pc, #280]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ecc:	f001 f8aa 	bl	800b024 <acc_confprogram_get_default_value>
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	4944      	ldr	r1, [pc, #272]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	433b      	orrs	r3, r7
 8009ed8:	4628      	mov	r0, r5
 8009eda:	225f      	movs	r2, #95	; 0x5f
 8009edc:	f000 ffb4 	bl	800ae48 <acc_confprogram_patch>
 8009ee0:	ea47 030b 	orr.w	r3, r7, fp
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	2261      	movs	r2, #97	; 0x61
 8009ee8:	493e      	ldr	r1, [pc, #248]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009eea:	f000 ffad 	bl	800ae48 <acc_confprogram_patch>
 8009eee:	ea47 030a 	orr.w	r3, r7, sl
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	2260      	movs	r2, #96	; 0x60
 8009ef6:	493b      	ldr	r1, [pc, #236]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009ef8:	f000 ffa6 	bl	800ae48 <acc_confprogram_patch>
 8009efc:	ea47 0309 	orr.w	r3, r7, r9
 8009f00:	4628      	mov	r0, r5
 8009f02:	224a      	movs	r2, #74	; 0x4a
 8009f04:	4937      	ldr	r1, [pc, #220]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f06:	f000 ff9f 	bl	800ae48 <acc_confprogram_patch>
 8009f0a:	ea47 0308 	orr.w	r3, r7, r8
 8009f0e:	4628      	mov	r0, r5
 8009f10:	224c      	movs	r2, #76	; 0x4c
 8009f12:	4934      	ldr	r1, [pc, #208]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f14:	f000 ff98 	bl	800ae48 <acc_confprogram_patch>
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	4932      	ldr	r1, [pc, #200]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f1c:	433b      	orrs	r3, r7
 8009f1e:	4628      	mov	r0, r5
 8009f20:	224b      	movs	r2, #75	; 0x4b
 8009f22:	f000 ff91 	bl	800ae48 <acc_confprogram_patch>
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	492e      	ldr	r1, [pc, #184]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f2a:	433b      	orrs	r3, r7
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	223b      	movs	r2, #59	; 0x3b
 8009f30:	f000 ff8a 	bl	800ae48 <acc_confprogram_patch>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	492b      	ldr	r1, [pc, #172]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f38:	433b      	orrs	r3, r7
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	2237      	movs	r2, #55	; 0x37
 8009f3e:	f000 ff83 	bl	800ae48 <acc_confprogram_patch>
 8009f42:	ea47 0304 	orr.w	r3, r7, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	2223      	movs	r2, #35	; 0x23
 8009f4a:	4926      	ldr	r1, [pc, #152]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f4c:	f000 ff7c 	bl	800ae48 <acc_confprogram_patch>
 8009f50:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8009f54:	4923      	ldr	r1, [pc, #140]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f56:	4628      	mov	r0, r5
 8009f58:	2255      	movs	r2, #85	; 0x55
 8009f5a:	f000 ff75 	bl	800ae48 <acc_confprogram_patch>
 8009f5e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8009f62:	4920      	ldr	r1, [pc, #128]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f64:	4628      	mov	r0, r5
 8009f66:	2256      	movs	r2, #86	; 0x56
 8009f68:	f000 ff6e 	bl	800ae48 <acc_confprogram_patch>
 8009f6c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8009f70:	491c      	ldr	r1, [pc, #112]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f72:	4628      	mov	r0, r5
 8009f74:	223c      	movs	r2, #60	; 0x3c
 8009f76:	f000 ff67 	bl	800ae48 <acc_confprogram_patch>
 8009f7a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8009f7e:	4919      	ldr	r1, [pc, #100]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f80:	4628      	mov	r0, r5
 8009f82:	2225      	movs	r2, #37	; 0x25
 8009f84:	f000 ff60 	bl	800ae48 <acc_confprogram_patch>
 8009f88:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8009f8c:	4915      	ldr	r1, [pc, #84]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f8e:	4628      	mov	r0, r5
 8009f90:	2226      	movs	r2, #38	; 0x26
 8009f92:	f000 ff59 	bl	800ae48 <acc_confprogram_patch>
 8009f96:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8009f9a:	4912      	ldr	r1, [pc, #72]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009f9c:	222a      	movs	r2, #42	; 0x2a
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 ff52 	bl	800ae48 <acc_confprogram_patch>
 8009fa4:	214d      	movs	r1, #77	; 0x4d
 8009fa6:	480f      	ldr	r0, [pc, #60]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009fa8:	f001 f83c 	bl	800b024 <acc_confprogram_get_default_value>
 8009fac:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8009fb0:	490c      	ldr	r1, [pc, #48]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009fb2:	4403      	add	r3, r0
 8009fb4:	224d      	movs	r2, #77	; 0x4d
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 ff46 	bl	800ae48 <acc_confprogram_patch>
 8009fbc:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
 8009fc0:	4908      	ldr	r1, [pc, #32]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009fc2:	1e63      	subs	r3, r4, #1
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	f000 ff3e 	bl	800ae48 <acc_confprogram_patch>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	2252      	movs	r2, #82	; 0x52
 8009fd0:	4904      	ldr	r1, [pc, #16]	; (8009fe4 <acc_cpd_linear_sweep_load_program+0x33c>)
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	fbb3 f3f4 	udiv	r3, r3, r4
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	f000 ff35 	bl	800ae48 <acc_confprogram_patch>
 8009fde:	e003      	b.n	8009fe8 <acc_cpd_linear_sweep_load_program+0x340>
 8009fe0:	0800ede8 	.word	0x0800ede8
 8009fe4:	08015838 	.word	0x08015838
 8009fe8:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8009fec:	4932      	ldr	r1, [pc, #200]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 8009fee:	4628      	mov	r0, r5
 8009ff0:	2250      	movs	r2, #80	; 0x50
 8009ff2:	f000 ff29 	bl	800ae48 <acc_confprogram_patch>
 8009ff6:	9804      	ldr	r0, [sp, #16]
 8009ff8:	f640 5238 	movw	r2, #3384	; 0xd38
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f7fe fcf1 	bl	80089e4 <acc_sensor_protocol_load_program>
 800a002:	b009      	add	sp, #36	; 0x24
 800a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a008:	2302      	movs	r3, #2
 800a00a:	2258      	movs	r2, #88	; 0x58
 800a00c:	492a      	ldr	r1, [pc, #168]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a00e:	4628      	mov	r0, r5
 800a010:	b2a4      	uxth	r4, r4
 800a012:	f000 ff19 	bl	800ae48 <acc_confprogram_patch>
 800a016:	3c08      	subs	r4, #8
 800a018:	23ff      	movs	r3, #255	; 0xff
 800a01a:	fa03 f404 	lsl.w	r4, r3, r4
 800a01e:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 800a022:	2408      	movs	r4, #8
 800a024:	e71c      	b.n	8009e60 <acc_cpd_linear_sweep_load_program+0x1b8>
 800a026:	4628      	mov	r0, r5
 800a028:	2301      	movs	r3, #1
 800a02a:	220f      	movs	r2, #15
 800a02c:	4922      	ldr	r1, [pc, #136]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a02e:	f000 ff0b 	bl	800ae48 <acc_confprogram_patch>
 800a032:	4628      	mov	r0, r5
 800a034:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a038:	2211      	movs	r2, #17
 800a03a:	491f      	ldr	r1, [pc, #124]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a03c:	f000 ff04 	bl	800ae48 <acc_confprogram_patch>
 800a040:	4628      	mov	r0, r5
 800a042:	233f      	movs	r3, #63	; 0x3f
 800a044:	2213      	movs	r2, #19
 800a046:	491c      	ldr	r1, [pc, #112]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a048:	f000 fefe 	bl	800ae48 <acc_confprogram_patch>
 800a04c:	4628      	mov	r0, r5
 800a04e:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a052:	2210      	movs	r2, #16
 800a054:	4918      	ldr	r1, [pc, #96]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a056:	f000 fef7 	bl	800ae48 <acc_confprogram_patch>
 800a05a:	4628      	mov	r0, r5
 800a05c:	2300      	movs	r3, #0
 800a05e:	2212      	movs	r2, #18
 800a060:	4915      	ldr	r1, [pc, #84]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a062:	f000 fef1 	bl	800ae48 <acc_confprogram_patch>
 800a066:	4628      	mov	r0, r5
 800a068:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800a06c:	2214      	movs	r2, #20
 800a06e:	4912      	ldr	r1, [pc, #72]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a070:	f000 feea 	bl	800ae48 <acc_confprogram_patch>
 800a074:	4628      	mov	r0, r5
 800a076:	233f      	movs	r3, #63	; 0x3f
 800a078:	2215      	movs	r2, #21
 800a07a:	490f      	ldr	r1, [pc, #60]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a07c:	f000 fee4 	bl	800ae48 <acc_confprogram_patch>
 800a080:	4628      	mov	r0, r5
 800a082:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800a086:	220d      	movs	r2, #13
 800a088:	490b      	ldr	r1, [pc, #44]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a08a:	f000 fedd 	bl	800ae48 <acc_confprogram_patch>
 800a08e:	4628      	mov	r0, r5
 800a090:	233f      	movs	r3, #63	; 0x3f
 800a092:	220e      	movs	r2, #14
 800a094:	4908      	ldr	r1, [pc, #32]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a096:	f000 fed7 	bl	800ae48 <acc_confprogram_patch>
 800a09a:	4628      	mov	r0, r5
 800a09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0a0:	2216      	movs	r2, #22
 800a0a2:	4905      	ldr	r1, [pc, #20]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a0a4:	f000 fed0 	bl	800ae48 <acc_confprogram_patch>
 800a0a8:	233f      	movs	r3, #63	; 0x3f
 800a0aa:	2217      	movs	r2, #23
 800a0ac:	4902      	ldr	r1, [pc, #8]	; (800a0b8 <acc_cpd_linear_sweep_load_program+0x410>)
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f000 feca 	bl	800ae48 <acc_confprogram_patch>
 800a0b4:	e6b4      	b.n	8009e20 <acc_cpd_linear_sweep_load_program+0x178>
 800a0b6:	bf00      	nop
 800a0b8:	08015838 	.word	0x08015838

0800a0bc <acc_cpd_linear_sweep_run_program>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	4604      	mov	r4, r0
 800a0c0:	f7fe fcfa 	bl	8008ab8 <acc_sensor_protocol_clear_resources>
 800a0c4:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <acc_cpd_linear_sweep_run_program+0x18>)
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f8b3 1082 	ldrh.w	r1, [r3, #130]	; 0x82
 800a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d0:	f7fe bcf6 	b.w	8008ac0 <acc_sensor_protocol_run_program>
 800a0d4:	0800ed58 	.word	0x0800ed58

0800a0d8 <acc_cpd_linear_sweep_update_program>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	460c      	mov	r4, r1
 800a0dc:	b082      	sub	sp, #8
 800a0de:	4605      	mov	r5, r0
 800a0e0:	214d      	movs	r1, #77	; 0x4d
 800a0e2:	4814      	ldr	r0, [pc, #80]	; (800a134 <acc_cpd_linear_sweep_update_program+0x5c>)
 800a0e4:	f000 ff9e 	bl	800b024 <acc_confprogram_get_default_value>
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	6826      	ldr	r6, [r4, #0]
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <acc_cpd_linear_sweep_update_program+0x5c>)
 800a0ee:	4418      	add	r0, r3
 800a0f0:	9000      	str	r0, [sp, #0]
 800a0f2:	234d      	movs	r3, #77	; 0x4d
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f000 ff12 	bl	800af20 <acc_confprogram_live_patch>
 800a0fc:	b158      	cbz	r0, 800a116 <acc_cpd_linear_sweep_update_program+0x3e>
 800a0fe:	9600      	str	r6, [sp, #0]
 800a100:	4628      	mov	r0, r5
 800a102:	232a      	movs	r3, #42	; 0x2a
 800a104:	4a0b      	ldr	r2, [pc, #44]	; (800a134 <acc_cpd_linear_sweep_update_program+0x5c>)
 800a106:	2100      	movs	r1, #0
 800a108:	f000 ff0a 	bl	800af20 <acc_confprogram_live_patch>
 800a10c:	4604      	mov	r4, r0
 800a10e:	b150      	cbz	r0, 800a126 <acc_cpd_linear_sweep_update_program+0x4e>
 800a110:	4620      	mov	r0, r4
 800a112:	b002      	add	sp, #8
 800a114:	bd70      	pop	{r4, r5, r6, pc}
 800a116:	4a08      	ldr	r2, [pc, #32]	; (800a138 <acc_cpd_linear_sweep_update_program+0x60>)
 800a118:	4908      	ldr	r1, [pc, #32]	; (800a13c <acc_cpd_linear_sweep_update_program+0x64>)
 800a11a:	4604      	mov	r4, r0
 800a11c:	f7fc fddc 	bl	8006cd8 <acc_log_rss>
 800a120:	4620      	mov	r0, r4
 800a122:	b002      	add	sp, #8
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	4a06      	ldr	r2, [pc, #24]	; (800a140 <acc_cpd_linear_sweep_update_program+0x68>)
 800a128:	4904      	ldr	r1, [pc, #16]	; (800a13c <acc_cpd_linear_sweep_update_program+0x64>)
 800a12a:	f7fc fdd5 	bl	8006cd8 <acc_log_rss>
 800a12e:	4620      	mov	r0, r4
 800a130:	b002      	add	sp, #8
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	08015838 	.word	0x08015838
 800a138:	08014388 	.word	0x08014388
 800a13c:	080143b4 	.word	0x080143b4
 800a140:	080143c8 	.word	0x080143c8

0800a144 <acc_cpd_linear_sweep_transfer_data>:
 800a144:	b500      	push	{lr}
 800a146:	b083      	sub	sp, #12
 800a148:	aa02      	add	r2, sp, #8
 800a14a:	f842 1d08 	str.w	r1, [r2, #-8]!
 800a14e:	2106      	movs	r1, #6
 800a150:	f7fe fd4e 	bl	8008bf0 <acc_sensor_protocol_get_indication_payload>
 800a154:	b003      	add	sp, #12
 800a156:	f85d fb04 	ldr.w	pc, [sp], #4
 800a15a:	bf00      	nop

0800a15c <acc_cpd_linear_sweep_sensor_continue>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	f7fe fdcd 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 800a162:	4604      	mov	r4, r0
 800a164:	b920      	cbnz	r0, 800a170 <acc_cpd_linear_sweep_sensor_continue+0x14>
 800a166:	4b03      	ldr	r3, [pc, #12]	; (800a174 <acc_cpd_linear_sweep_sensor_continue+0x18>)
 800a168:	4a03      	ldr	r2, [pc, #12]	; (800a178 <acc_cpd_linear_sweep_sensor_continue+0x1c>)
 800a16a:	4904      	ldr	r1, [pc, #16]	; (800a17c <acc_cpd_linear_sweep_sensor_continue+0x20>)
 800a16c:	f7fc fdb4 	bl	8006cd8 <acc_log_rss>
 800a170:	4620      	mov	r0, r4
 800a172:	bd10      	pop	{r4, pc}
 800a174:	08014360 	.word	0x08014360
 800a178:	08013b50 	.word	0x08013b50
 800a17c:	080143b4 	.word	0x080143b4

0800a180 <acc_cpd_linear_sweep_stop>:
 800a180:	f7fe be06 	b.w	8008d90 <acc_sensor_protocol_stop>

0800a184 <acc_cpd_linear_sweep_low_power_stop>:
 800a184:	f7fe be78 	b.w	8008e78 <acc_sensor_protocol_low_power_stop>

0800a188 <acc_cpd_pll_divisors_calculate>:
 800a188:	ed90 6a00 	vldr	s12, [r0]
 800a18c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a2ac <acc_cpd_pll_divisors_calculate+0x124>
 800a190:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a2b0 <acc_cpd_pll_divisors_calculate+0x128>
 800a194:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a2b4 <acc_cpd_pll_divisors_calculate+0x12c>
 800a198:	4a47      	ldr	r2, [pc, #284]	; (800a2b8 <acc_cpd_pll_divisors_calculate+0x130>)
 800a19a:	eddf 4a48 	vldr	s9, [pc, #288]	; 800a2bc <acc_cpd_pll_divisors_calculate+0x134>
 800a19e:	ed9f 5a48 	vldr	s10, [pc, #288]	; 800a2c0 <acc_cpd_pll_divisors_calculate+0x138>
 800a1a2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a1a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a1aa:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a1ae:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a1b2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a1b6:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a1ba:	ee17 3a10 	vmov	r3, s14
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	fba2 0203 	umull	r0, r2, r2, r3
 800a1c4:	0892      	lsrs	r2, r2, #2
 800a1c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ee07 3a10 	vmov	s14, r3
 800a1d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a1d6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a1da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a1de:	ee16 3a90 	vmov	r3, s13
 800a1e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	ee17 0a10 	vmov	r0, s14
 800a1ec:	b280      	uxth	r0, r0
 800a1ee:	ee07 0a90 	vmov	s15, r0
 800a1f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f6:	f1a3 0210 	sub.w	r2, r3, #16
 800a1fa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a1fe:	b292      	uxth	r2, r2
 800a200:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a204:	2aef      	cmp	r2, #239	; 0xef
 800a206:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a20e:	ee17 0a90 	vmov	r0, s15
 800a212:	8108      	strh	r0, [r1, #8]
 800a214:	d92b      	bls.n	800a26e <acc_cpd_pll_divisors_calculate+0xe6>
 800a216:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a2c4 <acc_cpd_pll_divisors_calculate+0x13c>
 800a222:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a2c8 <acc_cpd_pll_divisors_calculate+0x140>
 800a226:	4a29      	ldr	r2, [pc, #164]	; (800a2cc <acc_cpd_pll_divisors_calculate+0x144>)
 800a228:	4929      	ldr	r1, [pc, #164]	; (800a2d0 <acc_cpd_pll_divisors_calculate+0x148>)
 800a22a:	bf48      	it	mi
 800a22c:	eeb1 6a46 	vnegmi.f32	s12, s12
 800a230:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a234:	b500      	push	{lr}
 800a236:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800a23a:	b085      	sub	sp, #20
 800a23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a240:	bf48      	it	mi
 800a242:	232d      	movmi	r3, #45	; 0x2d
 800a244:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a248:	bf58      	it	pl
 800a24a:	2320      	movpl	r3, #32
 800a24c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a256:	4b1f      	ldr	r3, [pc, #124]	; (800a2d4 <acc_cpd_pll_divisors_calculate+0x14c>)
 800a258:	edcd 7a01 	vstr	s15, [sp, #4]
 800a25c:	2000      	movs	r0, #0
 800a25e:	ed8d 6a02 	vstr	s12, [sp, #8]
 800a262:	f7fc fd39 	bl	8006cd8 <acc_log_rss>
 800a266:	2000      	movs	r0, #0
 800a268:	b005      	add	sp, #20
 800a26a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a26e:	2b3f      	cmp	r3, #63	; 0x3f
 800a270:	d911      	bls.n	800a296 <acc_cpd_pll_divisors_calculate+0x10e>
 800a272:	2bbf      	cmp	r3, #191	; 0xbf
 800a274:	bf98      	it	ls
 800a276:	f1a3 0040 	subls.w	r0, r3, #64	; 0x40
 800a27a:	f04f 0201 	mov.w	r2, #1
 800a27e:	bf8c      	ite	hi
 800a280:	08d8      	lsrhi	r0, r3, #3
 800a282:	f3c0 00cf 	ubfxls	r0, r0, #3, #16
 800a286:	804a      	strh	r2, [r1, #2]
 800a288:	f003 0207 	and.w	r2, r3, #7
 800a28c:	8088      	strh	r0, [r1, #4]
 800a28e:	80ca      	strh	r2, [r1, #6]
 800a290:	800b      	strh	r3, [r1, #0]
 800a292:	2001      	movs	r0, #1
 800a294:	4770      	bx	lr
 800a296:	2000      	movs	r0, #0
 800a298:	2b2f      	cmp	r3, #47	; 0x2f
 800a29a:	bf88      	it	hi
 800a29c:	461a      	movhi	r2, r3
 800a29e:	8048      	strh	r0, [r1, #2]
 800a2a0:	80c8      	strh	r0, [r1, #6]
 800a2a2:	808a      	strh	r2, [r1, #4]
 800a2a4:	800b      	strh	r3, [r1, #0]
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	4b989680 	.word	0x4b989680
 800a2b0:	43a28000 	.word	0x43a28000
 800a2b4:	4f1502f9 	.word	0x4f1502f9
 800a2b8:	cccccccd 	.word	0xcccccccd
 800a2bc:	3e4ccccd 	.word	0x3e4ccccd
 800a2c0:	427c0000 	.word	0x427c0000
 800a2c4:	350637bd 	.word	0x350637bd
 800a2c8:	49742400 	.word	0x49742400
 800a2cc:	08014418 	.word	0x08014418
 800a2d0:	08014458 	.word	0x08014458
 800a2d4:	080143f8 	.word	0x080143f8

0800a2d8 <acc_cpd_rx_fine_dip_calibration>:
 800a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2da:	6806      	ldr	r6, [r0, #0]
 800a2dc:	b08b      	sub	sp, #44	; 0x2c
 800a2de:	4604      	mov	r4, r0
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	460f      	mov	r7, r1
 800a2e6:	a908      	add	r1, sp, #32
 800a2e8:	f7fe fb7a 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 800a2ec:	9d08      	ldr	r5, [sp, #32]
 800a2ee:	496c      	ldr	r1, [pc, #432]	; (800a4a0 <acc_cpd_rx_fine_dip_calibration+0x1c8>)
 800a2f0:	f640 523c 	movw	r2, #3388	; 0xd3c
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f001 ff3f 	bl	800c178 <memcpy>
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	4969      	ldr	r1, [pc, #420]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a2fe:	4628      	mov	r0, r5
 800a300:	221d      	movs	r2, #29
 800a302:	f000 fda1 	bl	800ae48 <acc_confprogram_patch>
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	4966      	ldr	r1, [pc, #408]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a30a:	4628      	mov	r0, r5
 800a30c:	221b      	movs	r2, #27
 800a30e:	f000 fd9b 	bl	800ae48 <acc_confprogram_patch>
 800a312:	68e3      	ldr	r3, [r4, #12]
 800a314:	4963      	ldr	r1, [pc, #396]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a316:	4628      	mov	r0, r5
 800a318:	221c      	movs	r2, #28
 800a31a:	f000 fd95 	bl	800ae48 <acc_confprogram_patch>
 800a31e:	8a23      	ldrh	r3, [r4, #16]
 800a320:	4960      	ldr	r1, [pc, #384]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a322:	4628      	mov	r0, r5
 800a324:	2219      	movs	r2, #25
 800a326:	f000 fd8f 	bl	800ae48 <acc_confprogram_patch>
 800a32a:	69e3      	ldr	r3, [r4, #28]
 800a32c:	495d      	ldr	r1, [pc, #372]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a32e:	4628      	mov	r0, r5
 800a330:	220f      	movs	r2, #15
 800a332:	f000 fd89 	bl	800ae48 <acc_confprogram_patch>
 800a336:	69a3      	ldr	r3, [r4, #24]
 800a338:	495a      	ldr	r1, [pc, #360]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a33a:	4628      	mov	r0, r5
 800a33c:	2211      	movs	r2, #17
 800a33e:	f000 fd83 	bl	800ae48 <acc_confprogram_patch>
 800a342:	4628      	mov	r0, r5
 800a344:	4957      	ldr	r1, [pc, #348]	; (800a4a4 <acc_cpd_rx_fine_dip_calibration+0x1cc>)
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	2230      	movs	r2, #48	; 0x30
 800a34a:	f000 fd7d 	bl	800ae48 <acc_confprogram_patch>
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	f640 523c 	movw	r2, #3388	; 0xd3c
 800a354:	2100      	movs	r1, #0
 800a356:	f7fe fb45 	bl	80089e4 <acc_sensor_protocol_load_program>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d043      	beq.n	800a3e6 <acc_cpd_rx_fine_dip_calibration+0x10e>
 800a35e:	4b52      	ldr	r3, [pc, #328]	; (800a4a8 <acc_cpd_rx_fine_dip_calibration+0x1d0>)
 800a360:	4630      	mov	r0, r6
 800a362:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800a364:	f7fe fbac 	bl	8008ac0 <acc_sensor_protocol_run_program>
 800a368:	4605      	mov	r5, r0
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d048      	beq.n	800a400 <acc_cpd_rx_fine_dip_calibration+0x128>
 800a36e:	aa06      	add	r2, sp, #24
 800a370:	494e      	ldr	r1, [pc, #312]	; (800a4ac <acc_cpd_rx_fine_dip_calibration+0x1d4>)
 800a372:	4630      	mov	r0, r6
 800a374:	f7fe fbe4 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 800a378:	4605      	mov	r5, r0
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d048      	beq.n	800a410 <acc_cpd_rx_fine_dip_calibration+0x138>
 800a37e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800a382:	2901      	cmp	r1, #1
 800a384:	d053      	beq.n	800a42e <acc_cpd_rx_fine_dip_calibration+0x156>
 800a386:	2908      	cmp	r1, #8
 800a388:	d148      	bne.n	800a41c <acc_cpd_rx_fine_dip_calibration+0x144>
 800a38a:	2319      	movs	r3, #25
 800a38c:	aa08      	add	r2, sp, #32
 800a38e:	4630      	mov	r0, r6
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	f7fe fc2d 	bl	8008bf0 <acc_sensor_protocol_get_indication_payload>
 800a396:	2800      	cmp	r0, #0
 800a398:	d05a      	beq.n	800a450 <acc_cpd_rx_fine_dip_calibration+0x178>
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7fe fcae 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d05b      	beq.n	800a45e <acc_cpd_rx_fine_dip_calibration+0x186>
 800a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a8:	463a      	mov	r2, r7
 800a3aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3ae:	f8d3 c000 	ldr.w	ip, [r3]
 800a3b2:	685e      	ldr	r6, [r3, #4]
 800a3b4:	6898      	ldr	r0, [r3, #8]
 800a3b6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a3ba:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a3be:	3310      	adds	r3, #16
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	f8c2 c000 	str.w	ip, [r2]
 800a3c6:	6056      	str	r6, [r2, #4]
 800a3c8:	6090      	str	r0, [r2, #8]
 800a3ca:	f102 0210 	add.w	r2, r2, #16
 800a3ce:	d1ee      	bne.n	800a3ae <acc_cpd_rx_fine_dip_calibration+0xd6>
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	4e37      	ldr	r6, [pc, #220]	; (800a4b0 <acc_cpd_rx_fine_dip_calibration+0x1d8>)
 800a3d4:	8013      	strh	r3, [r2, #0]
 800a3d6:	7833      	ldrb	r3, [r6, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d146      	bne.n	800a46a <acc_cpd_rx_fine_dip_calibration+0x192>
 800a3dc:	4638      	mov	r0, r7
 800a3de:	2119      	movs	r1, #25
 800a3e0:	f000 f91e 	bl	800a620 <acc_sensor_diagnostics_print_buffer_u16>
 800a3e4:	e009      	b.n	800a3fa <acc_cpd_rx_fine_dip_calibration+0x122>
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	4a32      	ldr	r2, [pc, #200]	; (800a4b4 <acc_cpd_rx_fine_dip_calibration+0x1dc>)
 800a3ea:	4933      	ldr	r1, [pc, #204]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a3ec:	f7fc fc74 	bl	8006cd8 <acc_log_rss>
 800a3f0:	4a32      	ldr	r2, [pc, #200]	; (800a4bc <acc_cpd_rx_fine_dip_calibration+0x1e4>)
 800a3f2:	4931      	ldr	r1, [pc, #196]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f7fc fc6f 	bl	8006cd8 <acc_log_rss>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	b00b      	add	sp, #44	; 0x2c
 800a3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a400:	4b2f      	ldr	r3, [pc, #188]	; (800a4c0 <acc_cpd_rx_fine_dip_calibration+0x1e8>)
 800a402:	4a30      	ldr	r2, [pc, #192]	; (800a4c4 <acc_cpd_rx_fine_dip_calibration+0x1ec>)
 800a404:	492c      	ldr	r1, [pc, #176]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a406:	f7fc fc67 	bl	8006cd8 <acc_log_rss>
 800a40a:	4628      	mov	r0, r5
 800a40c:	b00b      	add	sp, #44	; 0x2c
 800a40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a410:	4b2d      	ldr	r3, [pc, #180]	; (800a4c8 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800a412:	4a2e      	ldr	r2, [pc, #184]	; (800a4cc <acc_cpd_rx_fine_dip_calibration+0x1f4>)
 800a414:	4928      	ldr	r1, [pc, #160]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a416:	f7fc fc5f 	bl	8006cd8 <acc_log_rss>
 800a41a:	e7ee      	b.n	800a3fa <acc_cpd_rx_fine_dip_calibration+0x122>
 800a41c:	9100      	str	r1, [sp, #0]
 800a41e:	4b2a      	ldr	r3, [pc, #168]	; (800a4c8 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800a420:	4a2b      	ldr	r2, [pc, #172]	; (800a4d0 <acc_cpd_rx_fine_dip_calibration+0x1f8>)
 800a422:	4925      	ldr	r1, [pc, #148]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a424:	2000      	movs	r0, #0
 800a426:	f7fc fc57 	bl	8006cd8 <acc_log_rss>
 800a42a:	2500      	movs	r5, #0
 800a42c:	e7e5      	b.n	800a3fa <acc_cpd_rx_fine_dip_calibration+0x122>
 800a42e:	4630      	mov	r0, r6
 800a430:	f000 f9c8 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 800a434:	f89d 0019 	ldrb.w	r0, [sp, #25]
 800a438:	f7fe fd8e 	bl	8008f58 <acc_sensor_protocol_get_error_message>
 800a43c:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <acc_cpd_rx_fine_dip_calibration+0x1f0>)
 800a43e:	4a25      	ldr	r2, [pc, #148]	; (800a4d4 <acc_cpd_rx_fine_dip_calibration+0x1fc>)
 800a440:	491d      	ldr	r1, [pc, #116]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a442:	e9cd 6000 	strd	r6, r0, [sp]
 800a446:	2000      	movs	r0, #0
 800a448:	f7fc fc46 	bl	8006cd8 <acc_log_rss>
 800a44c:	2500      	movs	r5, #0
 800a44e:	e7d4      	b.n	800a3fa <acc_cpd_rx_fine_dip_calibration+0x122>
 800a450:	4b21      	ldr	r3, [pc, #132]	; (800a4d8 <acc_cpd_rx_fine_dip_calibration+0x200>)
 800a452:	4a22      	ldr	r2, [pc, #136]	; (800a4dc <acc_cpd_rx_fine_dip_calibration+0x204>)
 800a454:	4918      	ldr	r1, [pc, #96]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a456:	f7fc fc3f 	bl	8006cd8 <acc_log_rss>
 800a45a:	2500      	movs	r5, #0
 800a45c:	e7cd      	b.n	800a3fa <acc_cpd_rx_fine_dip_calibration+0x122>
 800a45e:	4b1e      	ldr	r3, [pc, #120]	; (800a4d8 <acc_cpd_rx_fine_dip_calibration+0x200>)
 800a460:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <acc_cpd_rx_fine_dip_calibration+0x208>)
 800a462:	4915      	ldr	r1, [pc, #84]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a464:	f7fc fc38 	bl	8006cd8 <acc_log_rss>
 800a468:	e7f7      	b.n	800a45a <acc_cpd_rx_fine_dip_calibration+0x182>
 800a46a:	68a2      	ldr	r2, [r4, #8]
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	e9d4 0c06 	ldrd	r0, ip, [r4, #24]
 800a472:	e9cd 2200 	strd	r2, r2, [sp]
 800a476:	6961      	ldr	r1, [r4, #20]
 800a478:	68e2      	ldr	r2, [r4, #12]
 800a47a:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800a47e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a482:	2002      	movs	r0, #2
 800a484:	4a17      	ldr	r2, [pc, #92]	; (800a4e4 <acc_cpd_rx_fine_dip_calibration+0x20c>)
 800a486:	490c      	ldr	r1, [pc, #48]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a488:	f7fc fc26 	bl	8006cd8 <acc_log_rss>
 800a48c:	7833      	ldrb	r3, [r6, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0a4      	beq.n	800a3dc <acc_cpd_rx_fine_dip_calibration+0x104>
 800a492:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <acc_cpd_rx_fine_dip_calibration+0x210>)
 800a494:	4908      	ldr	r1, [pc, #32]	; (800a4b8 <acc_cpd_rx_fine_dip_calibration+0x1e0>)
 800a496:	2002      	movs	r0, #2
 800a498:	f7fc fc1e 	bl	8006cd8 <acc_log_rss>
 800a49c:	e79e      	b.n	800a3dc <acc_cpd_rx_fine_dip_calibration+0x104>
 800a49e:	bf00      	nop
 800a4a0:	0800fb9c 	.word	0x0800fb9c
 800a4a4:	08016564 	.word	0x08016564
 800a4a8:	0800fb20 	.word	0x0800fb20
 800a4ac:	001e8480 	.word	0x001e8480
 800a4b0:	200001e4 	.word	0x200001e4
 800a4b4:	080144a0 	.word	0x080144a0
 800a4b8:	080144ec 	.word	0x080144ec
 800a4bc:	08013ff8 	.word	0x08013ff8
 800a4c0:	0801446c 	.word	0x0801446c
 800a4c4:	08014504 	.word	0x08014504
 800a4c8:	08014478 	.word	0x08014478
 800a4cc:	080140fc 	.word	0x080140fc
 800a4d0:	08014178 	.word	0x08014178
 800a4d4:	08014138 	.word	0x08014138
 800a4d8:	08014494 	.word	0x08014494
 800a4dc:	080141b8 	.word	0x080141b8
 800a4e0:	080141f0 	.word	0x080141f0
 800a4e4:	08014554 	.word	0x08014554
 800a4e8:	080145d8 	.word	0x080145d8

0800a4ec <print_buffer_u16.constprop.2>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	4689      	mov	r9, r1
 800a4f4:	9003      	str	r0, [sp, #12]
 800a4f6:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800a4fa:	4943      	ldr	r1, [pc, #268]	; (800a608 <print_buffer_u16.constprop.2+0x11c>)
 800a4fc:	2060      	movs	r0, #96	; 0x60
 800a4fe:	f7fc fb9f 	bl	8006c40 <acc_integration_mem_alloc_debug>
 800a502:	2800      	cmp	r0, #0
 800a504:	d076      	beq.n	800a5f4 <print_buffer_u16.constprop.2+0x108>
 800a506:	4680      	mov	r8, r0
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	d01c      	beq.n	800a548 <print_buffer_u16.constprop.2+0x5c>
 800a50e:	f04f 0b00 	mov.w	fp, #0
 800a512:	4f3e      	ldr	r7, [pc, #248]	; (800a60c <print_buffer_u16.constprop.2+0x120>)
 800a514:	465e      	mov	r6, fp
 800a516:	e008      	b.n	800a52a <print_buffer_u16.constprop.2+0x3e>
 800a518:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
 800a51c:	dd61      	ble.n	800a5e2 <print_buffer_u16.constprop.2+0xf6>
 800a51e:	2a0f      	cmp	r2, #15
 800a520:	f106 0601 	add.w	r6, r6, #1
 800a524:	d016      	beq.n	800a554 <print_buffer_u16.constprop.2+0x68>
 800a526:	45b1      	cmp	r9, r6
 800a528:	d908      	bls.n	800a53c <print_buffer_u16.constprop.2+0x50>
 800a52a:	f016 020f 	ands.w	r2, r6, #15
 800a52e:	d1f3      	bne.n	800a518 <print_buffer_u16.constprop.2+0x2c>
 800a530:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
 800a534:	dd21      	ble.n	800a57a <print_buffer_u16.constprop.2+0x8e>
 800a536:	3601      	adds	r6, #1
 800a538:	45b1      	cmp	r9, r6
 800a53a:	d8f6      	bhi.n	800a52a <print_buffer_u16.constprop.2+0x3e>
 800a53c:	4643      	mov	r3, r8
 800a53e:	4a34      	ldr	r2, [pc, #208]	; (800a610 <print_buffer_u16.constprop.2+0x124>)
 800a540:	4934      	ldr	r1, [pc, #208]	; (800a614 <print_buffer_u16.constprop.2+0x128>)
 800a542:	2002      	movs	r0, #2
 800a544:	f7fc fbc8 	bl	8006cd8 <acc_log_rss>
 800a548:	4640      	mov	r0, r8
 800a54a:	b005      	add	sp, #20
 800a54c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	f7fc bbb0 	b.w	8006cb4 <acc_integration_mem_free>
 800a554:	4643      	mov	r3, r8
 800a556:	4a2e      	ldr	r2, [pc, #184]	; (800a610 <print_buffer_u16.constprop.2+0x124>)
 800a558:	492e      	ldr	r1, [pc, #184]	; (800a614 <print_buffer_u16.constprop.2+0x128>)
 800a55a:	2002      	movs	r0, #2
 800a55c:	f7fc fbbc 	bl	8006cd8 <acc_log_rss>
 800a560:	45b1      	cmp	r9, r6
 800a562:	d9f1      	bls.n	800a548 <print_buffer_u16.constprop.2+0x5c>
 800a564:	f04f 0b00 	mov.w	fp, #0
 800a568:	f016 020f 	ands.w	r2, r6, #15
 800a56c:	465b      	mov	r3, fp
 800a56e:	d005      	beq.n	800a57c <print_buffer_u16.constprop.2+0x90>
 800a570:	232c      	movs	r3, #44	; 0x2c
 800a572:	f888 3000 	strb.w	r3, [r8]
 800a576:	f04f 0b01 	mov.w	fp, #1
 800a57a:	465b      	mov	r3, fp
 800a57c:	9903      	ldr	r1, [sp, #12]
 800a57e:	4443      	add	r3, r8
 800a580:	1e5d      	subs	r5, r3, #1
 800a582:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
 800a586:	4628      	mov	r0, r5
 800a588:	f04f 0a00 	mov.w	sl, #0
 800a58c:	fba7 c104 	umull	ip, r1, r7, r4
 800a590:	08c9      	lsrs	r1, r1, #3
 800a592:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800a596:	eba4 044c 	sub.w	r4, r4, ip, lsl #1
 800a59a:	3430      	adds	r4, #48	; 0x30
 800a59c:	f800 4f01 	strb.w	r4, [r0, #1]!
 800a5a0:	f10a 0a01 	add.w	sl, sl, #1
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	d1f0      	bne.n	800a58c <print_buffer_u16.constprop.2+0xa0>
 800a5aa:	f803 100a 	strb.w	r1, [r3, sl]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	9201      	str	r2, [sp, #4]
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	f7f5 fe86 	bl	80002c4 <strlen>
 800a5b8:	1e41      	subs	r1, r0, #1
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	9a01      	ldr	r2, [sp, #4]
 800a5be:	dd0e      	ble.n	800a5de <print_buffer_u16.constprop.2+0xf2>
 800a5c0:	9b02      	ldr	r3, [sp, #8]
 800a5c2:	4403      	add	r3, r0
 800a5c4:	3401      	adds	r4, #1
 800a5c6:	43e1      	mvns	r1, r4
 800a5c8:	4401      	add	r1, r0
 800a5ca:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 800a5ce:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800a5d2:	f885 e000 	strb.w	lr, [r5]
 800a5d6:	428c      	cmp	r4, r1
 800a5d8:	f883 c000 	strb.w	ip, [r3]
 800a5dc:	dbf2      	blt.n	800a5c4 <print_buffer_u16.constprop.2+0xd8>
 800a5de:	44d3      	add	fp, sl
 800a5e0:	e79d      	b.n	800a51e <print_buffer_u16.constprop.2+0x32>
 800a5e2:	f10b 0301 	add.w	r3, fp, #1
 800a5e6:	212c      	movs	r1, #44	; 0x2c
 800a5e8:	2b60      	cmp	r3, #96	; 0x60
 800a5ea:	f808 100b 	strb.w	r1, [r8, fp]
 800a5ee:	469b      	mov	fp, r3
 800a5f0:	d095      	beq.n	800a51e <print_buffer_u16.constprop.2+0x32>
 800a5f2:	e7c2      	b.n	800a57a <print_buffer_u16.constprop.2+0x8e>
 800a5f4:	4b08      	ldr	r3, [pc, #32]	; (800a618 <print_buffer_u16.constprop.2+0x12c>)
 800a5f6:	4a09      	ldr	r2, [pc, #36]	; (800a61c <print_buffer_u16.constprop.2+0x130>)
 800a5f8:	4906      	ldr	r1, [pc, #24]	; (800a614 <print_buffer_u16.constprop.2+0x128>)
 800a5fa:	2002      	movs	r0, #2
 800a5fc:	b005      	add	sp, #20
 800a5fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a602:	f7fc bb69 	b.w	8006cd8 <acc_log_rss>
 800a606:	bf00      	nop
 800a608:	08014904 	.word	0x08014904
 800a60c:	cccccccd 	.word	0xcccccccd
 800a610:	08014920 	.word	0x08014920
 800a614:	08014924 	.word	0x08014924
 800a618:	08014624 	.word	0x08014624
 800a61c:	0801214c 	.word	0x0801214c

0800a620 <acc_sensor_diagnostics_print_buffer_u16>:
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <acc_sensor_diagnostics_print_buffer_u16+0xc>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	b903      	cbnz	r3, 800a628 <acc_sensor_diagnostics_print_buffer_u16+0x8>
 800a626:	4770      	bx	lr
 800a628:	f7ff bf60 	b.w	800a4ec <print_buffer_u16.constprop.2>
 800a62c:	200001e4 	.word	0x200001e4

0800a630 <acc_sensor_diagnostics_print_buffer_bool>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <acc_sensor_diagnostics_print_buffer_bool+0x4c>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	af00      	add	r7, sp, #0
 800a638:	b90b      	cbnz	r3, 800a63e <acc_sensor_diagnostics_print_buffer_bool+0xe>
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63e:	4603      	mov	r3, r0
 800a640:	466e      	mov	r6, sp
 800a642:	b1a9      	cbz	r1, 800a670 <acc_sensor_diagnostics_print_buffer_bool+0x40>
 800a644:	004a      	lsls	r2, r1, #1
 800a646:	3208      	adds	r2, #8
 800a648:	f022 0207 	bic.w	r2, r2, #7
 800a64c:	ebad 0d02 	sub.w	sp, sp, r2
 800a650:	4668      	mov	r0, sp
 800a652:	1e4d      	subs	r5, r1, #1
 800a654:	441d      	add	r5, r3
 800a656:	1e82      	subs	r2, r0, #2
 800a658:	3b01      	subs	r3, #1
 800a65a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800a65e:	f822 4f02 	strh.w	r4, [r2, #2]!
 800a662:	42ab      	cmp	r3, r5
 800a664:	d1f9      	bne.n	800a65a <acc_sensor_diagnostics_print_buffer_bool+0x2a>
 800a666:	f7ff ff41 	bl	800a4ec <print_buffer_u16.constprop.2>
 800a66a:	46b5      	mov	sp, r6
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a670:	4b03      	ldr	r3, [pc, #12]	; (800a680 <acc_sensor_diagnostics_print_buffer_bool+0x50>)
 800a672:	4a04      	ldr	r2, [pc, #16]	; (800a684 <acc_sensor_diagnostics_print_buffer_bool+0x54>)
 800a674:	4804      	ldr	r0, [pc, #16]	; (800a688 <acc_sensor_diagnostics_print_buffer_bool+0x58>)
 800a676:	21ef      	movs	r1, #239	; 0xef
 800a678:	f001 fd14 	bl	800c0a4 <__assert_func>
 800a67c:	200001e4 	.word	0x200001e4
 800a680:	08014638 	.word	0x08014638
 800a684:	080145fc 	.word	0x080145fc
 800a688:	08014904 	.word	0x08014904

0800a68c <acc_sensor_diagnostics_print_buffer_f32>:
 800a68c:	4b44      	ldr	r3, [pc, #272]	; (800a7a0 <acc_sensor_diagnostics_print_buffer_f32+0x114>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b903      	cbnz	r3, 800a694 <acc_sensor_diagnostics_print_buffer_f32+0x8>
 800a692:	4770      	bx	lr
 800a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	ed2d 8b04 	vpush	{d8-d9}
 800a69c:	b082      	sub	sp, #8
 800a69e:	460e      	mov	r6, r1
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	46ea      	mov	sl, sp
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	d074      	beq.n	800a792 <acc_sensor_diagnostics_print_buffer_f32+0x106>
 800a6a8:	004b      	lsls	r3, r1, #1
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	f023 0307 	bic.w	r3, r3, #7
 800a6b0:	ebad 0d03 	sub.w	sp, sp, r3
 800a6b4:	f10d 0908 	add.w	r9, sp, #8
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 800a7a4 <acc_sensor_diagnostics_print_buffer_f32+0x118>
 800a6be:	ed9f 9a3a 	vldr	s18, [pc, #232]	; 800a7a8 <acc_sensor_diagnostics_print_buffer_f32+0x11c>
 800a6c2:	eddf 8a3a 	vldr	s17, [pc, #232]	; 800a7ac <acc_sensor_diagnostics_print_buffer_f32+0x120>
 800a6c6:	464d      	mov	r5, r9
 800a6c8:	eb00 0881 	add.w	r8, r0, r1, lsl #2
 800a6cc:	e024      	b.n	800a718 <acc_sensor_diagnostics_print_buffer_f32+0x8c>
 800a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d2:	bf48      	it	mi
 800a6d4:	eef1 7a67 	vnegmi.f32	s15, s15
 800a6d8:	ee77 7a89 	vadd.f32	s15, s15, s18
 800a6dc:	bf48      	it	mi
 800a6de:	232d      	movmi	r3, #45	; 0x2d
 800a6e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a6e4:	bf58      	it	pl
 800a6e6:	2320      	movpl	r3, #32
 800a6e8:	ed8d 7a00 	vstr	s14, [sp]
 800a6ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a6f0:	4a2f      	ldr	r2, [pc, #188]	; (800a7b0 <acc_sensor_diagnostics_print_buffer_f32+0x124>)
 800a6f2:	4930      	ldr	r1, [pc, #192]	; (800a7b4 <acc_sensor_diagnostics_print_buffer_f32+0x128>)
 800a6f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a702:	edcd 7a01 	vstr	s15, [sp, #4]
 800a706:	f7fc fae7 	bl	8006cd8 <acc_log_rss>
 800a70a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a70e:	802b      	strh	r3, [r5, #0]
 800a710:	45a0      	cmp	r8, r4
 800a712:	f105 0502 	add.w	r5, r5, #2
 800a716:	d019      	beq.n	800a74c <acc_sensor_diagnostics_print_buffer_f32+0xc0>
 800a718:	ecf4 7a01 	vldmia	r4!, {s15}
 800a71c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a728:	dcd1      	bgt.n	800a6ce <acc_sensor_diagnostics_print_buffer_f32+0x42>
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	d417      	bmi.n	800a760 <acc_sensor_diagnostics_print_buffer_f32+0xd4>
 800a730:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a734:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a738:	45a0      	cmp	r8, r4
 800a73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73e:	f105 0502 	add.w	r5, r5, #2
 800a742:	ee17 3a90 	vmov	r3, s15
 800a746:	f825 3c02 	strh.w	r3, [r5, #-2]
 800a74a:	d1e5      	bne.n	800a718 <acc_sensor_diagnostics_print_buffer_f32+0x8c>
 800a74c:	4631      	mov	r1, r6
 800a74e:	4648      	mov	r0, r9
 800a750:	f7ff fecc 	bl	800a4ec <print_buffer_u16.constprop.2>
 800a754:	46d5      	mov	sp, sl
 800a756:	46bd      	mov	sp, r7
 800a758:	ecbd 8b04 	vpop	{d8-d9}
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	ee79 7a67 	vsub.f32	s15, s18, s15
 800a764:	232d      	movs	r3, #45	; 0x2d
 800a766:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800a76a:	4a11      	ldr	r2, [pc, #68]	; (800a7b0 <acc_sensor_diagnostics_print_buffer_f32+0x124>)
 800a76c:	ed8d 7a00 	vstr	s14, [sp]
 800a770:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a774:	490f      	ldr	r1, [pc, #60]	; (800a7b4 <acc_sensor_diagnostics_print_buffer_f32+0x128>)
 800a776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a77a:	2001      	movs	r0, #1
 800a77c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a784:	edcd 7a01 	vstr	s15, [sp, #4]
 800a788:	f7fc faa6 	bl	8006cd8 <acc_log_rss>
 800a78c:	2300      	movs	r3, #0
 800a78e:	802b      	strh	r3, [r5, #0]
 800a790:	e7be      	b.n	800a710 <acc_sensor_diagnostics_print_buffer_f32+0x84>
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <acc_sensor_diagnostics_print_buffer_f32+0x12c>)
 800a794:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <acc_sensor_diagnostics_print_buffer_f32+0x130>)
 800a796:	480a      	ldr	r0, [pc, #40]	; (800a7c0 <acc_sensor_diagnostics_print_buffer_f32+0x134>)
 800a798:	21fe      	movs	r1, #254	; 0xfe
 800a79a:	f001 fc83 	bl	800c0a4 <__assert_func>
 800a79e:	bf00      	nop
 800a7a0:	200001e4 	.word	0x200001e4
 800a7a4:	477fff00 	.word	0x477fff00
 800a7a8:	350637bd 	.word	0x350637bd
 800a7ac:	49742400 	.word	0x49742400
 800a7b0:	08014648 	.word	0x08014648
 800a7b4:	08014924 	.word	0x08014924
 800a7b8:	08014638 	.word	0x08014638
 800a7bc:	08014610 	.word	0x08014610
 800a7c0:	08014904 	.word	0x08014904

0800a7c4 <acc_sensor_diagnostics_sensor_status>:
 800a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	b095      	sub	sp, #84	; 0x54
 800a7cc:	4fb6      	ldr	r7, [pc, #728]	; (800aaa8 <acc_sensor_diagnostics_sensor_status+0x2e4>)
 800a7ce:	f8df a314 	ldr.w	sl, [pc, #788]	; 800aae4 <acc_sensor_diagnostics_sensor_status+0x320>
 800a7d2:	f897 9000 	ldrb.w	r9, [r7]
 800a7d6:	703b      	strb	r3, [r7, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	21b2      	movs	r1, #178	; 0xb2
 800a7dc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	f7fd ff4b 	bl	800867c <acc_sensor_reg_write>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4eb0      	ldr	r6, [pc, #704]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a7ea:	f828 3d20 	strh.w	r3, [r8, #-32]!
 800a7ee:	2564      	movs	r5, #100	; 0x64
 800a7f0:	e002      	b.n	800a7f8 <acc_sensor_diagnostics_sensor_status+0x34>
 800a7f2:	3d01      	subs	r5, #1
 800a7f4:	b2ad      	uxth	r5, r5
 800a7f6:	b1bd      	cbz	r5, 800a828 <acc_sensor_diagnostics_sensor_status+0x64>
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	2111      	movs	r1, #17
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f7fd ff3b 	bl	8008678 <acc_sensor_reg_read>
 800a802:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a806:	783a      	ldrb	r2, [r7, #0]
 800a808:	0559      	lsls	r1, r3, #21
 800a80a:	f140 80ce 	bpl.w	800a9aa <acc_sensor_diagnostics_sensor_status+0x1e6>
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d0ef      	beq.n	800a7f2 <acc_sensor_diagnostics_sensor_status+0x2e>
 800a812:	3d01      	subs	r5, #1
 800a814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a818:	4652      	mov	r2, sl
 800a81a:	4631      	mov	r1, r6
 800a81c:	2002      	movs	r0, #2
 800a81e:	b2ad      	uxth	r5, r5
 800a820:	f7fc fa5a 	bl	8006cd8 <acc_log_rss>
 800a824:	2d00      	cmp	r5, #0
 800a826:	d1e7      	bne.n	800a7f8 <acc_sensor_diagnostics_sensor_status+0x34>
 800a828:	aa14      	add	r2, sp, #80	; 0x50
 800a82a:	2500      	movs	r5, #0
 800a82c:	f822 5d2c 	strh.w	r5, [r2, #-44]!
 800a830:	4629      	mov	r1, r5
 800a832:	4620      	mov	r0, r4
 800a834:	f7fd ff20 	bl	8008678 <acc_sensor_reg_read>
 800a838:	aa14      	add	r2, sp, #80	; 0x50
 800a83a:	212a      	movs	r1, #42	; 0x2a
 800a83c:	f822 5d2a 	strh.w	r5, [r2, #-42]!
 800a840:	4620      	mov	r0, r4
 800a842:	f7fd ff19 	bl	8008678 <acc_sensor_reg_read>
 800a846:	aa14      	add	r2, sp, #80	; 0x50
 800a848:	4e99      	ldr	r6, [pc, #612]	; (800aab0 <acc_sensor_diagnostics_sensor_status+0x2ec>)
 800a84a:	f822 5d28 	strh.w	r5, [r2, #-40]!
 800a84e:	2128      	movs	r1, #40	; 0x28
 800a850:	4620      	mov	r0, r4
 800a852:	f7fd ff11 	bl	8008678 <acc_sensor_reg_read>
 800a856:	f106 0a1e 	add.w	sl, r6, #30
 800a85a:	4645      	mov	r5, r8
 800a85c:	2163      	movs	r1, #99	; 0x63
 800a85e:	e001      	b.n	800a864 <acc_sensor_diagnostics_sensor_status+0xa0>
 800a860:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 800a864:	462a      	mov	r2, r5
 800a866:	4620      	mov	r0, r4
 800a868:	f7fd ff06 	bl	8008678 <acc_sensor_reg_read>
 800a86c:	4556      	cmp	r6, sl
 800a86e:	f105 0502 	add.w	r5, r5, #2
 800a872:	d1f5      	bne.n	800a860 <acc_sensor_diagnostics_sensor_status+0x9c>
 800a874:	783b      	ldrb	r3, [r7, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 8138 	bne.w	800aaec <acc_sensor_diagnostics_sensor_status+0x328>
 800a87c:	4642      	mov	r2, r8
 800a87e:	2168      	movs	r1, #104	; 0x68
 800a880:	4620      	mov	r0, r4
 800a882:	f7fd fef9 	bl	8008678 <acc_sensor_reg_read>
 800a886:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800a88a:	2167      	movs	r1, #103	; 0x67
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7fd fef3 	bl	8008678 <acc_sensor_reg_read>
 800a892:	aa0d      	add	r2, sp, #52	; 0x34
 800a894:	2166      	movs	r1, #102	; 0x66
 800a896:	4620      	mov	r0, r4
 800a898:	f7fd feee 	bl	8008678 <acc_sensor_reg_read>
 800a89c:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800a8a0:	2165      	movs	r1, #101	; 0x65
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7fd fee8 	bl	8008678 <acc_sensor_reg_read>
 800a8a8:	783b      	ldrb	r3, [r7, #0]
 800a8aa:	b17b      	cbz	r3, 800a8cc <acc_sensor_diagnostics_sensor_status+0x108>
 800a8ac:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800a8b0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800a8b4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800a8b8:	9200      	str	r2, [sp, #0]
 800a8ba:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a8be:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a8c2:	4a7c      	ldr	r2, [pc, #496]	; (800aab4 <acc_sensor_diagnostics_sensor_status+0x2f0>)
 800a8c4:	4979      	ldr	r1, [pc, #484]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a8c6:	2002      	movs	r0, #2
 800a8c8:	f7fc fa06 	bl	8006cd8 <acc_log_rss>
 800a8cc:	aa14      	add	r2, sp, #80	; 0x50
 800a8ce:	2500      	movs	r5, #0
 800a8d0:	f822 5d26 	strh.w	r5, [r2, #-38]!
 800a8d4:	2153      	movs	r1, #83	; 0x53
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7fd fece 	bl	8008678 <acc_sensor_reg_read>
 800a8dc:	4642      	mov	r2, r8
 800a8de:	2140      	movs	r1, #64	; 0x40
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800a8e6:	f7fd fec7 	bl	8008678 <acc_sensor_reg_read>
 800a8ea:	783b      	ldrb	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f040 80b6 	bne.w	800aa5e <acc_sensor_diagnostics_sensor_status+0x29a>
 800a8f2:	4e71      	ldr	r6, [pc, #452]	; (800aab8 <acc_sensor_diagnostics_sensor_status+0x2f4>)
 800a8f4:	4645      	mov	r5, r8
 800a8f6:	f106 0a1e 	add.w	sl, r6, #30
 800a8fa:	21f0      	movs	r1, #240	; 0xf0
 800a8fc:	e001      	b.n	800a902 <acc_sensor_diagnostics_sensor_status+0x13e>
 800a8fe:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 800a902:	462a      	mov	r2, r5
 800a904:	4620      	mov	r0, r4
 800a906:	f7fd feb7 	bl	8008678 <acc_sensor_reg_read>
 800a90a:	4556      	cmp	r6, sl
 800a90c:	f105 0502 	add.w	r5, r5, #2
 800a910:	d1f5      	bne.n	800a8fe <acc_sensor_diagnostics_sensor_status+0x13a>
 800a912:	783b      	ldrb	r3, [r7, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f040 808d 	bne.w	800aa34 <acc_sensor_diagnostics_sensor_status+0x270>
 800a91a:	461d      	mov	r5, r3
 800a91c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800aae8 <acc_sensor_diagnostics_sensor_status+0x324>
 800a920:	f8df a188 	ldr.w	sl, [pc, #392]	; 800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>
 800a924:	2601      	movs	r6, #1
 800a926:	b93b      	cbnz	r3, 800a938 <acc_sensor_diagnostics_sensor_status+0x174>
 800a928:	3601      	adds	r6, #1
 800a92a:	3502      	adds	r5, #2
 800a92c:	2e08      	cmp	r6, #8
 800a92e:	b2ed      	uxtb	r5, r5
 800a930:	d019      	beq.n	800a966 <acc_sensor_diagnostics_sensor_status+0x1a2>
 800a932:	783b      	ldrb	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f7      	beq.n	800a928 <acc_sensor_diagnostics_sensor_status+0x164>
 800a938:	ab14      	add	r3, sp, #80	; 0x50
 800a93a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800a93e:	4651      	mov	r1, sl
 800a940:	f833 2c1e 	ldrh.w	r2, [r3, #-30]
 800a944:	ab14      	add	r3, sp, #80	; 0x50
 800a946:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800a94a:	2002      	movs	r0, #2
 800a94c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800a950:	e9cd 3200 	strd	r3, r2, [sp]
 800a954:	4633      	mov	r3, r6
 800a956:	465a      	mov	r2, fp
 800a958:	3601      	adds	r6, #1
 800a95a:	f7fc f9bd 	bl	8006cd8 <acc_log_rss>
 800a95e:	3502      	adds	r5, #2
 800a960:	2e08      	cmp	r6, #8
 800a962:	b2ed      	uxtb	r5, r5
 800a964:	d1e5      	bne.n	800a932 <acc_sensor_diagnostics_sensor_status+0x16e>
 800a966:	aa14      	add	r2, sp, #80	; 0x50
 800a968:	2500      	movs	r5, #0
 800a96a:	f822 5d24 	strh.w	r5, [r2, #-36]!
 800a96e:	219d      	movs	r1, #157	; 0x9d
 800a970:	4620      	mov	r0, r4
 800a972:	f7fd fe81 	bl	8008678 <acc_sensor_reg_read>
 800a976:	aa14      	add	r2, sp, #80	; 0x50
 800a978:	2199      	movs	r1, #153	; 0x99
 800a97a:	f822 5d22 	strh.w	r5, [r2, #-34]!
 800a97e:	4620      	mov	r0, r4
 800a980:	f7fd fe7a 	bl	8008678 <acc_sensor_reg_read>
 800a984:	4642      	mov	r2, r8
 800a986:	2196      	movs	r1, #150	; 0x96
 800a988:	4620      	mov	r0, r4
 800a98a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800a98e:	f7fd fe73 	bl	8008678 <acc_sensor_reg_read>
 800a992:	462a      	mov	r2, r5
 800a994:	4620      	mov	r0, r4
 800a996:	21b2      	movs	r1, #178	; 0xb2
 800a998:	f7fd fe70 	bl	800867c <acc_sensor_reg_write>
 800a99c:	783b      	ldrb	r3, [r7, #0]
 800a99e:	b97b      	cbnz	r3, 800a9c0 <acc_sensor_diagnostics_sensor_status+0x1fc>
 800a9a0:	f887 9000 	strb.w	r9, [r7]
 800a9a4:	b015      	add	sp, #84	; 0x54
 800a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	f43f af3c 	beq.w	800a828 <acc_sensor_diagnostics_sensor_status+0x64>
 800a9b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9b4:	4a41      	ldr	r2, [pc, #260]	; (800aabc <acc_sensor_diagnostics_sensor_status+0x2f8>)
 800a9b6:	493d      	ldr	r1, [pc, #244]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a9b8:	2002      	movs	r0, #2
 800a9ba:	f7fc f98d 	bl	8006cd8 <acc_log_rss>
 800a9be:	e733      	b.n	800a828 <acc_sensor_diagnostics_sensor_status+0x64>
 800a9c0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800a9c4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a9c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a9cc:	e9cd 2100 	strd	r2, r1, [sp]
 800a9d0:	2002      	movs	r0, #2
 800a9d2:	4a3b      	ldr	r2, [pc, #236]	; (800aac0 <acc_sensor_diagnostics_sensor_status+0x2fc>)
 800a9d4:	4935      	ldr	r1, [pc, #212]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a9d6:	f7fc f97f 	bl	8006cd8 <acc_log_rss>
 800a9da:	783b      	ldrb	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0df      	beq.n	800a9a0 <acc_sensor_diagnostics_sensor_status+0x1dc>
 800a9e0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800a9e4:	4a37      	ldr	r2, [pc, #220]	; (800aac4 <acc_sensor_diagnostics_sensor_status+0x300>)
 800a9e6:	4931      	ldr	r1, [pc, #196]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a9e8:	2002      	movs	r0, #2
 800a9ea:	f7fc f975 	bl	8006cd8 <acc_log_rss>
 800a9ee:	783b      	ldrb	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0d5      	beq.n	800a9a0 <acc_sensor_diagnostics_sensor_status+0x1dc>
 800a9f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a9f8:	4a33      	ldr	r2, [pc, #204]	; (800aac8 <acc_sensor_diagnostics_sensor_status+0x304>)
 800a9fa:	492c      	ldr	r1, [pc, #176]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800a9fc:	2002      	movs	r0, #2
 800a9fe:	f7fc f96b 	bl	8006cd8 <acc_log_rss>
 800aa02:	783b      	ldrb	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0cb      	beq.n	800a9a0 <acc_sensor_diagnostics_sensor_status+0x1dc>
 800aa08:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800aa0c:	4a2f      	ldr	r2, [pc, #188]	; (800aacc <acc_sensor_diagnostics_sensor_status+0x308>)
 800aa0e:	4927      	ldr	r1, [pc, #156]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa10:	2002      	movs	r0, #2
 800aa12:	f7fc f961 	bl	8006cd8 <acc_log_rss>
 800aa16:	783b      	ldrb	r3, [r7, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0c1      	beq.n	800a9a0 <acc_sensor_diagnostics_sensor_status+0x1dc>
 800aa1c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800aa20:	4a2b      	ldr	r2, [pc, #172]	; (800aad0 <acc_sensor_diagnostics_sensor_status+0x30c>)
 800aa22:	4922      	ldr	r1, [pc, #136]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa24:	2002      	movs	r0, #2
 800aa26:	f7fc f957 	bl	8006cd8 <acc_log_rss>
 800aa2a:	f887 9000 	strb.w	r9, [r7]
 800aa2e:	b015      	add	sp, #84	; 0x54
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa34:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <acc_sensor_diagnostics_sensor_status+0x310>)
 800aa3a:	491c      	ldr	r1, [pc, #112]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa3c:	2002      	movs	r0, #2
 800aa3e:	f7fc f94b 	bl	8006cd8 <acc_log_rss>
 800aa42:	783b      	ldrb	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 808e 	beq.w	800ab66 <acc_sensor_diagnostics_sensor_status+0x3a2>
 800aa4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800aa4e:	4a22      	ldr	r2, [pc, #136]	; (800aad8 <acc_sensor_diagnostics_sensor_status+0x314>)
 800aa50:	4916      	ldr	r1, [pc, #88]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa52:	2002      	movs	r0, #2
 800aa54:	f7fc f940 	bl	8006cd8 <acc_log_rss>
 800aa58:	2502      	movs	r5, #2
 800aa5a:	783b      	ldrb	r3, [r7, #0]
 800aa5c:	e75e      	b.n	800a91c <acc_sensor_diagnostics_sensor_status+0x158>
 800aa5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800aa62:	4a1e      	ldr	r2, [pc, #120]	; (800aadc <acc_sensor_diagnostics_sensor_status+0x318>)
 800aa64:	4911      	ldr	r1, [pc, #68]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa66:	2002      	movs	r0, #2
 800aa68:	f7fc f936 	bl	8006cd8 <acc_log_rss>
 800aa6c:	783b      	ldrb	r3, [r7, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f43f af3f 	beq.w	800a8f2 <acc_sensor_diagnostics_sensor_status+0x12e>
 800aa74:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800aa78:	4a19      	ldr	r2, [pc, #100]	; (800aae0 <acc_sensor_diagnostics_sensor_status+0x31c>)
 800aa7a:	490c      	ldr	r1, [pc, #48]	; (800aaac <acc_sensor_diagnostics_sensor_status+0x2e8>)
 800aa7c:	f003 0004 	and.w	r0, r3, #4
 800aa80:	f003 0508 	and.w	r5, r3, #8
 800aa84:	9004      	str	r0, [sp, #16]
 800aa86:	f003 0010 	and.w	r0, r3, #16
 800aa8a:	9503      	str	r5, [sp, #12]
 800aa8c:	9002      	str	r0, [sp, #8]
 800aa8e:	f003 0520 	and.w	r5, r3, #32
 800aa92:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800aa96:	e9cd 0500 	strd	r0, r5, [sp]
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2002      	movs	r0, #2
 800aaa0:	f7fc f91a 	bl	8006cd8 <acc_log_rss>
 800aaa4:	e725      	b.n	800a8f2 <acc_sensor_diagnostics_sensor_status+0x12e>
 800aaa6:	bf00      	nop
 800aaa8:	200001e4 	.word	0x200001e4
 800aaac:	08014924 	.word	0x08014924
 800aab0:	08014938 	.word	0x08014938
 800aab4:	08014738 	.word	0x08014738
 800aab8:	08014958 	.word	0x08014958
 800aabc:	08014698 	.word	0x08014698
 800aac0:	0801485c 	.word	0x0801485c
 800aac4:	080148a8 	.word	0x080148a8
 800aac8:	080148c8 	.word	0x080148c8
 800aacc:	080148e0 	.word	0x080148e0
 800aad0:	080148f0 	.word	0x080148f0
 800aad4:	080147fc 	.word	0x080147fc
 800aad8:	08014820 	.word	0x08014820
 800aadc:	08014764 	.word	0x08014764
 800aae0:	0801477c 	.word	0x0801477c
 800aae4:	08014680 	.word	0x08014680
 800aae8:	08014838 	.word	0x08014838
 800aaec:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
 800aaf0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800aaf4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800aaf8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800aafc:	9006      	str	r0, [sp, #24]
 800aafe:	9105      	str	r1, [sp, #20]
 800ab00:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800ab04:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800ab08:	9204      	str	r2, [sp, #16]
 800ab0a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800ab0e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800ab12:	e9cd 2100 	strd	r2, r1, [sp]
 800ab16:	e9cd 0502 	strd	r0, r5, [sp, #8]
 800ab1a:	4a14      	ldr	r2, [pc, #80]	; (800ab6c <acc_sensor_diagnostics_sensor_status+0x3a8>)
 800ab1c:	4914      	ldr	r1, [pc, #80]	; (800ab70 <acc_sensor_diagnostics_sensor_status+0x3ac>)
 800ab1e:	2002      	movs	r0, #2
 800ab20:	f7fc f8da 	bl	8006cd8 <acc_log_rss>
 800ab24:	783b      	ldrb	r3, [r7, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f43f aea8 	beq.w	800a87c <acc_sensor_diagnostics_sensor_status+0xb8>
 800ab2c:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 800ab30:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 800ab34:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800ab38:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
 800ab3c:	9006      	str	r0, [sp, #24]
 800ab3e:	9105      	str	r1, [sp, #20]
 800ab40:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800ab44:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800ab48:	9204      	str	r2, [sp, #16]
 800ab4a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ab4e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ab52:	e9cd 2100 	strd	r2, r1, [sp]
 800ab56:	e9cd 0502 	strd	r0, r5, [sp, #8]
 800ab5a:	4a06      	ldr	r2, [pc, #24]	; (800ab74 <acc_sensor_diagnostics_sensor_status+0x3b0>)
 800ab5c:	4904      	ldr	r1, [pc, #16]	; (800ab70 <acc_sensor_diagnostics_sensor_status+0x3ac>)
 800ab5e:	2002      	movs	r0, #2
 800ab60:	f7fc f8ba 	bl	8006cd8 <acc_log_rss>
 800ab64:	e68a      	b.n	800a87c <acc_sensor_diagnostics_sensor_status+0xb8>
 800ab66:	2501      	movs	r5, #1
 800ab68:	e6d8      	b.n	800a91c <acc_sensor_diagnostics_sensor_status+0x158>
 800ab6a:	bf00      	nop
 800ab6c:	080146b0 	.word	0x080146b0
 800ab70:	08014924 	.word	0x08014924
 800ab74:	080146f4 	.word	0x080146f4

0800ab78 <acc_alg_basic_subtract_mean_uint16.part.0>:
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	d036      	beq.n	800abea <acc_alg_basic_subtract_mean_uint16.part.0+0x72>
 800ab7c:	b4f0      	push	{r4, r5, r6, r7}
 800ab7e:	004f      	lsls	r7, r1, #1
 800ab80:	eb00 0c07 	add.w	ip, r0, r7
 800ab84:	4605      	mov	r5, r0
 800ab86:	2600      	movs	r6, #0
 800ab88:	f835 4b02 	ldrh.w	r4, [r5], #2
 800ab8c:	1aa4      	subs	r4, r4, r2
 800ab8e:	45ac      	cmp	ip, r5
 800ab90:	4426      	add	r6, r4
 800ab92:	d1f9      	bne.n	800ab88 <acc_alg_basic_subtract_mean_uint16.part.0+0x10>
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	ea4f 0251 	mov.w	r2, r1, lsr #1
 800ab9a:	bfb4      	ite	lt
 800ab9c:	1ab6      	sublt	r6, r6, r2
 800ab9e:	18b6      	addge	r6, r6, r2
 800aba0:	fb96 f6f1 	sdiv	r6, r6, r1
 800aba4:	b231      	sxth	r1, r6
 800aba6:	2900      	cmp	r1, #0
 800aba8:	f1a0 0002 	sub.w	r0, r0, #2
 800abac:	dd0f      	ble.n	800abce <acc_alg_basic_subtract_mean_uint16.part.0+0x56>
 800abae:	4407      	add	r7, r0
 800abb0:	b2b6      	uxth	r6, r6
 800abb2:	2400      	movs	r4, #0
 800abb4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800abb8:	42b2      	cmp	r2, r6
 800abba:	bf2a      	itet	cs
 800abbc:	1b92      	subcs	r2, r2, r6
 800abbe:	8004      	strhcc	r4, [r0, #0]
 800abc0:	8002      	strhcs	r2, [r0, #0]
 800abc2:	4287      	cmp	r7, r0
 800abc4:	d1f6      	bne.n	800abb4 <acc_alg_basic_subtract_mean_uint16.part.0+0x3c>
 800abc6:	b103      	cbz	r3, 800abca <acc_alg_basic_subtract_mean_uint16.part.0+0x52>
 800abc8:	8019      	strh	r1, [r3, #0]
 800abca:	bcf0      	pop	{r4, r5, r6, r7}
 800abcc:	4770      	bx	lr
 800abce:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800abd2:	4407      	add	r7, r0
 800abd4:	194c      	adds	r4, r1, r5
 800abd6:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800abda:	42a2      	cmp	r2, r4
 800abdc:	bfd6      	itet	le
 800abde:	1b92      	suble	r2, r2, r6
 800abe0:	8005      	strhgt	r5, [r0, #0]
 800abe2:	8002      	strhle	r2, [r0, #0]
 800abe4:	4287      	cmp	r7, r0
 800abe6:	d1f6      	bne.n	800abd6 <acc_alg_basic_subtract_mean_uint16.part.0+0x5e>
 800abe8:	e7ed      	b.n	800abc6 <acc_alg_basic_subtract_mean_uint16.part.0+0x4e>
 800abea:	b103      	cbz	r3, 800abee <acc_alg_basic_subtract_mean_uint16.part.0+0x76>
 800abec:	8019      	strh	r1, [r3, #0]
 800abee:	4770      	bx	lr

0800abf0 <acc_alg_basic_subtract_mean_uint16>:
 800abf0:	b109      	cbz	r1, 800abf6 <acc_alg_basic_subtract_mean_uint16+0x6>
 800abf2:	f7ff bfc1 	b.w	800ab78 <acc_alg_basic_subtract_mean_uint16.part.0>
 800abf6:	b430      	push	{r4, r5}
 800abf8:	461c      	mov	r4, r3
 800abfa:	b103      	cbz	r3, 800abfe <acc_alg_basic_subtract_mean_uint16+0xe>
 800abfc:	8021      	strh	r1, [r4, #0]
 800abfe:	bc30      	pop	{r4, r5}
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop

0800ac04 <acc_alg_power_bins>:
 800ac04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d03d      	beq.n	800ac88 <acc_alg_power_bins+0x84>
 800ac0c:	1e87      	subs	r7, r0, #2
 800ac0e:	004c      	lsls	r4, r1, #1
 800ac10:	eb04 0e07 	add.w	lr, r4, r7
 800ac14:	46bc      	mov	ip, r7
 800ac16:	2500      	movs	r5, #0
 800ac18:	f83c 6f02 	ldrh.w	r6, [ip, #2]!
 800ac1c:	45f4      	cmp	ip, lr
 800ac1e:	4435      	add	r5, r6
 800ac20:	d1fa      	bne.n	800ac18 <acc_alg_power_bins+0x14>
 800ac22:	fbb5 f5f1 	udiv	r5, r5, r1
 800ac26:	b2ae      	uxth	r6, r5
 800ac28:	f837 5f02 	ldrh.w	r5, [r7, #2]!
 800ac2c:	42b5      	cmp	r5, r6
 800ac2e:	bf8c      	ite	hi
 800ac30:	1bad      	subhi	r5, r5, r6
 800ac32:	1b75      	subls	r5, r6, r5
 800ac34:	b2ad      	uxth	r5, r5
 800ac36:	45bc      	cmp	ip, r7
 800ac38:	803d      	strh	r5, [r7, #0]
 800ac3a:	d1f5      	bne.n	800ac28 <acc_alg_power_bins+0x24>
 800ac3c:	b313      	cbz	r3, 800ac84 <acc_alg_power_bins+0x80>
 800ac3e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ac42:	e00b      	b.n	800ac5c <acc_alg_power_bins+0x58>
 800ac44:	8014      	strh	r4, [r2, #0]
 800ac46:	46a6      	mov	lr, r4
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	4470      	add	r0, lr
 800ac4c:	eba1 0104 	sub.w	r1, r1, r4
 800ac50:	f1ac 0c02 	sub.w	ip, ip, #2
 800ac54:	f102 0202 	add.w	r2, r2, #2
 800ac58:	d014      	beq.n	800ac84 <acc_alg_power_bins+0x80>
 800ac5a:	004c      	lsls	r4, r1, #1
 800ac5c:	441c      	add	r4, r3
 800ac5e:	fbb4 f4fc 	udiv	r4, r4, ip
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	d0ee      	beq.n	800ac44 <acc_alg_power_bins+0x40>
 800ac66:	1e85      	subs	r5, r0, #2
 800ac68:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800ac6c:	eb05 080e 	add.w	r8, r5, lr
 800ac70:	2600      	movs	r6, #0
 800ac72:	f835 7f02 	ldrh.w	r7, [r5, #2]!
 800ac76:	45a8      	cmp	r8, r5
 800ac78:	443e      	add	r6, r7
 800ac7a:	d1fa      	bne.n	800ac72 <acc_alg_power_bins+0x6e>
 800ac7c:	fbb6 f6f4 	udiv	r6, r6, r4
 800ac80:	8016      	strh	r6, [r2, #0]
 800ac82:	e7e1      	b.n	800ac48 <acc_alg_power_bins+0x44>
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	4b02      	ldr	r3, [pc, #8]	; (800ac94 <acc_alg_power_bins+0x90>)
 800ac8a:	4a03      	ldr	r2, [pc, #12]	; (800ac98 <acc_alg_power_bins+0x94>)
 800ac8c:	4803      	ldr	r0, [pc, #12]	; (800ac9c <acc_alg_power_bins+0x98>)
 800ac8e:	2125      	movs	r1, #37	; 0x25
 800ac90:	f001 fa08 	bl	800c0a4 <__assert_func>
 800ac94:	08014638 	.word	0x08014638
 800ac98:	08014978 	.word	0x08014978
 800ac9c:	0801498c 	.word	0x0801498c

0800aca0 <acc_confprogram_modify_bin_sensor>:
 800aca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aca4:	b085      	sub	sp, #20
 800aca6:	2401      	movs	r4, #1
 800aca8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acaa:	fa04 f303 	lsl.w	r3, r4, r3
 800acae:	42ab      	cmp	r3, r5
 800acb0:	f103 38ff 	add.w	r8, r3, #4294967295
 800acb4:	d91b      	bls.n	800acee <acc_confprogram_modify_bin_sensor+0x4e>
 800acb6:	b28e      	uxth	r6, r1
 800acb8:	4691      	mov	r9, r2
 800acba:	4631      	mov	r1, r6
 800acbc:	4623      	mov	r3, r4
 800acbe:	aa02      	add	r2, sp, #8
 800acc0:	4607      	mov	r7, r0
 800acc2:	f7fd fd11 	bl	80086e8 <acc_sensor_conf_read>
 800acc6:	9b02      	ldr	r3, [sp, #8]
 800acc8:	fa08 f809 	lsl.w	r8, r8, r9
 800accc:	ea23 0308 	bic.w	r3, r3, r8
 800acd0:	aa04      	add	r2, sp, #16
 800acd2:	fa05 f509 	lsl.w	r5, r5, r9
 800acd6:	431d      	orrs	r5, r3
 800acd8:	4638      	mov	r0, r7
 800acda:	f842 5d04 	str.w	r5, [r2, #-4]!
 800acde:	4631      	mov	r1, r6
 800ace0:	4623      	mov	r3, r4
 800ace2:	f7fd fd45 	bl	8008770 <acc_sensor_conf_write_32bit>
 800ace6:	4620      	mov	r0, r4
 800ace8:	b005      	add	sp, #20
 800acea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acee:	f8cd 8000 	str.w	r8, [sp]
 800acf2:	462b      	mov	r3, r5
 800acf4:	4a04      	ldr	r2, [pc, #16]	; (800ad08 <acc_confprogram_modify_bin_sensor+0x68>)
 800acf6:	4905      	ldr	r1, [pc, #20]	; (800ad0c <acc_confprogram_modify_bin_sensor+0x6c>)
 800acf8:	2000      	movs	r0, #0
 800acfa:	f7fb ffed 	bl	8006cd8 <acc_log_rss>
 800acfe:	2000      	movs	r0, #0
 800ad00:	b005      	add	sp, #20
 800ad02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad06:	bf00      	nop
 800ad08:	08016e68 	.word	0x08016e68
 800ad0c:	08016e94 	.word	0x08016e94

0800ad10 <acc_confprogram_modify_bin>:
 800ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad14:	9e06      	ldr	r6, [sp, #24]
 800ad16:	2401      	movs	r4, #1
 800ad18:	fa04 f303 	lsl.w	r3, r4, r3
 800ad1c:	42b3      	cmp	r3, r6
 800ad1e:	f103 35ff 	add.w	r5, r3, #4294967295
 800ad22:	d90e      	bls.n	800ad42 <acc_confprogram_modify_bin+0x32>
 800ad24:	1844      	adds	r4, r0, r1
 800ad26:	4620      	mov	r0, r4
 800ad28:	4617      	mov	r7, r2
 800ad2a:	f7fe f937 	bl	8008f9c <acc_utils_uint8_to_uint32_swap>
 800ad2e:	40bd      	lsls	r5, r7
 800ad30:	ea20 0005 	bic.w	r0, r0, r5
 800ad34:	40be      	lsls	r6, r7
 800ad36:	4621      	mov	r1, r4
 800ad38:	4330      	orrs	r0, r6
 800ad3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3e:	f7fe b931 	b.w	8008fa4 <acc_utils_uint32_to_uint8_swap>
 800ad42:	9506      	str	r5, [sp, #24]
 800ad44:	4633      	mov	r3, r6
 800ad46:	4a03      	ldr	r2, [pc, #12]	; (800ad54 <acc_confprogram_modify_bin+0x44>)
 800ad48:	4903      	ldr	r1, [pc, #12]	; (800ad58 <acc_confprogram_modify_bin+0x48>)
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	f7fb bfc2 	b.w	8006cd8 <acc_log_rss>
 800ad54:	08016e68 	.word	0x08016e68
 800ad58:	08016e94 	.word	0x08016e94

0800ad5c <acc_confprogram_modify_runif_sensor>:
 800ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	460d      	mov	r5, r1
 800ad64:	4617      	mov	r7, r2
 800ad66:	4698      	mov	r8, r3
 800ad68:	4604      	mov	r4, r0
 800ad6a:	f7fd fe29 	bl	80089c0 <acc_sensor_protocol_is_sensor_running>
 800ad6e:	bb40      	cbnz	r0, 800adc2 <acc_confprogram_modify_runif_sensor+0x66>
 800ad70:	b2ae      	uxth	r6, r5
 800ad72:	2301      	movs	r3, #1
 800ad74:	4631      	mov	r1, r6
 800ad76:	aa02      	add	r2, sp, #8
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7fd fcb5 	bl	80086e8 <acc_sensor_conf_read>
 800ad7e:	9b02      	ldr	r3, [sp, #8]
 800ad80:	f023 030f 	bic.w	r3, r3, #15
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	d10f      	bne.n	800adac <acc_confprogram_modify_runif_sensor+0x50>
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	4a12      	ldr	r2, [pc, #72]	; (800add8 <acc_confprogram_modify_runif_sensor+0x7c>)
 800ad90:	4912      	ldr	r1, [pc, #72]	; (800addc <acc_confprogram_modify_runif_sensor+0x80>)
 800ad92:	2004      	movs	r0, #4
 800ad94:	f7fb ffa0 	bl	8006cd8 <acc_log_rss>
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	aa03      	add	r2, sp, #12
 800ada0:	f7fd fce6 	bl	8008770 <acc_sensor_conf_write_32bit>
 800ada4:	2001      	movs	r0, #1
 800ada6:	b004      	add	sp, #16
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	ea43 0007 	orr.w	r0, r3, r7
 800adb0:	9003      	str	r0, [sp, #12]
 800adb2:	9700      	str	r7, [sp, #0]
 800adb4:	462b      	mov	r3, r5
 800adb6:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <acc_confprogram_modify_runif_sensor+0x84>)
 800adb8:	4908      	ldr	r1, [pc, #32]	; (800addc <acc_confprogram_modify_runif_sensor+0x80>)
 800adba:	2004      	movs	r0, #4
 800adbc:	f7fb ff8c 	bl	8006cd8 <acc_log_rss>
 800adc0:	e7ea      	b.n	800ad98 <acc_confprogram_modify_runif_sensor+0x3c>
 800adc2:	4623      	mov	r3, r4
 800adc4:	4a07      	ldr	r2, [pc, #28]	; (800ade4 <acc_confprogram_modify_runif_sensor+0x88>)
 800adc6:	4905      	ldr	r1, [pc, #20]	; (800addc <acc_confprogram_modify_runif_sensor+0x80>)
 800adc8:	2000      	movs	r0, #0
 800adca:	f7fb ff85 	bl	8006cd8 <acc_log_rss>
 800adce:	2000      	movs	r0, #0
 800add0:	b004      	add	sp, #16
 800add2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add6:	bf00      	nop
 800add8:	08016f40 	.word	0x08016f40
 800addc:	08016e94 	.word	0x08016e94
 800ade0:	08016f08 	.word	0x08016f08
 800ade4:	08016ed4 	.word	0x08016ed4

0800ade8 <acc_confprogram_modify_runif>:
 800ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adec:	1885      	adds	r5, r0, r2
 800adee:	b082      	sub	sp, #8
 800adf0:	4628      	mov	r0, r5
 800adf2:	4614      	mov	r4, r2
 800adf4:	460f      	mov	r7, r1
 800adf6:	4698      	mov	r8, r3
 800adf8:	f7fe f8d0 	bl	8008f9c <acc_utils_uint8_to_uint32_swap>
 800adfc:	08a3      	lsrs	r3, r4, #2
 800adfe:	f020 060f 	bic.w	r6, r0, #15
 800ae02:	9700      	str	r7, [sp, #0]
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	d10b      	bne.n	800ae22 <acc_confprogram_modify_runif+0x3a>
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <acc_confprogram_modify_runif+0x54>)
 800ae0c:	490c      	ldr	r1, [pc, #48]	; (800ae40 <acc_confprogram_modify_runif+0x58>)
 800ae0e:	2004      	movs	r0, #4
 800ae10:	f7fb ff62 	bl	8006cd8 <acc_log_rss>
 800ae14:	4629      	mov	r1, r5
 800ae16:	4630      	mov	r0, r6
 800ae18:	b002      	add	sp, #8
 800ae1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1e:	f7fe b8c1 	b.w	8008fa4 <acc_utils_uint32_to_uint8_swap>
 800ae22:	4a08      	ldr	r2, [pc, #32]	; (800ae44 <acc_confprogram_modify_runif+0x5c>)
 800ae24:	4906      	ldr	r1, [pc, #24]	; (800ae40 <acc_confprogram_modify_runif+0x58>)
 800ae26:	2004      	movs	r0, #4
 800ae28:	f7fb ff56 	bl	8006cd8 <acc_log_rss>
 800ae2c:	433e      	orrs	r6, r7
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4630      	mov	r0, r6
 800ae32:	b002      	add	sp, #8
 800ae34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	f7fe b8b4 	b.w	8008fa4 <acc_utils_uint32_to_uint8_swap>
 800ae3c:	08016ea0 	.word	0x08016ea0
 800ae40:	08016e94 	.word	0x08016e94
 800ae44:	08016f08 	.word	0x08016f08

0800ae48 <acc_confprogram_patch>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800ae50:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ae54:	b083      	sub	sp, #12
 800ae56:	6871      	ldr	r1, [r6, #4]
 800ae58:	b1e1      	cbz	r1, 800ae94 <acc_confprogram_patch+0x4c>
 800ae5a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800af18 <acc_confprogram_patch+0xd0>
 800ae5e:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af1c <acc_confprogram_patch+0xd4>
 800ae62:	461f      	mov	r7, r3
 800ae64:	4681      	mov	r9, r0
 800ae66:	4690      	mov	r8, r2
 800ae68:	2500      	movs	r5, #0
 800ae6a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800ae6e:	68b2      	ldr	r2, [r6, #8]
 800ae70:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800ae74:	009c      	lsls	r4, r3, #2
 800ae76:	2a03      	cmp	r2, #3
 800ae78:	d809      	bhi.n	800ae8e <acc_confprogram_patch+0x46>
 800ae7a:	e8df f002 	tbb	[pc, r2]
 800ae7e:	0e21      	.short	0x0e21
 800ae80:	0233      	.short	0x0233
 800ae82:	4651      	mov	r1, sl
 800ae84:	465a      	mov	r2, fp
 800ae86:	2000      	movs	r0, #0
 800ae88:	f7fb ff26 	bl	8006cd8 <acc_log_rss>
 800ae8c:	6871      	ldr	r1, [r6, #4]
 800ae8e:	3501      	adds	r5, #1
 800ae90:	42a9      	cmp	r1, r5
 800ae92:	d8ea      	bhi.n	800ae6a <acc_confprogram_patch+0x22>
 800ae94:	b003      	add	sp, #12
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9a:	4643      	mov	r3, r8
 800ae9c:	4a1b      	ldr	r2, [pc, #108]	; (800af0c <acc_confprogram_patch+0xc4>)
 800ae9e:	9700      	str	r7, [sp, #0]
 800aea0:	4651      	mov	r1, sl
 800aea2:	2004      	movs	r0, #4
 800aea4:	f7fb ff18 	bl	8006cd8 <acc_log_rss>
 800aea8:	68b3      	ldr	r3, [r6, #8]
 800aeaa:	441c      	add	r4, r3
 800aeac:	1c3b      	adds	r3, r7, #0
 800aeae:	6861      	ldr	r1, [r4, #4]
 800aeb0:	8922      	ldrh	r2, [r4, #8]
 800aeb2:	bf18      	it	ne
 800aeb4:	2301      	movne	r3, #1
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f7ff ff96 	bl	800ade8 <acc_confprogram_modify_runif>
 800aebc:	6871      	ldr	r1, [r6, #4]
 800aebe:	e7e6      	b.n	800ae8e <acc_confprogram_patch+0x46>
 800aec0:	4643      	mov	r3, r8
 800aec2:	4a13      	ldr	r2, [pc, #76]	; (800af10 <acc_confprogram_patch+0xc8>)
 800aec4:	9700      	str	r7, [sp, #0]
 800aec6:	4651      	mov	r1, sl
 800aec8:	2004      	movs	r0, #4
 800aeca:	f7fb ff05 	bl	8006cd8 <acc_log_rss>
 800aece:	68b3      	ldr	r3, [r6, #8]
 800aed0:	441c      	add	r4, r3
 800aed2:	4648      	mov	r0, r9
 800aed4:	88a1      	ldrh	r1, [r4, #4]
 800aed6:	79e3      	ldrb	r3, [r4, #7]
 800aed8:	79a2      	ldrb	r2, [r4, #6]
 800aeda:	9700      	str	r7, [sp, #0]
 800aedc:	f7ff ff18 	bl	800ad10 <acc_confprogram_modify_bin>
 800aee0:	6871      	ldr	r1, [r6, #4]
 800aee2:	e7d4      	b.n	800ae8e <acc_confprogram_patch+0x46>
 800aee4:	4643      	mov	r3, r8
 800aee6:	4a0b      	ldr	r2, [pc, #44]	; (800af14 <acc_confprogram_patch+0xcc>)
 800aee8:	9700      	str	r7, [sp, #0]
 800aeea:	4651      	mov	r1, sl
 800aeec:	2004      	movs	r0, #4
 800aeee:	f7fb fef3 	bl	8006cd8 <acc_log_rss>
 800aef2:	68b3      	ldr	r3, [r6, #8]
 800aef4:	441c      	add	r4, r3
 800aef6:	fab7 f387 	clz	r3, r7
 800aefa:	6861      	ldr	r1, [r4, #4]
 800aefc:	8922      	ldrh	r2, [r4, #8]
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	4648      	mov	r0, r9
 800af02:	f7ff ff71 	bl	800ade8 <acc_confprogram_modify_runif>
 800af06:	6871      	ldr	r1, [r6, #4]
 800af08:	e7c1      	b.n	800ae8e <acc_confprogram_patch+0x46>
 800af0a:	bf00      	nop
 800af0c:	08016fa4 	.word	0x08016fa4
 800af10:	08016f70 	.word	0x08016f70
 800af14:	08016fd4 	.word	0x08016fd4
 800af18:	08017008 	.word	0x08017008
 800af1c:	08016e94 	.word	0x08016e94

0800af20 <acc_confprogram_live_patch>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800af28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af2c:	b085      	sub	sp, #20
 800af2e:	6872      	ldr	r2, [r6, #4]
 800af30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800af32:	2a00      	cmp	r2, #0
 800af34:	d066      	beq.n	800b004 <acc_confprogram_live_patch+0xe4>
 800af36:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800b020 <acc_confprogram_live_patch+0x100>
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	4689      	mov	r9, r1
 800af3e:	4680      	mov	r8, r0
 800af40:	2500      	movs	r5, #0
 800af42:	f04f 0b01 	mov.w	fp, #1
 800af46:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800af4a:	68b3      	ldr	r3, [r6, #8]
 800af4c:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
 800af50:	00a4      	lsls	r4, r4, #2
 800af52:	2b03      	cmp	r3, #3
 800af54:	d80b      	bhi.n	800af6e <acc_confprogram_live_patch+0x4e>
 800af56:	e8df f003 	tbb	[pc, r3]
 800af5a:	3f27      	.short	0x3f27
 800af5c:	0211      	.short	0x0211
 800af5e:	4a2c      	ldr	r2, [pc, #176]	; (800b010 <acc_confprogram_live_patch+0xf0>)
 800af60:	4651      	mov	r1, sl
 800af62:	2000      	movs	r0, #0
 800af64:	f7fb feb8 	bl	8006cd8 <acc_log_rss>
 800af68:	6872      	ldr	r2, [r6, #4]
 800af6a:	f04f 0b00 	mov.w	fp, #0
 800af6e:	3501      	adds	r5, #1
 800af70:	42aa      	cmp	r2, r5
 800af72:	d8e8      	bhi.n	800af46 <acc_confprogram_live_patch+0x26>
 800af74:	4658      	mov	r0, fp
 800af76:	b005      	add	sp, #20
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	4a25      	ldr	r2, [pc, #148]	; (800b014 <acc_confprogram_live_patch+0xf4>)
 800af80:	9700      	str	r7, [sp, #0]
 800af82:	4651      	mov	r1, sl
 800af84:	2004      	movs	r0, #4
 800af86:	f7fb fea7 	bl	8006cd8 <acc_log_rss>
 800af8a:	68b3      	ldr	r3, [r6, #8]
 800af8c:	441c      	add	r4, r3
 800af8e:	fab7 f387 	clz	r3, r7
 800af92:	8921      	ldrh	r1, [r4, #8]
 800af94:	6862      	ldr	r2, [r4, #4]
 800af96:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800af9a:	095b      	lsrs	r3, r3, #5
 800af9c:	4640      	mov	r0, r8
 800af9e:	f7ff fedd 	bl	800ad5c <acc_confprogram_modify_runif_sensor>
 800afa2:	b1a8      	cbz	r0, 800afd0 <acc_confprogram_live_patch+0xb0>
 800afa4:	6872      	ldr	r2, [r6, #4]
 800afa6:	e7e2      	b.n	800af6e <acc_confprogram_live_patch+0x4e>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	4a1b      	ldr	r2, [pc, #108]	; (800b018 <acc_confprogram_live_patch+0xf8>)
 800afac:	9700      	str	r7, [sp, #0]
 800afae:	4651      	mov	r1, sl
 800afb0:	2004      	movs	r0, #4
 800afb2:	f7fb fe91 	bl	8006cd8 <acc_log_rss>
 800afb6:	68b3      	ldr	r3, [r6, #8]
 800afb8:	441c      	add	r4, r3
 800afba:	4640      	mov	r0, r8
 800afbc:	88a1      	ldrh	r1, [r4, #4]
 800afbe:	79e3      	ldrb	r3, [r4, #7]
 800afc0:	79a2      	ldrb	r2, [r4, #6]
 800afc2:	9700      	str	r7, [sp, #0]
 800afc4:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800afc8:	f7ff fe6a 	bl	800aca0 <acc_confprogram_modify_bin_sensor>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1e9      	bne.n	800afa4 <acc_confprogram_live_patch+0x84>
 800afd0:	f04f 0b00 	mov.w	fp, #0
 800afd4:	6872      	ldr	r2, [r6, #4]
 800afd6:	e7ca      	b.n	800af6e <acc_confprogram_live_patch+0x4e>
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	4a10      	ldr	r2, [pc, #64]	; (800b01c <acc_confprogram_live_patch+0xfc>)
 800afdc:	9700      	str	r7, [sp, #0]
 800afde:	4651      	mov	r1, sl
 800afe0:	2004      	movs	r0, #4
 800afe2:	f7fb fe79 	bl	8006cd8 <acc_log_rss>
 800afe6:	68b3      	ldr	r3, [r6, #8]
 800afe8:	441c      	add	r4, r3
 800afea:	1c3b      	adds	r3, r7, #0
 800afec:	8921      	ldrh	r1, [r4, #8]
 800afee:	6862      	ldr	r2, [r4, #4]
 800aff0:	bf18      	it	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	eb09 0191 	add.w	r1, r9, r1, lsr #2
 800aff8:	4640      	mov	r0, r8
 800affa:	f7ff feaf 	bl	800ad5c <acc_confprogram_modify_runif_sensor>
 800affe:	2800      	cmp	r0, #0
 800b000:	d0e6      	beq.n	800afd0 <acc_confprogram_live_patch+0xb0>
 800b002:	e7cf      	b.n	800afa4 <acc_confprogram_live_patch+0x84>
 800b004:	f04f 0b01 	mov.w	fp, #1
 800b008:	4658      	mov	r0, fp
 800b00a:	b005      	add	sp, #20
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	08016e34 	.word	0x08016e34
 800b014:	08016e04 	.word	0x08016e04
 800b018:	08016da4 	.word	0x08016da4
 800b01c:	08016dd4 	.word	0x08016dd4
 800b020:	08016e94 	.word	0x08016e94

0800b024 <acc_confprogram_get_default_value>:
 800b024:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b028:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <run_area_calibration>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	ed2d 8b02 	vpush	{d8}
 800b038:	4bc6      	ldr	r3, [pc, #792]	; (800b354 <run_area_calibration+0x324>)
 800b03a:	f8df b35c 	ldr.w	fp, [pc, #860]	; 800b398 <run_area_calibration+0x368>
 800b03e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b040:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800b358 <run_area_calibration+0x328>
 800b044:	ed9f 8ac5 	vldr	s16, [pc, #788]	; 800b35c <run_area_calibration+0x32c>
 800b048:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800b04c:	f20d 18ff 	addw	r8, sp, #511	; 0x1ff
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	4604      	mov	r4, r0
 800b054:	9106      	str	r1, [sp, #24]
 800b056:	af23      	add	r7, sp, #140	; 0x8c
 800b058:	46c2      	mov	sl, r8
 800b05a:	2500      	movs	r5, #0
 800b05c:	f8cd 801c 	str.w	r8, [sp, #28]
 800b060:	f89b 3000 	ldrb.w	r3, [fp]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f040 8168 	bne.w	800b33a <run_area_calibration+0x30a>
 800b06a:	a90d      	add	r1, sp, #52	; 0x34
 800b06c:	b2a8      	uxth	r0, r5
 800b06e:	f7fe fa8b 	bl	8009588 <acc_cpd_area_calibration_calculate_area_settings>
 800b072:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	227f      	movs	r2, #127	; 0x7f
 800b07a:	2319      	movs	r3, #25
 800b07c:	2100      	movs	r1, #0
 800b07e:	4620      	mov	r0, r4
 800b080:	f7fd fb0c 	bl	800869c <acc_sensor_reg_field_write>
 800b084:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	f44f 527e 	mov.w	r2, #16256	; 0x3f80
 800b08e:	2319      	movs	r3, #25
 800b090:	2107      	movs	r1, #7
 800b092:	4620      	mov	r0, r4
 800b094:	f7fd fb02 	bl	800869c <acc_sensor_reg_field_write>
 800b098:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	231a      	movs	r3, #26
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f7fd faf9 	bl	800869c <acc_sensor_reg_field_write>
 800b0aa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	231a      	movs	r3, #26
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7fd faf0 	bl	800869c <acc_sensor_reg_field_write>
 800b0bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	220c      	movs	r2, #12
 800b0c4:	231a      	movs	r3, #26
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f7fd fae7 	bl	800869c <acc_sensor_reg_field_write>
 800b0ce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	2210      	movs	r2, #16
 800b0d6:	231a      	movs	r3, #26
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7fd fade 	bl	800869c <acc_sensor_reg_field_write>
 800b0e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	231a      	movs	r3, #26
 800b0ea:	2105      	movs	r1, #5
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7fd fad5 	bl	800869c <acc_sensor_reg_field_write>
 800b0f2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	22c0      	movs	r2, #192	; 0xc0
 800b0fa:	231a      	movs	r3, #26
 800b0fc:	2106      	movs	r1, #6
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7fd facc 	bl	800869c <acc_sensor_reg_field_write>
 800b104:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b10e:	231a      	movs	r3, #26
 800b110:	2108      	movs	r1, #8
 800b112:	4620      	mov	r0, r4
 800b114:	f7fd fac2 	bl	800869c <acc_sensor_reg_field_write>
 800b118:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b122:	231a      	movs	r3, #26
 800b124:	2109      	movs	r1, #9
 800b126:	4620      	mov	r0, r4
 800b128:	f7fd fab8 	bl	800869c <acc_sensor_reg_field_write>
 800b12c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	210a      	movs	r1, #10
 800b134:	4620      	mov	r0, r4
 800b136:	231a      	movs	r3, #26
 800b138:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b13c:	f7fd faae 	bl	800869c <acc_sensor_reg_field_write>
 800b140:	9905      	ldr	r1, [sp, #20]
 800b142:	4620      	mov	r0, r4
 800b144:	f7fd fcbc 	bl	8008ac0 <acc_sensor_protocol_run_program>
 800b148:	b1e8      	cbz	r0, 800b186 <run_area_calibration+0x156>
 800b14a:	aa09      	add	r2, sp, #36	; 0x24
 800b14c:	4984      	ldr	r1, [pc, #528]	; (800b360 <run_area_calibration+0x330>)
 800b14e:	4620      	mov	r0, r4
 800b150:	f7fd fcf6 	bl	8008b40 <acc_sensor_protocol_try_get_indication>
 800b154:	2800      	cmp	r0, #0
 800b156:	f000 80f7 	beq.w	800b348 <run_area_calibration+0x318>
 800b15a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b15e:	2b01      	cmp	r3, #1
 800b160:	f000 811c 	beq.w	800b39c <run_area_calibration+0x36c>
 800b164:	2b05      	cmp	r3, #5
 800b166:	d014      	beq.n	800b192 <run_area_calibration+0x162>
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	4a7e      	ldr	r2, [pc, #504]	; (800b364 <run_area_calibration+0x334>)
 800b16c:	4b7e      	ldr	r3, [pc, #504]	; (800b368 <run_area_calibration+0x338>)
 800b16e:	497f      	ldr	r1, [pc, #508]	; (800b36c <run_area_calibration+0x33c>)
 800b170:	2000      	movs	r0, #0
 800b172:	f7fb fdb1 	bl	8006cd8 <acc_log_rss>
 800b176:	2400      	movs	r4, #0
 800b178:	4620      	mov	r0, r4
 800b17a:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 800b17e:	ecbd 8b02 	vpop	{d8}
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	4b7a      	ldr	r3, [pc, #488]	; (800b370 <run_area_calibration+0x340>)
 800b188:	4a7a      	ldr	r2, [pc, #488]	; (800b374 <run_area_calibration+0x344>)
 800b18a:	4978      	ldr	r1, [pc, #480]	; (800b36c <run_area_calibration+0x33c>)
 800b18c:	f7fb fda4 	bl	8006cd8 <acc_log_rss>
 800b190:	e7f1      	b.n	800b176 <run_area_calibration+0x146>
 800b192:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b196:	2b00      	cmp	r3, #0
 800b198:	f040 811c 	bne.w	800b3d4 <run_area_calibration+0x3a4>
 800b19c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800b1a0:	b12b      	cbz	r3, 800b1ae <run_area_calibration+0x17e>
 800b1a2:	4b75      	ldr	r3, [pc, #468]	; (800b378 <run_area_calibration+0x348>)
 800b1a4:	4a75      	ldr	r2, [pc, #468]	; (800b37c <run_area_calibration+0x34c>)
 800b1a6:	4971      	ldr	r1, [pc, #452]	; (800b36c <run_area_calibration+0x33c>)
 800b1a8:	2004      	movs	r0, #4
 800b1aa:	f7fb fd95 	bl	8006cd8 <acc_log_rss>
 800b1ae:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800b1b2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1b4:	2105      	movs	r1, #5
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1ba:	f7fd fd19 	bl	8008bf0 <acc_sensor_protocol_get_indication_payload>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f000 80fc 	beq.w	800b3bc <run_area_calibration+0x38c>
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f7fd fd99 	bl	8008cfc <acc_sensor_protocol_respond_to_indication>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	f000 8109 	beq.w	800b3e2 <run_area_calibration+0x3b2>
 800b1d0:	e9dd 960b 	ldrd	r9, r6, [sp, #44]	; 0x2c
 800b1d4:	fa1f f889 	uxth.w	r8, r9
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4641      	mov	r1, r8
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b1e2:	f7ff fd05 	bl	800abf0 <acc_alg_basic_subtract_mean_uint16>
 800b1e6:	f89b 3000 	ldrb.w	r3, [fp]
 800b1ea:	b123      	cbz	r3, 800b1f6 <run_area_calibration+0x1c6>
 800b1ec:	4a64      	ldr	r2, [pc, #400]	; (800b380 <run_area_calibration+0x350>)
 800b1ee:	495f      	ldr	r1, [pc, #380]	; (800b36c <run_area_calibration+0x33c>)
 800b1f0:	2002      	movs	r0, #2
 800b1f2:	f7fb fd71 	bl	8006cd8 <acc_log_rss>
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff fa11 	bl	800a620 <acc_sensor_diagnostics_print_buffer_u16>
 800b1fe:	aa14      	add	r2, sp, #80	; 0x50
 800b200:	eef0 0a68 	vmov.f32	s1, s17
 800b204:	eeb0 0a48 	vmov.f32	s0, s16
 800b208:	ab13      	add	r3, sp, #76	; 0x4c
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	4641      	mov	r1, r8
 800b20e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b212:	4630      	mov	r0, r6
 800b214:	f000 fc80 	bl	800bb18 <acc_alg_filter_gauss_mask>
 800b218:	4641      	mov	r1, r8
 800b21a:	ab15      	add	r3, sp, #84	; 0x54
 800b21c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b220:	4630      	mov	r0, r6
 800b222:	f000 fc4b 	bl	800babc <acc_alg_basic_energy>
 800b226:	4630      	mov	r0, r6
 800b228:	f000 fdf4 	bl	800be14 <acc_alg_area_check_center_frequency>
 800b22c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b22e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b230:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800b234:	3501      	adds	r5, #1
 800b236:	f80a 0f01 	strb.w	r0, [sl, #1]!
 800b23a:	f847 2b04 	str.w	r2, [r7], #4
 800b23e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b240:	67bb      	str	r3, [r7, #120]	; 0x78
 800b242:	2d1f      	cmp	r5, #31
 800b244:	f47f af0c 	bne.w	800b060 <run_area_calibration+0x30>
 800b248:	f89b 3000 	ldrb.w	r3, [fp]
 800b24c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 80d8 	bne.w	800b406 <run_area_calibration+0x3d6>
 800b256:	211f      	movs	r1, #31
 800b258:	a823      	add	r0, sp, #140	; 0x8c
 800b25a:	f7ff fa17 	bl	800a68c <acc_sensor_diagnostics_print_buffer_f32>
 800b25e:	f89b 3000 	ldrb.w	r3, [fp]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f040 80c9 	bne.w	800b3fa <run_area_calibration+0x3ca>
 800b268:	ac42      	add	r4, sp, #264	; 0x108
 800b26a:	4620      	mov	r0, r4
 800b26c:	211f      	movs	r1, #31
 800b26e:	f7ff fa0d 	bl	800a68c <acc_sensor_diagnostics_print_buffer_f32>
 800b272:	f89b 3000 	ldrb.w	r3, [fp]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f040 80cb 	bne.w	800b412 <run_area_calibration+0x3e2>
 800b27c:	a861      	add	r0, sp, #388	; 0x184
 800b27e:	211f      	movs	r1, #31
 800b280:	f7ff fa04 	bl	800a68c <acc_sensor_diagnostics_print_buffer_f32>
 800b284:	f89b 3000 	ldrb.w	r3, [fp]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f040 80b0 	bne.w	800b3ee <run_area_calibration+0x3be>
 800b28e:	211f      	movs	r1, #31
 800b290:	a880      	add	r0, sp, #512	; 0x200
 800b292:	f7ff f9cd 	bl	800a630 <acc_sensor_diagnostics_print_buffer_bool>
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80dd 	beq.w	800b458 <run_area_calibration+0x428>
 800b29e:	ab0b      	add	r3, sp, #44	; 0x2c
 800b2a0:	e9cd 4300 	strd	r4, r3, [sp]
 800b2a4:	aa13      	add	r2, sp, #76	; 0x4c
 800b2a6:	a961      	add	r1, sp, #388	; 0x184
 800b2a8:	ab23      	add	r3, sp, #140	; 0x8c
 800b2aa:	201f      	movs	r0, #31
 800b2ac:	f000 fdec 	bl	800be88 <acc_alg_area_selection>
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	f000 80b3 	beq.w	800b41e <run_area_calibration+0x3ee>
 800b2b8:	f20d 221e 	addw	r2, sp, #542	; 0x21e
 800b2bc:	2400      	movs	r4, #0
 800b2be:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800b2c2:	4590      	cmp	r8, r2
 800b2c4:	441c      	add	r4, r3
 800b2c6:	d1fa      	bne.n	800b2be <run_area_calibration+0x28e>
 800b2c8:	9400      	str	r4, [sp, #0]
 800b2ca:	4b2e      	ldr	r3, [pc, #184]	; (800b384 <run_area_calibration+0x354>)
 800b2cc:	4a2e      	ldr	r2, [pc, #184]	; (800b388 <run_area_calibration+0x358>)
 800b2ce:	4927      	ldr	r1, [pc, #156]	; (800b36c <run_area_calibration+0x33c>)
 800b2d0:	2004      	movs	r0, #4
 800b2d2:	f7fb fd01 	bl	8006cd8 <acc_log_rss>
 800b2d6:	2c1a      	cmp	r4, #26
 800b2d8:	f240 80a8 	bls.w	800b42c <run_area_calibration+0x3fc>
 800b2dc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800b2e0:	ab23      	add	r3, sp, #140	; 0x8c
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f893 4174 	ldrb.w	r4, [r3, #372]	; 0x174
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	f000 80ae 	beq.w	800b44a <run_area_calibration+0x41a>
 800b2ee:	f1a2 030b 	sub.w	r3, r2, #11
 800b2f2:	2b08      	cmp	r3, #8
 800b2f4:	f240 80a1 	bls.w	800b43a <run_area_calibration+0x40a>
 800b2f8:	ab23      	add	r3, sp, #140	; 0x8c
 800b2fa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800b2fe:	ed91 7a3e 	vldr	s14, [r1, #248]	; 0xf8
 800b302:	edd1 7a00 	vldr	s15, [r1]
 800b306:	4b1f      	ldr	r3, [pc, #124]	; (800b384 <run_area_calibration+0x354>)
 800b308:	9200      	str	r2, [sp, #0]
 800b30a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b30e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b31a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b31e:	4a1b      	ldr	r2, [pc, #108]	; (800b38c <run_area_calibration+0x35c>)
 800b320:	ed8d 7a02 	vstr	s14, [sp, #8]
 800b324:	edcd 7a01 	vstr	s15, [sp, #4]
 800b328:	4910      	ldr	r1, [pc, #64]	; (800b36c <run_area_calibration+0x33c>)
 800b32a:	2002      	movs	r0, #2
 800b32c:	f7fb fcd4 	bl	8006cd8 <acc_log_rss>
 800b330:	9a06      	ldr	r2, [sp, #24]
 800b332:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b336:	8013      	strh	r3, [r2, #0]
 800b338:	e71e      	b.n	800b178 <run_area_calibration+0x148>
 800b33a:	462b      	mov	r3, r5
 800b33c:	4a14      	ldr	r2, [pc, #80]	; (800b390 <run_area_calibration+0x360>)
 800b33e:	490b      	ldr	r1, [pc, #44]	; (800b36c <run_area_calibration+0x33c>)
 800b340:	2002      	movs	r0, #2
 800b342:	f7fb fcc9 	bl	8006cd8 <acc_log_rss>
 800b346:	e690      	b.n	800b06a <run_area_calibration+0x3a>
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <run_area_calibration+0x338>)
 800b34a:	4a12      	ldr	r2, [pc, #72]	; (800b394 <run_area_calibration+0x364>)
 800b34c:	4907      	ldr	r1, [pc, #28]	; (800b36c <run_area_calibration+0x33c>)
 800b34e:	f7fb fcc3 	bl	8006cd8 <acc_log_rss>
 800b352:	e710      	b.n	800b176 <run_area_calibration+0x146>
 800b354:	08011490 	.word	0x08011490
 800b358:	42280000 	.word	0x42280000
 800b35c:	43fa0000 	.word	0x43fa0000
 800b360:	001e8480 	.word	0x001e8480
 800b364:	08014178 	.word	0x08014178
 800b368:	08017088 	.word	0x08017088
 800b36c:	0801723c 	.word	0x0801723c
 800b370:	08017054 	.word	0x08017054
 800b374:	08017250 	.word	0x08017250
 800b378:	08017074 	.word	0x08017074
 800b37c:	080172c8 	.word	0x080172c8
 800b380:	080172f8 	.word	0x080172f8
 800b384:	080170b0 	.word	0x080170b0
 800b388:	08017454 	.word	0x08017454
 800b38c:	0801758c 	.word	0x0801758c
 800b390:	0801721c 	.word	0x0801721c
 800b394:	080140fc 	.word	0x080140fc
 800b398:	200001e4 	.word	0x200001e4
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7ff fa11 	bl	800a7c4 <acc_sensor_diagnostics_sensor_status>
 800b3a2:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 800b3a6:	f7fd fdd7 	bl	8008f58 <acc_sensor_protocol_get_error_message>
 800b3aa:	4b2f      	ldr	r3, [pc, #188]	; (800b468 <run_area_calibration+0x438>)
 800b3ac:	4a2f      	ldr	r2, [pc, #188]	; (800b46c <run_area_calibration+0x43c>)
 800b3ae:	4930      	ldr	r1, [pc, #192]	; (800b470 <run_area_calibration+0x440>)
 800b3b0:	e9cd 4000 	strd	r4, r0, [sp]
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f7fb fc8f 	bl	8006cd8 <acc_log_rss>
 800b3ba:	e6dc      	b.n	800b176 <run_area_calibration+0x146>
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <run_area_calibration+0x444>)
 800b3be:	4a2e      	ldr	r2, [pc, #184]	; (800b478 <run_area_calibration+0x448>)
 800b3c0:	492b      	ldr	r1, [pc, #172]	; (800b470 <run_area_calibration+0x440>)
 800b3c2:	f7fb fc89 	bl	8006cd8 <acc_log_rss>
 800b3c6:	4b2d      	ldr	r3, [pc, #180]	; (800b47c <run_area_calibration+0x44c>)
 800b3c8:	4a2b      	ldr	r2, [pc, #172]	; (800b478 <run_area_calibration+0x448>)
 800b3ca:	4929      	ldr	r1, [pc, #164]	; (800b470 <run_area_calibration+0x440>)
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7fb fc83 	bl	8006cd8 <acc_log_rss>
 800b3d2:	e6d0      	b.n	800b176 <run_area_calibration+0x146>
 800b3d4:	4b2a      	ldr	r3, [pc, #168]	; (800b480 <run_area_calibration+0x450>)
 800b3d6:	4a2b      	ldr	r2, [pc, #172]	; (800b484 <run_area_calibration+0x454>)
 800b3d8:	4925      	ldr	r1, [pc, #148]	; (800b470 <run_area_calibration+0x440>)
 800b3da:	2004      	movs	r0, #4
 800b3dc:	f7fb fc7c 	bl	8006cd8 <acc_log_rss>
 800b3e0:	e6dc      	b.n	800b19c <run_area_calibration+0x16c>
 800b3e2:	4b24      	ldr	r3, [pc, #144]	; (800b474 <run_area_calibration+0x444>)
 800b3e4:	4a28      	ldr	r2, [pc, #160]	; (800b488 <run_area_calibration+0x458>)
 800b3e6:	4922      	ldr	r1, [pc, #136]	; (800b470 <run_area_calibration+0x440>)
 800b3e8:	f7fb fc76 	bl	8006cd8 <acc_log_rss>
 800b3ec:	e7eb      	b.n	800b3c6 <run_area_calibration+0x396>
 800b3ee:	4a27      	ldr	r2, [pc, #156]	; (800b48c <run_area_calibration+0x45c>)
 800b3f0:	491f      	ldr	r1, [pc, #124]	; (800b470 <run_area_calibration+0x440>)
 800b3f2:	2002      	movs	r0, #2
 800b3f4:	f7fb fc70 	bl	8006cd8 <acc_log_rss>
 800b3f8:	e749      	b.n	800b28e <run_area_calibration+0x25e>
 800b3fa:	4a25      	ldr	r2, [pc, #148]	; (800b490 <run_area_calibration+0x460>)
 800b3fc:	491c      	ldr	r1, [pc, #112]	; (800b470 <run_area_calibration+0x440>)
 800b3fe:	2002      	movs	r0, #2
 800b400:	f7fb fc6a 	bl	8006cd8 <acc_log_rss>
 800b404:	e730      	b.n	800b268 <run_area_calibration+0x238>
 800b406:	4a23      	ldr	r2, [pc, #140]	; (800b494 <run_area_calibration+0x464>)
 800b408:	4919      	ldr	r1, [pc, #100]	; (800b470 <run_area_calibration+0x440>)
 800b40a:	2002      	movs	r0, #2
 800b40c:	f7fb fc64 	bl	8006cd8 <acc_log_rss>
 800b410:	e721      	b.n	800b256 <run_area_calibration+0x226>
 800b412:	4a21      	ldr	r2, [pc, #132]	; (800b498 <run_area_calibration+0x468>)
 800b414:	4916      	ldr	r1, [pc, #88]	; (800b470 <run_area_calibration+0x440>)
 800b416:	2002      	movs	r0, #2
 800b418:	f7fb fc5e 	bl	8006cd8 <acc_log_rss>
 800b41c:	e72e      	b.n	800b27c <run_area_calibration+0x24c>
 800b41e:	4b1f      	ldr	r3, [pc, #124]	; (800b49c <run_area_calibration+0x46c>)
 800b420:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <run_area_calibration+0x470>)
 800b422:	4913      	ldr	r1, [pc, #76]	; (800b470 <run_area_calibration+0x440>)
 800b424:	2003      	movs	r0, #3
 800b426:	f7fb fc57 	bl	8006cd8 <acc_log_rss>
 800b42a:	e6a5      	b.n	800b178 <run_area_calibration+0x148>
 800b42c:	4b1b      	ldr	r3, [pc, #108]	; (800b49c <run_area_calibration+0x46c>)
 800b42e:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <run_area_calibration+0x474>)
 800b430:	490f      	ldr	r1, [pc, #60]	; (800b470 <run_area_calibration+0x440>)
 800b432:	2003      	movs	r0, #3
 800b434:	f7fb fc50 	bl	8006cd8 <acc_log_rss>
 800b438:	e69d      	b.n	800b176 <run_area_calibration+0x146>
 800b43a:	4b18      	ldr	r3, [pc, #96]	; (800b49c <run_area_calibration+0x46c>)
 800b43c:	4a1a      	ldr	r2, [pc, #104]	; (800b4a8 <run_area_calibration+0x478>)
 800b43e:	490c      	ldr	r1, [pc, #48]	; (800b470 <run_area_calibration+0x440>)
 800b440:	2003      	movs	r0, #3
 800b442:	f7fb fc49 	bl	8006cd8 <acc_log_rss>
 800b446:	2400      	movs	r4, #0
 800b448:	e696      	b.n	800b178 <run_area_calibration+0x148>
 800b44a:	4b14      	ldr	r3, [pc, #80]	; (800b49c <run_area_calibration+0x46c>)
 800b44c:	4a17      	ldr	r2, [pc, #92]	; (800b4ac <run_area_calibration+0x47c>)
 800b44e:	4908      	ldr	r1, [pc, #32]	; (800b470 <run_area_calibration+0x440>)
 800b450:	2003      	movs	r0, #3
 800b452:	f7fb fc41 	bl	8006cd8 <acc_log_rss>
 800b456:	e68f      	b.n	800b178 <run_area_calibration+0x148>
 800b458:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <run_area_calibration+0x480>)
 800b45a:	4a10      	ldr	r2, [pc, #64]	; (800b49c <run_area_calibration+0x46c>)
 800b45c:	4815      	ldr	r0, [pc, #84]	; (800b4b4 <run_area_calibration+0x484>)
 800b45e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800b462:	f000 fe1f 	bl	800c0a4 <__assert_func>
 800b466:	bf00      	nop
 800b468:	08017088 	.word	0x08017088
 800b46c:	08014138 	.word	0x08014138
 800b470:	0801723c 	.word	0x0801723c
 800b474:	080170a4 	.word	0x080170a4
 800b478:	080141b8 	.word	0x080141b8
 800b47c:	08017060 	.word	0x08017060
 800b480:	08017074 	.word	0x08017074
 800b484:	08017298 	.word	0x08017298
 800b488:	080141f0 	.word	0x080141f0
 800b48c:	08017398 	.word	0x08017398
 800b490:	08017354 	.word	0x08017354
 800b494:	0801732c 	.word	0x0801732c
 800b498:	08017378 	.word	0x08017378
 800b49c:	080170b0 	.word	0x080170b0
 800b4a0:	080173fc 	.word	0x080173fc
 800b4a4:	08017488 	.word	0x08017488
 800b4a8:	08017540 	.word	0x08017540
 800b4ac:	080174f0 	.word	0x080174f0
 800b4b0:	080173c4 	.word	0x080173c4
 800b4b4:	080173e0 	.word	0x080173e0

0800b4b8 <acc_cpd_area_calibration>:
 800b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
 800b4c0:	b08b      	sub	sp, #44	; 0x2c
 800b4c2:	6943      	ldr	r3, [r0, #20]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b4ca:	4b33      	ldr	r3, [pc, #204]	; (800b598 <acc_cpd_area_calibration+0xe0>)
 800b4cc:	4a33      	ldr	r2, [pc, #204]	; (800b59c <acc_cpd_area_calibration+0xe4>)
 800b4ce:	4934      	ldr	r1, [pc, #208]	; (800b5a0 <acc_cpd_area_calibration+0xe8>)
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	2004      	movs	r0, #4
 800b4d4:	f7fb fc00 	bl	8006cd8 <acc_log_rss>
 800b4d8:	4b32      	ldr	r3, [pc, #200]	; (800b5a4 <acc_cpd_area_calibration+0xec>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b193      	cbz	r3, 800b504 <acc_cpd_area_calibration+0x4c>
 800b4de:	68a2      	ldr	r2, [r4, #8]
 800b4e0:	69a0      	ldr	r0, [r4, #24]
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	e9d4 5707 	ldrd	r5, r7, [r4, #28]
 800b4e8:	e9cd 2200 	strd	r2, r2, [sp]
 800b4ec:	6961      	ldr	r1, [r4, #20]
 800b4ee:	9706      	str	r7, [sp, #24]
 800b4f0:	68e2      	ldr	r2, [r4, #12]
 800b4f2:	e9cd 0504 	strd	r0, r5, [sp, #16]
 800b4f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b4fa:	2002      	movs	r0, #2
 800b4fc:	4a2a      	ldr	r2, [pc, #168]	; (800b5a8 <acc_cpd_area_calibration+0xf0>)
 800b4fe:	4928      	ldr	r1, [pc, #160]	; (800b5a0 <acc_cpd_area_calibration+0xe8>)
 800b500:	f7fb fbea 	bl	8006cd8 <acc_log_rss>
 800b504:	2200      	movs	r2, #0
 800b506:	a909      	add	r1, sp, #36	; 0x24
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	f7fd fa69 	bl	80089e0 <acc_sensor_protocol_get_communication_buffer>
 800b50e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b510:	4926      	ldr	r1, [pc, #152]	; (800b5ac <acc_cpd_area_calibration+0xf4>)
 800b512:	4628      	mov	r0, r5
 800b514:	f44f 6217 	mov.w	r2, #2416	; 0x970
 800b518:	f000 fe2e 	bl	800c178 <memcpy>
 800b51c:	4628      	mov	r0, r5
 800b51e:	6a23      	ldr	r3, [r4, #32]
 800b520:	4923      	ldr	r1, [pc, #140]	; (800b5b0 <acc_cpd_area_calibration+0xf8>)
 800b522:	220f      	movs	r2, #15
 800b524:	f7ff fc90 	bl	800ae48 <acc_confprogram_patch>
 800b528:	4628      	mov	r0, r5
 800b52a:	6963      	ldr	r3, [r4, #20]
 800b52c:	4920      	ldr	r1, [pc, #128]	; (800b5b0 <acc_cpd_area_calibration+0xf8>)
 800b52e:	2231      	movs	r2, #49	; 0x31
 800b530:	f7ff fc8a 	bl	800ae48 <acc_confprogram_patch>
 800b534:	4628      	mov	r0, r5
 800b536:	69a3      	ldr	r3, [r4, #24]
 800b538:	491d      	ldr	r1, [pc, #116]	; (800b5b0 <acc_cpd_area_calibration+0xf8>)
 800b53a:	2212      	movs	r2, #18
 800b53c:	f7ff fc84 	bl	800ae48 <acc_confprogram_patch>
 800b540:	4628      	mov	r0, r5
 800b542:	69e3      	ldr	r3, [r4, #28]
 800b544:	491a      	ldr	r1, [pc, #104]	; (800b5b0 <acc_cpd_area_calibration+0xf8>)
 800b546:	2224      	movs	r2, #36	; 0x24
 800b548:	f7ff fc7e 	bl	800ae48 <acc_confprogram_patch>
 800b54c:	f44f 6217 	mov.w	r2, #2416	; 0x970
 800b550:	2100      	movs	r1, #0
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	f7fd fa46 	bl	80089e4 <acc_sensor_protocol_load_program>
 800b558:	4605      	mov	r5, r0
 800b55a:	b140      	cbz	r0, 800b56e <acc_cpd_area_calibration+0xb6>
 800b55c:	4631      	mov	r1, r6
 800b55e:	6820      	ldr	r0, [r4, #0]
 800b560:	f7ff fd66 	bl	800b030 <run_area_calibration>
 800b564:	4605      	mov	r5, r0
 800b566:	b970      	cbnz	r0, 800b586 <acc_cpd_area_calibration+0xce>
 800b568:	4628      	mov	r0, r5
 800b56a:	b00b      	add	sp, #44	; 0x2c
 800b56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56e:	4a11      	ldr	r2, [pc, #68]	; (800b5b4 <acc_cpd_area_calibration+0xfc>)
 800b570:	490b      	ldr	r1, [pc, #44]	; (800b5a0 <acc_cpd_area_calibration+0xe8>)
 800b572:	f7fb fbb1 	bl	8006cd8 <acc_log_rss>
 800b576:	4628      	mov	r0, r5
 800b578:	4a0f      	ldr	r2, [pc, #60]	; (800b5b8 <acc_cpd_area_calibration+0x100>)
 800b57a:	4909      	ldr	r1, [pc, #36]	; (800b5a0 <acc_cpd_area_calibration+0xe8>)
 800b57c:	f7fb fbac 	bl	8006cd8 <acc_log_rss>
 800b580:	4628      	mov	r0, r5
 800b582:	b00b      	add	sp, #44	; 0x2c
 800b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b586:	4b04      	ldr	r3, [pc, #16]	; (800b598 <acc_cpd_area_calibration+0xe0>)
 800b588:	4a0c      	ldr	r2, [pc, #48]	; (800b5bc <acc_cpd_area_calibration+0x104>)
 800b58a:	4905      	ldr	r1, [pc, #20]	; (800b5a0 <acc_cpd_area_calibration+0xe8>)
 800b58c:	2004      	movs	r0, #4
 800b58e:	f7fb fba3 	bl	8006cd8 <acc_log_rss>
 800b592:	4628      	mov	r0, r5
 800b594:	b00b      	add	sp, #44	; 0x2c
 800b596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b598:	08017038 	.word	0x08017038
 800b59c:	080170c4 	.word	0x080170c4
 800b5a0:	0801723c 	.word	0x0801723c
 800b5a4:	200001e4 	.word	0x200001e4
 800b5a8:	08017124 	.word	0x08017124
 800b5ac:	080114ec 	.word	0x080114ec
 800b5b0:	08017d48 	.word	0x08017d48
 800b5b4:	080171b8 	.word	0x080171b8
 800b5b8:	08013ff8 	.word	0x08013ff8
 800b5bc:	080171e8 	.word	0x080171e8

0800b5c0 <acc_alg_dly_coarse_priority_sort>:
 800b5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	1dc3      	adds	r3, r0, #7
 800b5c6:	466c      	mov	r4, sp
 800b5c8:	08db      	lsrs	r3, r3, #3
 800b5ca:	eba4 03c3 	sub.w	r3, r4, r3, lsl #3
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	469d      	mov	sp, r3
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d04e      	beq.n	800b676 <acc_alg_dly_coarse_priority_sort+0xb6>
 800b5d8:	1e45      	subs	r5, r0, #1
 800b5da:	f10d 3bff 	add.w	fp, sp, #4294967295
 800b5de:	4668      	mov	r0, sp
 800b5e0:	f04f 0800 	mov.w	r8, #0
 800b5e4:	fa10 f585 	uxtah	r5, r0, r5
 800b5e8:	465b      	mov	r3, fp
 800b5ea:	46c4      	mov	ip, r8
 800b5ec:	1e88      	subs	r0, r1, #2
 800b5ee:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 800b5f2:	f803 cf01 	strb.w	ip, [r3, #1]!
 800b5f6:	45a0      	cmp	r8, r4
 800b5f8:	bf38      	it	cc
 800b5fa:	46a0      	movcc	r8, r4
 800b5fc:	42ab      	cmp	r3, r5
 800b5fe:	d1f6      	bne.n	800b5ee <acc_alg_dly_coarse_priority_sort+0x2e>
 800b600:	f3c8 084f 	ubfx	r8, r8, #1, #16
 800b604:	f04f 0c1e 	mov.w	ip, #30
 800b608:	f04f 0a00 	mov.w	sl, #0
 800b60c:	45e0      	cmp	r8, ip
 800b60e:	eb08 0e0c 	add.w	lr, r8, ip
 800b612:	bf88      	it	hi
 800b614:	eba8 090c 	subhi.w	r9, r8, ip
 800b618:	fa1f fe8e 	uxth.w	lr, lr
 800b61c:	bf8c      	ite	hi
 800b61e:	fa1f f989 	uxthhi.w	r9, r9
 800b622:	f04f 0900 	movls.w	r9, #0
 800b626:	2300      	movs	r3, #0
 800b628:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800b62c:	bf28      	it	cs
 800b62e:	f04f 0eff 	movcs.w	lr, #255	; 0xff
 800b632:	461c      	mov	r4, r3
 800b634:	4658      	mov	r0, fp
 800b636:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b63a:	b975      	cbnz	r5, 800b65a <acc_alg_dly_coarse_priority_sort+0x9a>
 800b63c:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 800b640:	45a9      	cmp	r9, r5
 800b642:	d80a      	bhi.n	800b65a <acc_alg_dly_coarse_priority_sort+0x9a>
 800b644:	45ae      	cmp	lr, r5
 800b646:	d308      	bcc.n	800b65a <acc_alg_dly_coarse_priority_sort+0x9a>
 800b648:	f822 401a 	strh.w	r4, [r2, sl, lsl #1]
 800b64c:	f10a 0501 	add.w	r5, sl, #1
 800b650:	f04f 0401 	mov.w	r4, #1
 800b654:	7004      	strb	r4, [r0, #0]
 800b656:	fa1f fa85 	uxth.w	sl, r5
 800b65a:	3301      	adds	r3, #1
 800b65c:	b29c      	uxth	r4, r3
 800b65e:	42b4      	cmp	r4, r6
 800b660:	d3e9      	bcc.n	800b636 <acc_alg_dly_coarse_priority_sort+0x76>
 800b662:	f10c 0c1e 	add.w	ip, ip, #30
 800b666:	45b2      	cmp	sl, r6
 800b668:	fa1f fc8c 	uxth.w	ip, ip
 800b66c:	d3ce      	bcc.n	800b60c <acc_alg_dly_coarse_priority_sort+0x4c>
 800b66e:	2001      	movs	r0, #1
 800b670:	46bd      	mov	sp, r7
 800b672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	4a04      	ldr	r2, [pc, #16]	; (800b688 <acc_alg_dly_coarse_priority_sort+0xc8>)
 800b678:	4904      	ldr	r1, [pc, #16]	; (800b68c <acc_alg_dly_coarse_priority_sort+0xcc>)
 800b67a:	f7fb fb2d 	bl	8006cd8 <acc_log_rss>
 800b67e:	4630      	mov	r0, r6
 800b680:	46bd      	mov	sp, r7
 800b682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	bf00      	nop
 800b688:	080175bc 	.word	0x080175bc
 800b68c:	080175d4 	.word	0x080175d4

0800b690 <acc_alg_plateau_finder>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	0044      	lsls	r4, r0, #1
 800b696:	3408      	adds	r4, #8
 800b698:	08e4      	lsrs	r4, r4, #3
 800b69a:	b08b      	sub	sp, #44	; 0x2c
 800b69c:	00e4      	lsls	r4, r4, #3
 800b69e:	af06      	add	r7, sp, #24
 800b6a0:	ebad 0d04 	sub.w	sp, sp, r4
 800b6a4:	ad06      	add	r5, sp, #24
 800b6a6:	ebad 0d04 	sub.w	sp, sp, r4
 800b6aa:	f10d 0a18 	add.w	sl, sp, #24
 800b6ae:	ebad 0d04 	sub.w	sp, sp, r4
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	2801      	cmp	r0, #1
 800b6b6:	ab06      	add	r3, sp, #24
 800b6b8:	60bd      	str	r5, [r7, #8]
 800b6ba:	6039      	str	r1, [r7, #0]
 800b6bc:	4693      	mov	fp, r2
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	f240 81e3 	bls.w	800ba8a <acc_alg_plateau_finder+0x3fa>
 800b6c4:	1e86      	subs	r6, r0, #2
 800b6c6:	f04f 0900 	mov.w	r9, #0
 800b6ca:	b2b6      	uxth	r6, r6
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	f100 38ff 	add.w	r8, r0, #4294967295
 800b6d2:	eddf 6acc 	vldr	s13, [pc, #816]	; 800ba04 <acc_alg_plateau_finder+0x374>
 800b6d6:	3602      	adds	r6, #2
 800b6d8:	464a      	mov	r2, r9
 800b6da:	4649      	mov	r1, r9
 800b6dc:	2401      	movs	r4, #1
 800b6de:	e004      	b.n	800b6ea <acc_alg_plateau_finder+0x5a>
 800b6e0:	45a0      	cmp	r8, r4
 800b6e2:	d01e      	beq.n	800b722 <acc_alg_plateau_finder+0x92>
 800b6e4:	3401      	adds	r4, #1
 800b6e6:	42a6      	cmp	r6, r4
 800b6e8:	d050      	beq.n	800b78c <acc_alg_plateau_finder+0xfc>
 800b6ea:	f8b5 c000 	ldrh.w	ip, [r5]
 800b6ee:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800b6f2:	ee07 ca90 	vmov	s15, ip
 800b6f6:	459c      	cmp	ip, r3
 800b6f8:	eba3 0e0c 	sub.w	lr, r3, ip
 800b6fc:	bf28      	it	cs
 800b6fe:	ebac 0303 	subcs.w	r3, ip, r3
 800b702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b706:	b2a0      	uxth	r0, r4
 800b708:	bf34      	ite	cc
 800b70a:	fa1f f38e 	uxthcc.w	r3, lr
 800b70e:	b29b      	uxthcs	r3, r3
 800b710:	3201      	adds	r2, #1
 800b712:	4401      	add	r1, r0
 800b714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b718:	b292      	uxth	r2, r2
 800b71a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b71e:	b289      	uxth	r1, r1
 800b720:	d9de      	bls.n	800b6e0 <acc_alg_plateau_finder+0x50>
 800b722:	2a02      	cmp	r2, #2
 800b724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b728:	f109 0e01 	add.w	lr, r9, #1
 800b72c:	f240 8186 	bls.w	800ba3c <acc_alg_plateau_finder+0x3ac>
 800b730:	ee07 1a10 	vmov	s14, r1
 800b734:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 800b738:	ee07 2a10 	vmov	s14, r2
 800b73c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800b740:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800b744:	ee85 7a06 	vdiv.f32	s14, s10, s12
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 800b756:	3401      	adds	r4, #1
 800b758:	2100      	movs	r1, #0
 800b75a:	42a6      	cmp	r6, r4
 800b75c:	460a      	mov	r2, r1
 800b75e:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 800b762:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b766:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800b76a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 800ba04 <acc_alg_plateau_finder+0x374>
 800b772:	ee17 3a90 	vmov	r3, s15
 800b776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b77a:	f820 3019 	strh.w	r3, [r0, r9, lsl #1]
 800b77e:	ee16 3a10 	vmov	r3, s12
 800b782:	f82a 3019 	strh.w	r3, [sl, r9, lsl #1]
 800b786:	fa1f f98e 	uxth.w	r9, lr
 800b78a:	d1ae      	bne.n	800b6ea <acc_alg_plateau_finder+0x5a>
 800b78c:	f8cd 9000 	str.w	r9, [sp]
 800b790:	4b9d      	ldr	r3, [pc, #628]	; (800ba08 <acc_alg_plateau_finder+0x378>)
 800b792:	4a9e      	ldr	r2, [pc, #632]	; (800ba0c <acc_alg_plateau_finder+0x37c>)
 800b794:	499e      	ldr	r1, [pc, #632]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b796:	2004      	movs	r0, #4
 800b798:	f7fb fa9e 	bl	8006cd8 <acc_log_rss>
 800b79c:	f1b9 0f00 	cmp.w	r9, #0
 800b7a0:	d024      	beq.n	800b7ec <acc_alg_plateau_finder+0x15c>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f8c7 a008 	str.w	sl, [r7, #8]
 800b7a8:	1e9e      	subs	r6, r3, #2
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	1e9d      	subs	r5, r3, #2
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3b02      	subs	r3, #2
 800b7b2:	f1aa 0802 	sub.w	r8, sl, #2
 800b7b6:	2400      	movs	r4, #0
 800b7b8:	469a      	mov	sl, r3
 800b7ba:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
 800b7c4:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800b7c8:	4991      	ldr	r1, [pc, #580]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b7ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b7ce:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800b7d2:	4a90      	ldr	r2, [pc, #576]	; (800ba14 <acc_alg_plateau_finder+0x384>)
 800b7d4:	e9cd 4300 	strd	r4, r3, [sp]
 800b7d8:	2004      	movs	r0, #4
 800b7da:	4b8b      	ldr	r3, [pc, #556]	; (800ba08 <acc_alg_plateau_finder+0x378>)
 800b7dc:	3401      	adds	r4, #1
 800b7de:	f7fb fa7b 	bl	8006cd8 <acc_log_rss>
 800b7e2:	b2a3      	uxth	r3, r4
 800b7e4:	4599      	cmp	r9, r3
 800b7e6:	d8e8      	bhi.n	800b7ba <acc_alg_plateau_finder+0x12a>
 800b7e8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	881a      	ldrh	r2, [r3, #0]
 800b7f0:	60ba      	str	r2, [r7, #8]
 800b7f2:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	f240 8136 	bls.w	800ba68 <acc_alg_plateau_finder+0x3d8>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800ba18 <acc_alg_plateau_finder+0x388>
 800b802:	ed9f 5a86 	vldr	s10, [pc, #536]	; 800ba1c <acc_alg_plateau_finder+0x38c>
 800b806:	eddf 6a86 	vldr	s13, [pc, #536]	; 800ba20 <acc_alg_plateau_finder+0x390>
 800b80a:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ba24 <acc_alg_plateau_finder+0x394>
 800b80e:	ed9f 6a86 	vldr	s12, [pc, #536]	; 800ba28 <acc_alg_plateau_finder+0x398>
 800b812:	497f      	ldr	r1, [pc, #508]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b814:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 800b818:	ee07 2a90 	vmov	s15, r2
 800b81c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b820:	4b79      	ldr	r3, [pc, #484]	; (800ba08 <acc_alg_plateau_finder+0x378>)
 800b822:	4a82      	ldr	r2, [pc, #520]	; (800ba2c <acc_alg_plateau_finder+0x39c>)
 800b824:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b828:	2004      	movs	r0, #4
 800b82a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b82e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b832:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b83a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b83e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b846:	ee17 4a90 	vmov	r4, s15
 800b84a:	b2a4      	uxth	r4, r4
 800b84c:	9400      	str	r4, [sp, #0]
 800b84e:	f7fb fa43 	bl	8006cd8 <acc_log_rss>
 800b852:	f1b9 0f00 	cmp.w	r9, #0
 800b856:	f000 8116 	beq.w	800ba86 <acc_alg_plateau_finder+0x3f6>
 800b85a:	2500      	movs	r5, #0
 800b85c:	f1aa 0802 	sub.w	r8, sl, #2
 800b860:	f8c7 a004 	str.w	sl, [r7, #4]
 800b864:	462e      	mov	r6, r5
 800b866:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b86a:	e00a      	b.n	800b882 <acc_alg_plateau_finder+0x1f2>
 800b86c:	428b      	cmp	r3, r1
 800b86e:	f200 80f3 	bhi.w	800ba58 <acc_alg_plateau_finder+0x3c8>
 800b872:	1c6b      	adds	r3, r5, #1
 800b874:	f82b 6015 	strh.w	r6, [fp, r5, lsl #1]
 800b878:	b29d      	uxth	r5, r3
 800b87a:	3601      	adds	r6, #1
 800b87c:	b2b6      	uxth	r6, r6
 800b87e:	45b1      	cmp	r9, r6
 800b880:	d012      	beq.n	800b8a8 <acc_alg_plateau_finder+0x218>
 800b882:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 800b886:	f241 3287 	movw	r2, #4999	; 0x1387
 800b88a:	4293      	cmp	r3, r2
 800b88c:	f5aa 61fa 	sub.w	r1, sl, #2000	; 0x7d0
 800b890:	d8ec      	bhi.n	800b86c <acc_alg_plateau_finder+0x1dc>
 800b892:	3601      	adds	r6, #1
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4a66      	ldr	r2, [pc, #408]	; (800ba30 <acc_alg_plateau_finder+0x3a0>)
 800b898:	4b5b      	ldr	r3, [pc, #364]	; (800ba08 <acc_alg_plateau_finder+0x378>)
 800b89a:	495d      	ldr	r1, [pc, #372]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b89c:	2004      	movs	r0, #4
 800b89e:	b2b6      	uxth	r6, r6
 800b8a0:	f7fb fa1a 	bl	8006cd8 <acc_log_rss>
 800b8a4:	45b1      	cmp	r9, r6
 800b8a6:	d1ec      	bne.n	800b882 <acc_alg_plateau_finder+0x1f2>
 800b8a8:	2d01      	cmp	r5, #1
 800b8aa:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800b8ae:	f240 80e8 	bls.w	800ba82 <acc_alg_plateau_finder+0x3f2>
 800b8b2:	1eab      	subs	r3, r5, #2
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	fa0f f983 	sxth.w	r9, r3
 800b8ba:	60bb      	str	r3, [r7, #8]
 800b8bc:	f109 0301 	add.w	r3, r9, #1
 800b8c0:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	607d      	str	r5, [r7, #4]
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	db26      	blt.n	800b91c <acc_alg_plateau_finder+0x28c>
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	464e      	mov	r6, r9
 800b8d2:	2500      	movs	r5, #0
 800b8d4:	f830 1d02 	ldrh.w	r1, [r0, #-2]!
 800b8d8:	f83a 2011 	ldrh.w	r2, [sl, r1, lsl #1]
 800b8dc:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800b8e0:	42a2      	cmp	r2, r4
 800b8e2:	eba2 0304 	sub.w	r3, r2, r4
 800b8e6:	bf88      	it	hi
 800b8e8:	b29a      	uxthhi	r2, r3
 800b8ea:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800b8ee:	bf9c      	itt	ls
 800b8f0:	1aa2      	subls	r2, r4, r2
 800b8f2:	b292      	uxthls	r2, r2
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	eba3 0e04 	sub.w	lr, r3, r4
 800b8fa:	bf96      	itet	ls
 800b8fc:	1ae3      	subls	r3, r4, r3
 800b8fe:	fa1f f38e 	uxthhi.w	r3, lr
 800b902:	b29b      	uxthls	r3, r3
 800b904:	429a      	cmp	r2, r3
 800b906:	f106 36ff 	add.w	r6, r6, #4294967295
 800b90a:	d903      	bls.n	800b914 <acc_alg_plateau_finder+0x284>
 800b90c:	f8a0 c000 	strh.w	ip, [r0]
 800b910:	8041      	strh	r1, [r0, #2]
 800b912:	2501      	movs	r5, #1
 800b914:	0433      	lsls	r3, r6, #16
 800b916:	d5dd      	bpl.n	800b8d4 <acc_alg_plateau_finder+0x244>
 800b918:	2d00      	cmp	r5, #0
 800b91a:	d1d5      	bne.n	800b8c8 <acc_alg_plateau_finder+0x238>
 800b91c:	f8bb 2000 	ldrh.w	r2, [fp]
 800b920:	687d      	ldr	r5, [r7, #4]
 800b922:	f83a 0012 	ldrh.w	r0, [sl, r2, lsl #1]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	f10b 0302 	add.w	r3, fp, #2
 800b92c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 800b930:	4659      	mov	r1, fp
 800b932:	f04f 0901 	mov.w	r9, #1
 800b936:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800b93a:	f83a 3013 	ldrh.w	r3, [sl, r3, lsl #1]
 800b93e:	4283      	cmp	r3, r0
 800b940:	eba3 0200 	sub.w	r2, r3, r0
 800b944:	bf96      	itet	ls
 800b946:	1ac3      	subls	r3, r0, r3
 800b948:	b293      	uxthhi	r3, r2
 800b94a:	b29b      	uxthls	r3, r3
 800b94c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b950:	bf3c      	itt	cc
 800b952:	f109 0901 	addcc.w	r9, r9, #1
 800b956:	fa1f f989 	uxthcc.w	r9, r9
 800b95a:	428c      	cmp	r4, r1
 800b95c:	d1eb      	bne.n	800b936 <acc_alg_plateau_finder+0x2a6>
 800b95e:	68fe      	ldr	r6, [r7, #12]
 800b960:	f8c7 a008 	str.w	sl, [r7, #8]
 800b964:	f109 39ff 	add.w	r9, r9, #4294967295
 800b968:	46a8      	mov	r8, r5
 800b96a:	f1b9 0f00 	cmp.w	r9, #0
 800b96e:	d028      	beq.n	800b9c2 <acc_alg_plateau_finder+0x332>
 800b970:	2400      	movs	r4, #0
 800b972:	4d27      	ldr	r5, [pc, #156]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b974:	46a2      	mov	sl, r4
 800b976:	4622      	mov	r2, r4
 800b978:	e004      	b.n	800b984 <acc_alg_plateau_finder+0x2f4>
 800b97a:	3401      	adds	r4, #1
 800b97c:	b2a4      	uxth	r4, r4
 800b97e:	454c      	cmp	r4, r9
 800b980:	4622      	mov	r2, r4
 800b982:	d21b      	bcs.n	800b9bc <acc_alg_plateau_finder+0x32c>
 800b984:	0053      	lsls	r3, r2, #1
 800b986:	3302      	adds	r3, #2
 800b988:	f83b 1012 	ldrh.w	r1, [fp, r2, lsl #1]
 800b98c:	f83b 0003 	ldrh.w	r0, [fp, r3]
 800b990:	f836 e011 	ldrh.w	lr, [r6, r1, lsl #1]
 800b994:	f836 c010 	ldrh.w	ip, [r6, r0, lsl #1]
 800b998:	45e6      	cmp	lr, ip
 800b99a:	d2ee      	bcs.n	800b97a <acc_alg_plateau_finder+0x2ea>
 800b99c:	3401      	adds	r4, #1
 800b99e:	f82b 0012 	strh.w	r0, [fp, r2, lsl #1]
 800b9a2:	b2a4      	uxth	r4, r4
 800b9a4:	4a23      	ldr	r2, [pc, #140]	; (800ba34 <acc_alg_plateau_finder+0x3a4>)
 800b9a6:	f82b 1003 	strh.w	r1, [fp, r3]
 800b9aa:	2004      	movs	r0, #4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7fb f993 	bl	8006cd8 <acc_log_rss>
 800b9b2:	454c      	cmp	r4, r9
 800b9b4:	f04f 0a01 	mov.w	sl, #1
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	d3e3      	bcc.n	800b984 <acc_alg_plateau_finder+0x2f4>
 800b9bc:	f1ba 0f00 	cmp.w	sl, #0
 800b9c0:	d1d3      	bne.n	800b96a <acc_alg_plateau_finder+0x2da>
 800b9c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b9c6:	4645      	mov	r5, r8
 800b9c8:	1e6c      	subs	r4, r5, #1
 800b9ca:	b2a4      	uxth	r4, r4
 800b9cc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800ba08 <acc_alg_plateau_finder+0x378>
 800b9d0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800ba38 <acc_alg_plateau_finder+0x3a8>
 800b9d4:	4e0e      	ldr	r6, [pc, #56]	; (800ba10 <acc_alg_plateau_finder+0x380>)
 800b9d6:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 800b9da:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9de:	f83b 3f02 	ldrh.w	r3, [fp, #2]!
 800b9e2:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	e9cd 3200 	strd	r3, r2, [sp]
 800b9ec:	2004      	movs	r0, #4
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	f7fb f971 	bl	8006cd8 <acc_log_rss>
 800b9f6:	455c      	cmp	r4, fp
 800b9f8:	d1f1      	bne.n	800b9de <acc_alg_plateau_finder+0x34e>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	00000000 	.word	0x00000000
 800ba08:	080175f8 	.word	0x080175f8
 800ba0c:	08017680 	.word	0x08017680
 800ba10:	08017668 	.word	0x08017668
 800ba14:	08017698 	.word	0x08017698
 800ba18:	3f99999a 	.word	0x3f99999a
 800ba1c:	37800000 	.word	0x37800000
 800ba20:	3f866666 	.word	0x3f866666
 800ba24:	47800000 	.word	0x47800000
 800ba28:	47000000 	.word	0x47000000
 800ba2c:	0801770c 	.word	0x0801770c
 800ba30:	08017720 	.word	0x08017720
 800ba34:	08017788 	.word	0x08017788
 800ba38:	080177bc 	.word	0x080177bc
 800ba3c:	e9cd c201 	strd	ip, r2, [sp, #4]
 800ba40:	4917      	ldr	r1, [pc, #92]	; (800baa0 <acc_alg_plateau_finder+0x410>)
 800ba42:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <acc_alg_plateau_finder+0x414>)
 800ba44:	9400      	str	r4, [sp, #0]
 800ba46:	2004      	movs	r0, #4
 800ba48:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <acc_alg_plateau_finder+0x418>)
 800ba4a:	f7fb f945 	bl	8006cd8 <acc_log_rss>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	eddf 6a16 	vldr	s13, [pc, #88]	; 800baac <acc_alg_plateau_finder+0x41c>
 800ba54:	4611      	mov	r1, r2
 800ba56:	e645      	b.n	800b6e4 <acc_alg_plateau_finder+0x54>
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <acc_alg_plateau_finder+0x420>)
 800ba5c:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <acc_alg_plateau_finder+0x418>)
 800ba5e:	4910      	ldr	r1, [pc, #64]	; (800baa0 <acc_alg_plateau_finder+0x410>)
 800ba60:	2004      	movs	r0, #4
 800ba62:	f7fb f939 	bl	8006cd8 <acc_log_rss>
 800ba66:	e708      	b.n	800b87a <acc_alg_plateau_finder+0x1ea>
 800ba68:	9200      	str	r2, [sp, #0]
 800ba6a:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <acc_alg_plateau_finder+0x418>)
 800ba6c:	4a11      	ldr	r2, [pc, #68]	; (800bab4 <acc_alg_plateau_finder+0x424>)
 800ba6e:	490c      	ldr	r1, [pc, #48]	; (800baa0 <acc_alg_plateau_finder+0x410>)
 800ba70:	2004      	movs	r0, #4
 800ba72:	f7fb f931 	bl	8006cd8 <acc_log_rss>
 800ba76:	2500      	movs	r5, #0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	2d00      	cmp	r5, #0
 800ba84:	d1a0      	bne.n	800b9c8 <acc_alg_plateau_finder+0x338>
 800ba86:	2500      	movs	r5, #0
 800ba88:	e7b7      	b.n	800b9fa <acc_alg_plateau_finder+0x36a>
 800ba8a:	2400      	movs	r4, #0
 800ba8c:	9400      	str	r4, [sp, #0]
 800ba8e:	4b06      	ldr	r3, [pc, #24]	; (800baa8 <acc_alg_plateau_finder+0x418>)
 800ba90:	4a09      	ldr	r2, [pc, #36]	; (800bab8 <acc_alg_plateau_finder+0x428>)
 800ba92:	4903      	ldr	r1, [pc, #12]	; (800baa0 <acc_alg_plateau_finder+0x410>)
 800ba94:	2004      	movs	r0, #4
 800ba96:	46a1      	mov	r9, r4
 800ba98:	f7fb f91e 	bl	8006cd8 <acc_log_rss>
 800ba9c:	e6a6      	b.n	800b7ec <acc_alg_plateau_finder+0x15c>
 800ba9e:	bf00      	nop
 800baa0:	08017668 	.word	0x08017668
 800baa4:	08017610 	.word	0x08017610
 800baa8:	080175f8 	.word	0x080175f8
 800baac:	00000000 	.word	0x00000000
 800bab0:	08017754 	.word	0x08017754
 800bab4:	080176e0 	.word	0x080176e0
 800bab8:	08017680 	.word	0x08017680

0800babc <acc_alg_basic_energy>:
 800babc:	b082      	sub	sp, #8
 800babe:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800bb0c <acc_alg_basic_energy+0x50>
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	ed83 7a00 	vstr	s14, [r3]
 800bac8:	b1d9      	cbz	r1, 800bb02 <acc_alg_basic_energy+0x46>
 800baca:	ee07 2a90 	vmov	s15, r2
 800bace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800bad6:	f830 2b02 	ldrh.w	r2, [r0], #2
 800bada:	ee07 2a90 	vmov	s15, r2
 800bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae2:	4281      	cmp	r1, r0
 800bae4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800baec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baf0:	d1f1      	bne.n	800bad6 <acc_alg_basic_energy+0x1a>
 800baf2:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bb10 <acc_alg_basic_energy+0x54>
 800baf6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bb14 <acc_alg_basic_energy+0x58>
 800bafa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bafe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb02:	ed83 7a00 	vstr	s14, [r3]
 800bb06:	b002      	add	sp, #8
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	00000000 	.word	0x00000000
 800bb10:	3d800000 	.word	0x3d800000
 800bb14:	3919999a 	.word	0x3919999a

0800bb18 <acc_alg_filter_gauss_mask>:
 800bb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb1c:	ed2d 8b04 	vpush	{d8-d9}
 800bb20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb22:	2900      	cmp	r1, #0
 800bb24:	f000 8082 	beq.w	800bc2c <acc_alg_filter_gauss_mask+0x114>
 800bb28:	4607      	mov	r7, r0
 800bb2a:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800bb2e:	f04f 0c00 	mov.w	ip, #0
 800bb32:	f837 4b02 	ldrh.w	r4, [r7], #2
 800bb36:	1aa4      	subs	r4, r4, r2
 800bb38:	2c00      	cmp	r4, #0
 800bb3a:	bfb8      	it	lt
 800bb3c:	4264      	neglt	r4, r4
 800bb3e:	b2a4      	uxth	r4, r4
 800bb40:	45a4      	cmp	ip, r4
 800bb42:	bf38      	it	cc
 800bb44:	46a4      	movcc	ip, r4
 800bb46:	42be      	cmp	r6, r7
 800bb48:	d1f3      	bne.n	800bb32 <acc_alg_filter_gauss_mask+0x1a>
 800bb4a:	ee60 0aa0 	vmul.f32	s1, s1, s1
 800bb4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb52:	ee87 8aa0 	vdiv.f32	s16, s15, s1
 800bb56:	1e86      	subs	r6, r0, #2
 800bb58:	f04f 0e00 	mov.w	lr, #0
 800bb5c:	4637      	mov	r7, r6
 800bb5e:	4670      	mov	r0, lr
 800bb60:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bc44 <acc_alg_filter_gauss_mask+0x12c>
 800bb64:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800bb68:	1aa4      	subs	r4, r4, r2
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	bfb8      	it	lt
 800bb6e:	4264      	neglt	r4, r4
 800bb70:	fa1f f884 	uxth.w	r8, r4
 800bb74:	ee07 8a90 	vmov	s15, r8
 800bb78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb7c:	ee07 0a90 	vmov	s15, r0
 800bb80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb84:	3001      	adds	r0, #1
 800bb86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb8a:	4288      	cmp	r0, r1
 800bb8c:	44a6      	add	lr, r4
 800bb8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bb92:	d1e7      	bne.n	800bb64 <acc_alg_filter_gauss_mask+0x4c>
 800bb94:	ee07 ea90 	vmov	s15, lr
 800bb98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9c:	4698      	mov	r8, r3
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	2300      	movs	r3, #0
 800bba4:	460f      	mov	r7, r1
 800bba6:	4691      	mov	r9, r2
 800bba8:	f04f 0a00 	mov.w	sl, #0
 800bbac:	ee07 ca90 	vmov	s15, ip
 800bbb0:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800bbb4:	ed85 7a00 	vstr	s14, [r5]
 800bbb8:	eef0 8a40 	vmov.f32	s17, s0
 800bbbc:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
 800bbc0:	f8c8 3000 	str.w	r3, [r8]
 800bbc4:	ee07 aa90 	vmov	s15, sl
 800bbc8:	ed95 7a00 	vldr	s14, [r5]
 800bbcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbd0:	f10a 0a01 	add.w	sl, sl, #1
 800bbd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbd8:	ee27 7a89 	vmul.f32	s14, s15, s18
 800bbdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbe0:	ee27 0a88 	vmul.f32	s0, s15, s16
 800bbe4:	f001 fd08 	bl	800d5f8 <expf>
 800bbe8:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800bbec:	eba4 0409 	sub.w	r4, r4, r9
 800bbf0:	2c00      	cmp	r4, #0
 800bbf2:	bfb8      	it	lt
 800bbf4:	4264      	neglt	r4, r4
 800bbf6:	ee20 7a29 	vmul.f32	s14, s0, s19
 800bbfa:	ee07 4a90 	vmov	s15, r4
 800bbfe:	ee37 7a28 	vadd.f32	s14, s14, s17
 800bc02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0e:	dd07      	ble.n	800bc20 <acc_alg_filter_gauss_mask+0x108>
 800bc10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bc14:	edd8 7a00 	vldr	s15, [r8]
 800bc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1c:	edc8 7a00 	vstr	s15, [r8]
 800bc20:	45ba      	cmp	sl, r7
 800bc22:	d1cf      	bne.n	800bbc4 <acc_alg_filter_gauss_mask+0xac>
 800bc24:	ecbd 8b04 	vpop	{d8-d9}
 800bc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2c:	eddf 7a05 	vldr	s15, [pc, #20]	; 800bc44 <acc_alg_filter_gauss_mask+0x12c>
 800bc30:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 800bc34:	ecbd 8b04 	vpop	{d8-d9}
 800bc38:	ed85 7a00 	vstr	s14, [r5]
 800bc3c:	edc3 7a00 	vstr	s15, [r3]
 800bc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc44:	00000000 	.word	0x00000000

0800bc48 <frequency_energy_ratio>:
 800bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4c:	ed2d 8b04 	vpush	{d8-d9}
 800bc50:	1e82      	subs	r2, r0, #2
 800bc52:	f200 34de 	addw	r4, r0, #990	; 0x3de
 800bc56:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800bc5a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc5e:	4610      	mov	r0, r2
 800bc60:	2100      	movs	r1, #0
 800bc62:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 800bc66:	105b      	asrs	r3, r3, #1
 800bc68:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800bc6c:	4284      	cmp	r4, r0
 800bc6e:	fa01 f183 	sxtah	r1, r1, r3
 800bc72:	d1f6      	bne.n	800bc62 <frequency_energy_ratio+0x1a>
 800bc74:	4b5e      	ldr	r3, [pc, #376]	; (800bdf0 <frequency_energy_ratio+0x1a8>)
 800bc76:	fb83 4301 	smull	r4, r3, r3, r1
 800bc7a:	440b      	add	r3, r1
 800bc7c:	17c9      	asrs	r1, r1, #31
 800bc7e:	ebc1 2123 	rsb	r1, r1, r3, asr #8
 800bc82:	4615      	mov	r5, r2
 800bc84:	2400      	movs	r4, #0
 800bc86:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800bc8a:	105b      	asrs	r3, r3, #1
 800bc8c:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800bc90:	b21b      	sxth	r3, r3
 800bc92:	1a5b      	subs	r3, r3, r1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bfb8      	it	lt
 800bc98:	425b      	neglt	r3, r3
 800bc9a:	42a8      	cmp	r0, r5
 800bc9c:	441c      	add	r4, r3
 800bc9e:	d1f2      	bne.n	800bc86 <frequency_energy_ratio+0x3e>
 800bca0:	4e54      	ldr	r6, [pc, #336]	; (800bdf4 <frequency_energy_ratio+0x1ac>)
 800bca2:	b288      	uxth	r0, r1
 800bca4:	f506 6cf8 	add.w	ip, r6, #1984	; 0x7c0
 800bca8:	4635      	mov	r5, r6
 800bcaa:	4631      	mov	r1, r6
 800bcac:	2700      	movs	r7, #0
 800bcae:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800bcb2:	804f      	strh	r7, [r1, #2]
 800bcb4:	1a1b      	subs	r3, r3, r0
 800bcb6:	f343 034e 	sbfx	r3, r3, #1, #15
 800bcba:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800bcbe:	800b      	strh	r3, [r1, #0]
 800bcc0:	3104      	adds	r1, #4
 800bcc2:	458c      	cmp	ip, r1
 800bcc4:	d1f3      	bne.n	800bcae <frequency_energy_ratio+0x66>
 800bcc6:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 800bdf8 <frequency_energy_ratio+0x1b0>
 800bcca:	484a      	ldr	r0, [pc, #296]	; (800bdf4 <frequency_energy_ratio+0x1ac>)
 800bccc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bcd0:	eeb0 0a48 	vmov.f32	s0, s16
 800bcd4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800bcd8:	f7fa fba8 	bl	800642c <acc_alg_iq_demodulation_q3_12>
 800bcdc:	2700      	movs	r7, #0
 800bcde:	19e9      	adds	r1, r5, r7
 800bce0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800bce4:	a80c      	add	r0, sp, #48	; 0x30
 800bce6:	f000 fa47 	bl	800c178 <memcpy>
 800bcea:	227c      	movs	r2, #124	; 0x7c
 800bcec:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bcf0:	a80c      	add	r0, sp, #48	; 0x30
 800bcf2:	f000 f973 	bl	800bfdc <acc_alg_phase_estimation_q3_12>
 800bcf6:	19f0      	adds	r0, r6, r7
 800bcf8:	227c      	movs	r2, #124	; 0x7c
 800bcfa:	a90c      	add	r1, sp, #48	; 0x30
 800bcfc:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800bd00:	f000 f9c0 	bl	800c084 <acc_alg_phase_compensation_q3_12>
 800bd04:	f5b7 6ff8 	cmp.w	r7, #1984	; 0x7c0
 800bd08:	d1e9      	bne.n	800bcde <frequency_energy_ratio+0x96>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	a909      	add	r1, sp, #36	; 0x24
 800bd10:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800bdfc <frequency_energy_ratio+0x1b4>
 800bd14:	2001      	movs	r0, #1
 800bd16:	f7fa f9e3 	bl	80060e0 <acc_alg_biquad_q3_12_lowpass_coeffs>
 800bd1a:	a809      	add	r0, sp, #36	; 0x24
 800bd1c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800bd20:	4934      	ldr	r1, [pc, #208]	; (800bdf4 <frequency_energy_ratio+0x1ac>)
 800bd22:	f7fa fb6f 	bl	8006404 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt>
 800bd26:	2600      	movs	r6, #0
 800bd28:	4637      	mov	r7, r6
 800bd2a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800bd2e:	f7fa f91f 	bl	8005f70 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800bd32:	3601      	adds	r6, #1
 800bd34:	f5b6 7ff8 	cmp.w	r6, #496	; 0x1f0
 800bd38:	4407      	add	r7, r0
 800bd3a:	d1f6      	bne.n	800bd2a <frequency_energy_ratio+0xe2>
 800bd3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd44:	eddf 8a2e 	vldr	s17, [pc, #184]	; 800be00 <frequency_energy_ratio+0x1b8>
 800bd48:	ed9f 9a2e 	vldr	s18, [pc, #184]	; 800be04 <frequency_energy_ratio+0x1bc>
 800bd4c:	9403      	str	r4, [sp, #12]
 800bd4e:	bf48      	it	mi
 800bd50:	eeb1 8a48 	vnegmi.f32	s16, s16
 800bd54:	ee38 8a28 	vadd.f32	s16, s16, s17
 800bd58:	bf48      	it	mi
 800bd5a:	f04f 082d 	movmi.w	r8, #45	; 0x2d
 800bd5e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800bd62:	bf58      	it	pl
 800bd64:	f04f 0820 	movpl.w	r8, #32
 800bd68:	ee17 6a90 	vmov	r6, s15
 800bd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd70:	4643      	mov	r3, r8
 800bd72:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bd76:	9702      	str	r7, [sp, #8]
 800bd78:	ee68 7a09 	vmul.f32	s15, s16, s18
 800bd7c:	9600      	str	r6, [sp, #0]
 800bd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd82:	4a21      	ldr	r2, [pc, #132]	; (800be08 <frequency_energy_ratio+0x1c0>)
 800bd84:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd88:	4920      	ldr	r1, [pc, #128]	; (800be0c <frequency_energy_ratio+0x1c4>)
 800bd8a:	2004      	movs	r0, #4
 800bd8c:	ee17 5a90 	vmov	r5, s15
 800bd90:	f7fa ffa2 	bl	8006cd8 <acc_log_rss>
 800bd94:	ee07 7a90 	vmov	s15, r7
 800bd98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd9c:	ee07 4a90 	vmov	s15, r4
 800bda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda4:	2220      	movs	r2, #32
 800bda6:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800bdaa:	9204      	str	r2, [sp, #16]
 800bdac:	e9cd 6500 	strd	r6, r5, [sp]
 800bdb0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 800bdb4:	4643      	mov	r3, r8
 800bdb6:	4a16      	ldr	r2, [pc, #88]	; (800be10 <frequency_energy_ratio+0x1c8>)
 800bdb8:	4914      	ldr	r1, [pc, #80]	; (800be0c <frequency_energy_ratio+0x1c4>)
 800bdba:	2004      	movs	r0, #4
 800bdbc:	ee78 7a28 	vadd.f32	s15, s16, s17
 800bdc0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bdc4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800bdc8:	ed8d 7a05 	vstr	s14, [sp, #20]
 800bdcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdd0:	ee67 7a89 	vmul.f32	s15, s15, s18
 800bdd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd8:	edcd 7a06 	vstr	s15, [sp, #24]
 800bddc:	f7fa ff7c 	bl	8006cd8 <acc_log_rss>
 800bde0:	eeb0 0a48 	vmov.f32	s0, s16
 800bde4:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 800bde8:	ecbd 8b04 	vpop	{d8-d9}
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf0:	84210843 	.word	0x84210843
 800bdf4:	200001e8 	.word	0x200001e8
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	3b843809 	.word	0x3b843809
 800be00:	350637bd 	.word	0x350637bd
 800be04:	49742400 	.word	0x49742400
 800be08:	08018054 	.word	0x08018054
 800be0c:	08018090 	.word	0x08018090
 800be10:	080180b4 	.word	0x080180b4

0800be14 <acc_alg_area_check_center_frequency>:
 800be14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be18:	4b19      	ldr	r3, [pc, #100]	; (800be80 <acc_alg_area_check_center_frequency+0x6c>)
 800be1a:	4680      	mov	r8, r0
 800be1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be20:	b086      	sub	sp, #24
 800be22:	466d      	mov	r5, sp
 800be24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800be28:	2400      	movs	r4, #0
 800be2a:	4627      	mov	r7, r4
 800be2c:	ae03      	add	r6, sp, #12
 800be2e:	ecb5 0a01 	vldmia	r5!, {s0}
 800be32:	4640      	mov	r0, r8
 800be34:	f7ff ff08 	bl	800bc48 <frequency_energy_ratio>
 800be38:	ab06      	add	r3, sp, #24
 800be3a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800be3e:	eca6 0a01 	vstmia	r6!, {s0}
 800be42:	ed53 7a03 	vldr	s15, [r3, #-12]
 800be46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4e:	bfc8      	it	gt
 800be50:	b2a7      	uxthgt	r7, r4
 800be52:	3401      	adds	r4, #1
 800be54:	2c03      	cmp	r4, #3
 800be56:	d1ea      	bne.n	800be2e <acc_alg_area_check_center_frequency+0x1a>
 800be58:	2f01      	cmp	r7, #1
 800be5a:	d003      	beq.n	800be64 <acc_alg_area_check_center_frequency+0x50>
 800be5c:	2000      	movs	r0, #0
 800be5e:	b006      	add	sp, #24
 800be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be64:	ed9d 7a04 	vldr	s14, [sp, #16]
 800be68:	eddf 7a06 	vldr	s15, [pc, #24]	; 800be84 <acc_alg_area_check_center_frequency+0x70>
 800be6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	bfcc      	ite	gt
 800be76:	2001      	movgt	r0, #1
 800be78:	2000      	movle	r0, #0
 800be7a:	b006      	add	sp, #24
 800be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be80:	08011e5c 	.word	0x08011e5c
 800be84:	3e99999a 	.word	0x3e99999a

0800be88 <acc_alg_area_selection>:
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	b087      	sub	sp, #28
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800be92:	2800      	cmp	r0, #0
 800be94:	f000 8092 	beq.w	800bfbc <acc_alg_area_selection+0x134>
 800be98:	0081      	lsls	r1, r0, #2
 800be9a:	310a      	adds	r1, #10
 800be9c:	0042      	lsls	r2, r0, #1
 800be9e:	466c      	mov	r4, sp
 800bea0:	08c9      	lsrs	r1, r1, #3
 800bea2:	3208      	adds	r2, #8
 800bea4:	eba4 01c1 	sub.w	r1, r4, r1, lsl #3
 800bea8:	08d2      	lsrs	r2, r2, #3
 800beaa:	468d      	mov	sp, r1
 800beac:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 800beb0:	46e8      	mov	r8, sp
 800beb2:	4695      	mov	sp, r2
 800beb4:	466c      	mov	r4, sp
 800beb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beba:	802a      	strh	r2, [r5, #0]
 800bebc:	1ea6      	subs	r6, r4, #2
 800bebe:	f100 39ff 	add.w	r9, r0, #4294967295
 800bec2:	2200      	movs	r2, #0
 800bec4:	f826 2f02 	strh.w	r2, [r6, #2]!
 800bec8:	3201      	adds	r2, #1
 800beca:	fa1f fc82 	uxth.w	ip, r2
 800bece:	f853 eb04 	ldr.w	lr, [r3], #4
 800bed2:	f841 eb04 	str.w	lr, [r1], #4
 800bed6:	4560      	cmp	r0, ip
 800bed8:	d8f4      	bhi.n	800bec4 <acc_alg_area_selection+0x3c>
 800beda:	2300      	movs	r3, #0
 800bedc:	469e      	mov	lr, r3
 800bede:	4599      	cmp	r9, r3
 800bee0:	4619      	mov	r1, r3
 800bee2:	dd21      	ble.n	800bf28 <acc_alg_area_selection+0xa0>
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	b293      	uxth	r3, r2
 800bee8:	eb08 0c81 	add.w	ip, r8, r1, lsl #2
 800beec:	eb08 0682 	add.w	r6, r8, r2, lsl #2
 800bef0:	eddc 7a00 	vldr	s15, [ip]
 800bef4:	ed96 7a00 	vldr	s14, [r6]
 800bef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf00:	dded      	ble.n	800bede <acc_alg_area_selection+0x56>
 800bf02:	f834 a011 	ldrh.w	sl, [r4, r1, lsl #1]
 800bf06:	f834 b012 	ldrh.w	fp, [r4, r2, lsl #1]
 800bf0a:	f824 b011 	strh.w	fp, [r4, r1, lsl #1]
 800bf0e:	f10e 0e01 	add.w	lr, lr, #1
 800bf12:	4599      	cmp	r9, r3
 800bf14:	ed8c 7a00 	vstr	s14, [ip]
 800bf18:	f824 a012 	strh.w	sl, [r4, r2, lsl #1]
 800bf1c:	fa1f fe8e 	uxth.w	lr, lr
 800bf20:	edc6 7a00 	vstr	s15, [r6]
 800bf24:	4619      	mov	r1, r3
 800bf26:	dcdd      	bgt.n	800bee4 <acc_alg_area_selection+0x5c>
 800bf28:	f1be 0f00 	cmp.w	lr, #0
 800bf2c:	d008      	beq.n	800bf40 <acc_alg_area_selection+0xb8>
 800bf2e:	f1b9 0f00 	cmp.w	r9, #0
 800bf32:	d005      	beq.n	800bf40 <acc_alg_area_selection+0xb8>
 800bf34:	2301      	movs	r3, #1
 800bf36:	f04f 0e00 	mov.w	lr, #0
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4671      	mov	r1, lr
 800bf3e:	e7d3      	b.n	800bee8 <acc_alg_area_selection+0x60>
 800bf40:	8823      	ldrh	r3, [r4, #0]
 800bf42:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800bf46:	469c      	mov	ip, r3
 800bf48:	eb00 080e 	add.w	r8, r0, lr
 800bf4c:	1cbe      	adds	r6, r7, #2
 800bf4e:	f107 0114 	add.w	r1, r7, #20
 800bf52:	e001      	b.n	800bf58 <acc_alg_area_selection+0xd0>
 800bf54:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 800bf58:	4443      	add	r3, r8
 800bf5a:	eba3 030c 	sub.w	r3, r3, ip
 800bf5e:	fb93 f2f0 	sdiv	r2, r3, r0
 800bf62:	fb00 3312 	mls	r3, r0, r2, r3
 800bf66:	f826 3f02 	strh.w	r3, [r6, #2]!
 800bf6a:	42b1      	cmp	r1, r6
 800bf6c:	d1f2      	bne.n	800bf54 <acc_alg_area_selection+0xcc>
 800bf6e:	1d3b      	adds	r3, r7, #4
 800bf70:	2400      	movs	r4, #0
 800bf72:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bf76:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
 800bf7a:	428a      	cmp	r2, r1
 800bf7c:	dd04      	ble.n	800bf88 <acc_alg_area_selection+0x100>
 800bf7e:	3401      	adds	r4, #1
 800bf80:	b2a4      	uxth	r4, r4
 800bf82:	f823 1c02 	strh.w	r1, [r3, #-2]
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	d1f2      	bne.n	800bf72 <acc_alg_area_selection+0xea>
 800bf8c:	2c00      	cmp	r4, #0
 800bf8e:	d1ee      	bne.n	800bf6e <acc_alg_area_selection+0xe6>
 800bf90:	eba0 0e0e 	sub.w	lr, r0, lr
 800bf94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <acc_alg_area_selection+0x140>)
 800bf9a:	490c      	ldr	r1, [pc, #48]	; (800bfcc <acc_alg_area_selection+0x144>)
 800bf9c:	44f4      	add	ip, lr
 800bf9e:	4463      	add	r3, ip
 800bfa0:	fb93 f4f0 	sdiv	r4, r3, r0
 800bfa4:	fb00 3314 	mls	r3, r0, r4, r3
 800bfa8:	802b      	strh	r3, [r5, #0]
 800bfaa:	2004      	movs	r0, #4
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	f7fa fe93 	bl	8006cd8 <acc_log_rss>
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbc:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <acc_alg_area_selection+0x148>)
 800bfbe:	4a05      	ldr	r2, [pc, #20]	; (800bfd4 <acc_alg_area_selection+0x14c>)
 800bfc0:	4805      	ldr	r0, [pc, #20]	; (800bfd8 <acc_alg_area_selection+0x150>)
 800bfc2:	2118      	movs	r1, #24
 800bfc4:	f000 f86e 	bl	800c0a4 <__assert_func>
 800bfc8:	08018150 	.word	0x08018150
 800bfcc:	08018168 	.word	0x08018168
 800bfd0:	08018124 	.word	0x08018124
 800bfd4:	0801810c 	.word	0x0801810c
 800bfd8:	08018134 	.word	0x08018134

0800bfdc <acc_alg_phase_estimation_q3_12>:
 800bfdc:	2a01      	cmp	r2, #1
 800bfde:	b4f0      	push	{r4, r5, r6, r7}
 800bfe0:	d923      	bls.n	800c02a <acc_alg_phase_estimation_q3_12+0x4e>
 800bfe2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800bfe6:	f1ac 0c04 	sub.w	ip, ip, #4
 800bfea:	4603      	mov	r3, r0
 800bfec:	f9b3 7000 	ldrsh.w	r7, [r3]
 800bff0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800bff4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800bff8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800bffc:	1bed      	subs	r5, r5, r7
 800bffe:	fb01 f505 	mul.w	r5, r1, r5
 800c002:	1ba4      	subs	r4, r4, r6
 800c004:	2d00      	cmp	r5, #0
 800c006:	fb01 f404 	mul.w	r4, r1, r4
 800c00a:	bfb8      	it	lt
 800c00c:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800c010:	2c00      	cmp	r4, #0
 800c012:	bfb8      	it	lt
 800c014:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c018:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800c01c:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800c020:	809d      	strh	r5, [r3, #4]
 800c022:	80dc      	strh	r4, [r3, #6]
 800c024:	3304      	adds	r3, #4
 800c026:	459c      	cmp	ip, r3
 800c028:	d1e0      	bne.n	800bfec <acc_alg_phase_estimation_q3_12+0x10>
 800c02a:	1e53      	subs	r3, r2, #1
 800c02c:	d027      	beq.n	800c07e <acc_alg_phase_estimation_q3_12+0xa2>
 800c02e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c032:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800c036:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800c03a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c03e:	3004      	adds	r0, #4
 800c040:	f932 4c08 	ldrsh.w	r4, [r2, #-8]
 800c044:	1ba4      	subs	r4, r4, r6
 800c046:	fb01 f304 	mul.w	r3, r1, r4
 800c04a:	f932 4c06 	ldrsh.w	r4, [r2, #-6]
 800c04e:	1b64      	subs	r4, r4, r5
 800c050:	2b00      	cmp	r3, #0
 800c052:	fb01 f404 	mul.w	r4, r1, r4
 800c056:	bfb8      	it	lt
 800c058:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	bfb8      	it	lt
 800c060:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c064:	eb06 3323 	add.w	r3, r6, r3, asr #12
 800c068:	eb05 3524 	add.w	r5, r5, r4, asr #12
 800c06c:	b21e      	sxth	r6, r3
 800c06e:	b22d      	sxth	r5, r5
 800c070:	f822 6c08 	strh.w	r6, [r2, #-8]
 800c074:	f822 5c06 	strh.w	r5, [r2, #-6]
 800c078:	3a04      	subs	r2, #4
 800c07a:	4282      	cmp	r2, r0
 800c07c:	d1e0      	bne.n	800c040 <acc_alg_phase_estimation_q3_12+0x64>
 800c07e:	bcf0      	pop	{r4, r5, r6, r7}
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop

0800c084 <acc_alg_phase_compensation_q3_12>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	460c      	mov	r4, r1
 800c088:	4615      	mov	r5, r2
 800c08a:	4606      	mov	r6, r0
 800c08c:	4611      	mov	r1, r2
 800c08e:	4620      	mov	r0, r4
 800c090:	f7f9 ffa2 	bl	8005fd8 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 800c094:	462a      	mov	r2, r5
 800c096:	4621      	mov	r1, r4
 800c098:	4630      	mov	r0, r6
 800c09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c09e:	f7f9 bf3f 	b.w	8005f20 <acc_alg_basic_math_q3_12_complex_mul>
 800c0a2:	bf00      	nop

0800c0a4 <__assert_func>:
 800c0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0a6:	461c      	mov	r4, r3
 800c0a8:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <__assert_func+0x2c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	68d8      	ldr	r0, [r3, #12]
 800c0b0:	b152      	cbz	r2, 800c0c8 <__assert_func+0x24>
 800c0b2:	4b08      	ldr	r3, [pc, #32]	; (800c0d4 <__assert_func+0x30>)
 800c0b4:	9100      	str	r1, [sp, #0]
 800c0b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c0ba:	4907      	ldr	r1, [pc, #28]	; (800c0d8 <__assert_func+0x34>)
 800c0bc:	462b      	mov	r3, r5
 800c0be:	4622      	mov	r2, r4
 800c0c0:	f000 f814 	bl	800c0ec <fiprintf>
 800c0c4:	f000 fd16 	bl	800caf4 <abort>
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <__assert_func+0x38>)
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	e7f2      	b.n	800c0b4 <__assert_func+0x10>
 800c0ce:	bf00      	nop
 800c0d0:	20000104 	.word	0x20000104
 800c0d4:	08018180 	.word	0x08018180
 800c0d8:	0801818d 	.word	0x0801818d
 800c0dc:	080181bb 	.word	0x080181bb

0800c0e0 <__errno>:
 800c0e0:	4b01      	ldr	r3, [pc, #4]	; (800c0e8 <__errno+0x8>)
 800c0e2:	6818      	ldr	r0, [r3, #0]
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	20000104 	.word	0x20000104

0800c0ec <fiprintf>:
 800c0ec:	b40e      	push	{r1, r2, r3}
 800c0ee:	b503      	push	{r0, r1, lr}
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	ab03      	add	r3, sp, #12
 800c0f4:	4805      	ldr	r0, [pc, #20]	; (800c10c <fiprintf+0x20>)
 800c0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	f000 f939 	bl	800c374 <_vfiprintf_r>
 800c102:	b002      	add	sp, #8
 800c104:	f85d eb04 	ldr.w	lr, [sp], #4
 800c108:	b003      	add	sp, #12
 800c10a:	4770      	bx	lr
 800c10c:	20000104 	.word	0x20000104

0800c110 <__libc_init_array>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	4e0d      	ldr	r6, [pc, #52]	; (800c148 <__libc_init_array+0x38>)
 800c114:	4c0d      	ldr	r4, [pc, #52]	; (800c14c <__libc_init_array+0x3c>)
 800c116:	1ba4      	subs	r4, r4, r6
 800c118:	10a4      	asrs	r4, r4, #2
 800c11a:	2500      	movs	r5, #0
 800c11c:	42a5      	cmp	r5, r4
 800c11e:	d109      	bne.n	800c134 <__libc_init_array+0x24>
 800c120:	4e0b      	ldr	r6, [pc, #44]	; (800c150 <__libc_init_array+0x40>)
 800c122:	4c0c      	ldr	r4, [pc, #48]	; (800c154 <__libc_init_array+0x44>)
 800c124:	f002 f9e6 	bl	800e4f4 <_init>
 800c128:	1ba4      	subs	r4, r4, r6
 800c12a:	10a4      	asrs	r4, r4, #2
 800c12c:	2500      	movs	r5, #0
 800c12e:	42a5      	cmp	r5, r4
 800c130:	d105      	bne.n	800c13e <__libc_init_array+0x2e>
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c138:	4798      	blx	r3
 800c13a:	3501      	adds	r5, #1
 800c13c:	e7ee      	b.n	800c11c <__libc_init_array+0xc>
 800c13e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c142:	4798      	blx	r3
 800c144:	3501      	adds	r5, #1
 800c146:	e7f2      	b.n	800c12e <__libc_init_array+0x1e>
 800c148:	08018678 	.word	0x08018678
 800c14c:	08018678 	.word	0x08018678
 800c150:	08018678 	.word	0x08018678
 800c154:	0801867c 	.word	0x0801867c

0800c158 <malloc>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <malloc+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f000 b885 	b.w	800c26c <_malloc_r>
 800c162:	bf00      	nop
 800c164:	20000104 	.word	0x20000104

0800c168 <free>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <free+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f000 b82f 	b.w	800c1d0 <_free_r>
 800c172:	bf00      	nop
 800c174:	20000104 	.word	0x20000104

0800c178 <memcpy>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	1e43      	subs	r3, r0, #1
 800c17c:	440a      	add	r2, r1
 800c17e:	4291      	cmp	r1, r2
 800c180:	d100      	bne.n	800c184 <memcpy+0xc>
 800c182:	bd10      	pop	{r4, pc}
 800c184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c18c:	e7f7      	b.n	800c17e <memcpy+0x6>

0800c18e <memmove>:
 800c18e:	4288      	cmp	r0, r1
 800c190:	b510      	push	{r4, lr}
 800c192:	eb01 0302 	add.w	r3, r1, r2
 800c196:	d807      	bhi.n	800c1a8 <memmove+0x1a>
 800c198:	1e42      	subs	r2, r0, #1
 800c19a:	4299      	cmp	r1, r3
 800c19c:	d00a      	beq.n	800c1b4 <memmove+0x26>
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c1a6:	e7f8      	b.n	800c19a <memmove+0xc>
 800c1a8:	4283      	cmp	r3, r0
 800c1aa:	d9f5      	bls.n	800c198 <memmove+0xa>
 800c1ac:	1881      	adds	r1, r0, r2
 800c1ae:	1ad2      	subs	r2, r2, r3
 800c1b0:	42d3      	cmn	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memmove+0x28>
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1be:	e7f7      	b.n	800c1b0 <memmove+0x22>

0800c1c0 <memset>:
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d100      	bne.n	800c1ca <memset+0xa>
 800c1c8:	4770      	bx	lr
 800c1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ce:	e7f9      	b.n	800c1c4 <memset+0x4>

0800c1d0 <_free_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d045      	beq.n	800c264 <_free_r+0x94>
 800c1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1dc:	1f0c      	subs	r4, r1, #4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfb8      	it	lt
 800c1e2:	18e4      	addlt	r4, r4, r3
 800c1e4:	f000 fe6c 	bl	800cec0 <__malloc_lock>
 800c1e8:	4a1f      	ldr	r2, [pc, #124]	; (800c268 <_free_r+0x98>)
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	b933      	cbnz	r3, 800c1fe <_free_r+0x2e>
 800c1f0:	6063      	str	r3, [r4, #4]
 800c1f2:	6014      	str	r4, [r2, #0]
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fa:	f000 be62 	b.w	800cec2 <__malloc_unlock>
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	d90c      	bls.n	800c21c <_free_r+0x4c>
 800c202:	6821      	ldr	r1, [r4, #0]
 800c204:	1862      	adds	r2, r4, r1
 800c206:	4293      	cmp	r3, r2
 800c208:	bf04      	itt	eq
 800c20a:	681a      	ldreq	r2, [r3, #0]
 800c20c:	685b      	ldreq	r3, [r3, #4]
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	bf04      	itt	eq
 800c212:	1852      	addeq	r2, r2, r1
 800c214:	6022      	streq	r2, [r4, #0]
 800c216:	6004      	str	r4, [r0, #0]
 800c218:	e7ec      	b.n	800c1f4 <_free_r+0x24>
 800c21a:	4613      	mov	r3, r2
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	b10a      	cbz	r2, 800c224 <_free_r+0x54>
 800c220:	42a2      	cmp	r2, r4
 800c222:	d9fa      	bls.n	800c21a <_free_r+0x4a>
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	1858      	adds	r0, r3, r1
 800c228:	42a0      	cmp	r0, r4
 800c22a:	d10b      	bne.n	800c244 <_free_r+0x74>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	4401      	add	r1, r0
 800c230:	1858      	adds	r0, r3, r1
 800c232:	4282      	cmp	r2, r0
 800c234:	6019      	str	r1, [r3, #0]
 800c236:	d1dd      	bne.n	800c1f4 <_free_r+0x24>
 800c238:	6810      	ldr	r0, [r2, #0]
 800c23a:	6852      	ldr	r2, [r2, #4]
 800c23c:	605a      	str	r2, [r3, #4]
 800c23e:	4401      	add	r1, r0
 800c240:	6019      	str	r1, [r3, #0]
 800c242:	e7d7      	b.n	800c1f4 <_free_r+0x24>
 800c244:	d902      	bls.n	800c24c <_free_r+0x7c>
 800c246:	230c      	movs	r3, #12
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	e7d3      	b.n	800c1f4 <_free_r+0x24>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	1821      	adds	r1, r4, r0
 800c250:	428a      	cmp	r2, r1
 800c252:	bf04      	itt	eq
 800c254:	6811      	ldreq	r1, [r2, #0]
 800c256:	6852      	ldreq	r2, [r2, #4]
 800c258:	6062      	str	r2, [r4, #4]
 800c25a:	bf04      	itt	eq
 800c25c:	1809      	addeq	r1, r1, r0
 800c25e:	6021      	streq	r1, [r4, #0]
 800c260:	605c      	str	r4, [r3, #4]
 800c262:	e7c7      	b.n	800c1f4 <_free_r+0x24>
 800c264:	bd38      	pop	{r3, r4, r5, pc}
 800c266:	bf00      	nop
 800c268:	200009a8 	.word	0x200009a8

0800c26c <_malloc_r>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	1ccd      	adds	r5, r1, #3
 800c270:	f025 0503 	bic.w	r5, r5, #3
 800c274:	3508      	adds	r5, #8
 800c276:	2d0c      	cmp	r5, #12
 800c278:	bf38      	it	cc
 800c27a:	250c      	movcc	r5, #12
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	4606      	mov	r6, r0
 800c280:	db01      	blt.n	800c286 <_malloc_r+0x1a>
 800c282:	42a9      	cmp	r1, r5
 800c284:	d903      	bls.n	800c28e <_malloc_r+0x22>
 800c286:	230c      	movs	r3, #12
 800c288:	6033      	str	r3, [r6, #0]
 800c28a:	2000      	movs	r0, #0
 800c28c:	bd70      	pop	{r4, r5, r6, pc}
 800c28e:	f000 fe17 	bl	800cec0 <__malloc_lock>
 800c292:	4a21      	ldr	r2, [pc, #132]	; (800c318 <_malloc_r+0xac>)
 800c294:	6814      	ldr	r4, [r2, #0]
 800c296:	4621      	mov	r1, r4
 800c298:	b991      	cbnz	r1, 800c2c0 <_malloc_r+0x54>
 800c29a:	4c20      	ldr	r4, [pc, #128]	; (800c31c <_malloc_r+0xb0>)
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	b91b      	cbnz	r3, 800c2a8 <_malloc_r+0x3c>
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 fb1d 	bl	800c8e0 <_sbrk_r>
 800c2a6:	6020      	str	r0, [r4, #0]
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f000 fb18 	bl	800c8e0 <_sbrk_r>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d124      	bne.n	800c2fe <_malloc_r+0x92>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	6033      	str	r3, [r6, #0]
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f000 fe02 	bl	800cec2 <__malloc_unlock>
 800c2be:	e7e4      	b.n	800c28a <_malloc_r+0x1e>
 800c2c0:	680b      	ldr	r3, [r1, #0]
 800c2c2:	1b5b      	subs	r3, r3, r5
 800c2c4:	d418      	bmi.n	800c2f8 <_malloc_r+0x8c>
 800c2c6:	2b0b      	cmp	r3, #11
 800c2c8:	d90f      	bls.n	800c2ea <_malloc_r+0x7e>
 800c2ca:	600b      	str	r3, [r1, #0]
 800c2cc:	50cd      	str	r5, [r1, r3]
 800c2ce:	18cc      	adds	r4, r1, r3
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f000 fdf6 	bl	800cec2 <__malloc_unlock>
 800c2d6:	f104 000b 	add.w	r0, r4, #11
 800c2da:	1d23      	adds	r3, r4, #4
 800c2dc:	f020 0007 	bic.w	r0, r0, #7
 800c2e0:	1ac3      	subs	r3, r0, r3
 800c2e2:	d0d3      	beq.n	800c28c <_malloc_r+0x20>
 800c2e4:	425a      	negs	r2, r3
 800c2e6:	50e2      	str	r2, [r4, r3]
 800c2e8:	e7d0      	b.n	800c28c <_malloc_r+0x20>
 800c2ea:	428c      	cmp	r4, r1
 800c2ec:	684b      	ldr	r3, [r1, #4]
 800c2ee:	bf16      	itet	ne
 800c2f0:	6063      	strne	r3, [r4, #4]
 800c2f2:	6013      	streq	r3, [r2, #0]
 800c2f4:	460c      	movne	r4, r1
 800c2f6:	e7eb      	b.n	800c2d0 <_malloc_r+0x64>
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	6849      	ldr	r1, [r1, #4]
 800c2fc:	e7cc      	b.n	800c298 <_malloc_r+0x2c>
 800c2fe:	1cc4      	adds	r4, r0, #3
 800c300:	f024 0403 	bic.w	r4, r4, #3
 800c304:	42a0      	cmp	r0, r4
 800c306:	d005      	beq.n	800c314 <_malloc_r+0xa8>
 800c308:	1a21      	subs	r1, r4, r0
 800c30a:	4630      	mov	r0, r6
 800c30c:	f000 fae8 	bl	800c8e0 <_sbrk_r>
 800c310:	3001      	adds	r0, #1
 800c312:	d0cf      	beq.n	800c2b4 <_malloc_r+0x48>
 800c314:	6025      	str	r5, [r4, #0]
 800c316:	e7db      	b.n	800c2d0 <_malloc_r+0x64>
 800c318:	200009a8 	.word	0x200009a8
 800c31c:	200009ac 	.word	0x200009ac

0800c320 <__sfputc_r>:
 800c320:	6893      	ldr	r3, [r2, #8]
 800c322:	3b01      	subs	r3, #1
 800c324:	2b00      	cmp	r3, #0
 800c326:	b410      	push	{r4}
 800c328:	6093      	str	r3, [r2, #8]
 800c32a:	da08      	bge.n	800c33e <__sfputc_r+0x1e>
 800c32c:	6994      	ldr	r4, [r2, #24]
 800c32e:	42a3      	cmp	r3, r4
 800c330:	db01      	blt.n	800c336 <__sfputc_r+0x16>
 800c332:	290a      	cmp	r1, #10
 800c334:	d103      	bne.n	800c33e <__sfputc_r+0x1e>
 800c336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c33a:	f000 bb1b 	b.w	800c974 <__swbuf_r>
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	1c58      	adds	r0, r3, #1
 800c342:	6010      	str	r0, [r2, #0]
 800c344:	7019      	strb	r1, [r3, #0]
 800c346:	4608      	mov	r0, r1
 800c348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <__sfputs_r>:
 800c34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	4614      	mov	r4, r2
 800c356:	18d5      	adds	r5, r2, r3
 800c358:	42ac      	cmp	r4, r5
 800c35a:	d101      	bne.n	800c360 <__sfputs_r+0x12>
 800c35c:	2000      	movs	r0, #0
 800c35e:	e007      	b.n	800c370 <__sfputs_r+0x22>
 800c360:	463a      	mov	r2, r7
 800c362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c366:	4630      	mov	r0, r6
 800c368:	f7ff ffda 	bl	800c320 <__sfputc_r>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d1f3      	bne.n	800c358 <__sfputs_r+0xa>
 800c370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c374 <_vfiprintf_r>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	460c      	mov	r4, r1
 800c37a:	b09d      	sub	sp, #116	; 0x74
 800c37c:	4617      	mov	r7, r2
 800c37e:	461d      	mov	r5, r3
 800c380:	4606      	mov	r6, r0
 800c382:	b118      	cbz	r0, 800c38c <_vfiprintf_r+0x18>
 800c384:	6983      	ldr	r3, [r0, #24]
 800c386:	b90b      	cbnz	r3, 800c38c <_vfiprintf_r+0x18>
 800c388:	f000 fcac 	bl	800cce4 <__sinit>
 800c38c:	4b7c      	ldr	r3, [pc, #496]	; (800c580 <_vfiprintf_r+0x20c>)
 800c38e:	429c      	cmp	r4, r3
 800c390:	d158      	bne.n	800c444 <_vfiprintf_r+0xd0>
 800c392:	6874      	ldr	r4, [r6, #4]
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	0718      	lsls	r0, r3, #28
 800c398:	d55e      	bpl.n	800c458 <_vfiprintf_r+0xe4>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d05b      	beq.n	800c458 <_vfiprintf_r+0xe4>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3aa:	2330      	movs	r3, #48	; 0x30
 800c3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b0:	9503      	str	r5, [sp, #12]
 800c3b2:	f04f 0b01 	mov.w	fp, #1
 800c3b6:	46b8      	mov	r8, r7
 800c3b8:	4645      	mov	r5, r8
 800c3ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3be:	b10b      	cbz	r3, 800c3c4 <_vfiprintf_r+0x50>
 800c3c0:	2b25      	cmp	r3, #37	; 0x25
 800c3c2:	d154      	bne.n	800c46e <_vfiprintf_r+0xfa>
 800c3c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800c3c8:	d00b      	beq.n	800c3e2 <_vfiprintf_r+0x6e>
 800c3ca:	4653      	mov	r3, sl
 800c3cc:	463a      	mov	r2, r7
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7ff ffbc 	bl	800c34e <__sfputs_r>
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f000 80c2 	beq.w	800c560 <_vfiprintf_r+0x1ec>
 800c3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3de:	4453      	add	r3, sl
 800c3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e2:	f898 3000 	ldrb.w	r3, [r8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 80ba 	beq.w	800c560 <_vfiprintf_r+0x1ec>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	9307      	str	r3, [sp, #28]
 800c3fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c400:	46a8      	mov	r8, r5
 800c402:	2205      	movs	r2, #5
 800c404:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c408:	485e      	ldr	r0, [pc, #376]	; (800c584 <_vfiprintf_r+0x210>)
 800c40a:	f7f3 ff69 	bl	80002e0 <memchr>
 800c40e:	9b04      	ldr	r3, [sp, #16]
 800c410:	bb78      	cbnz	r0, 800c472 <_vfiprintf_r+0xfe>
 800c412:	06d9      	lsls	r1, r3, #27
 800c414:	bf44      	itt	mi
 800c416:	2220      	movmi	r2, #32
 800c418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c41c:	071a      	lsls	r2, r3, #28
 800c41e:	bf44      	itt	mi
 800c420:	222b      	movmi	r2, #43	; 0x2b
 800c422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c426:	782a      	ldrb	r2, [r5, #0]
 800c428:	2a2a      	cmp	r2, #42	; 0x2a
 800c42a:	d02a      	beq.n	800c482 <_vfiprintf_r+0x10e>
 800c42c:	9a07      	ldr	r2, [sp, #28]
 800c42e:	46a8      	mov	r8, r5
 800c430:	2000      	movs	r0, #0
 800c432:	250a      	movs	r5, #10
 800c434:	4641      	mov	r1, r8
 800c436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c43a:	3b30      	subs	r3, #48	; 0x30
 800c43c:	2b09      	cmp	r3, #9
 800c43e:	d969      	bls.n	800c514 <_vfiprintf_r+0x1a0>
 800c440:	b360      	cbz	r0, 800c49c <_vfiprintf_r+0x128>
 800c442:	e024      	b.n	800c48e <_vfiprintf_r+0x11a>
 800c444:	4b50      	ldr	r3, [pc, #320]	; (800c588 <_vfiprintf_r+0x214>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d101      	bne.n	800c44e <_vfiprintf_r+0xda>
 800c44a:	68b4      	ldr	r4, [r6, #8]
 800c44c:	e7a2      	b.n	800c394 <_vfiprintf_r+0x20>
 800c44e:	4b4f      	ldr	r3, [pc, #316]	; (800c58c <_vfiprintf_r+0x218>)
 800c450:	429c      	cmp	r4, r3
 800c452:	bf08      	it	eq
 800c454:	68f4      	ldreq	r4, [r6, #12]
 800c456:	e79d      	b.n	800c394 <_vfiprintf_r+0x20>
 800c458:	4621      	mov	r1, r4
 800c45a:	4630      	mov	r0, r6
 800c45c:	f000 fadc 	bl	800ca18 <__swsetup_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	d09d      	beq.n	800c3a0 <_vfiprintf_r+0x2c>
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	b01d      	add	sp, #116	; 0x74
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	46a8      	mov	r8, r5
 800c470:	e7a2      	b.n	800c3b8 <_vfiprintf_r+0x44>
 800c472:	4a44      	ldr	r2, [pc, #272]	; (800c584 <_vfiprintf_r+0x210>)
 800c474:	1a80      	subs	r0, r0, r2
 800c476:	fa0b f000 	lsl.w	r0, fp, r0
 800c47a:	4318      	orrs	r0, r3
 800c47c:	9004      	str	r0, [sp, #16]
 800c47e:	4645      	mov	r5, r8
 800c480:	e7be      	b.n	800c400 <_vfiprintf_r+0x8c>
 800c482:	9a03      	ldr	r2, [sp, #12]
 800c484:	1d11      	adds	r1, r2, #4
 800c486:	6812      	ldr	r2, [r2, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2a00      	cmp	r2, #0
 800c48c:	db01      	blt.n	800c492 <_vfiprintf_r+0x11e>
 800c48e:	9207      	str	r2, [sp, #28]
 800c490:	e004      	b.n	800c49c <_vfiprintf_r+0x128>
 800c492:	4252      	negs	r2, r2
 800c494:	f043 0302 	orr.w	r3, r3, #2
 800c498:	9207      	str	r2, [sp, #28]
 800c49a:	9304      	str	r3, [sp, #16]
 800c49c:	f898 3000 	ldrb.w	r3, [r8]
 800c4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a2:	d10e      	bne.n	800c4c2 <_vfiprintf_r+0x14e>
 800c4a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4aa:	d138      	bne.n	800c51e <_vfiprintf_r+0x1aa>
 800c4ac:	9b03      	ldr	r3, [sp, #12]
 800c4ae:	1d1a      	adds	r2, r3, #4
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	9203      	str	r2, [sp, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfb8      	it	lt
 800c4b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4bc:	f108 0802 	add.w	r8, r8, #2
 800c4c0:	9305      	str	r3, [sp, #20]
 800c4c2:	4d33      	ldr	r5, [pc, #204]	; (800c590 <_vfiprintf_r+0x21c>)
 800c4c4:	f898 1000 	ldrb.w	r1, [r8]
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f7f3 ff08 	bl	80002e0 <memchr>
 800c4d0:	b140      	cbz	r0, 800c4e4 <_vfiprintf_r+0x170>
 800c4d2:	2340      	movs	r3, #64	; 0x40
 800c4d4:	1b40      	subs	r0, r0, r5
 800c4d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c4da:	9b04      	ldr	r3, [sp, #16]
 800c4dc:	4303      	orrs	r3, r0
 800c4de:	f108 0801 	add.w	r8, r8, #1
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	f898 1000 	ldrb.w	r1, [r8]
 800c4e8:	482a      	ldr	r0, [pc, #168]	; (800c594 <_vfiprintf_r+0x220>)
 800c4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4ee:	2206      	movs	r2, #6
 800c4f0:	f108 0701 	add.w	r7, r8, #1
 800c4f4:	f7f3 fef4 	bl	80002e0 <memchr>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d037      	beq.n	800c56c <_vfiprintf_r+0x1f8>
 800c4fc:	4b26      	ldr	r3, [pc, #152]	; (800c598 <_vfiprintf_r+0x224>)
 800c4fe:	bb1b      	cbnz	r3, 800c548 <_vfiprintf_r+0x1d4>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	3307      	adds	r3, #7
 800c504:	f023 0307 	bic.w	r3, r3, #7
 800c508:	3308      	adds	r3, #8
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50e:	444b      	add	r3, r9
 800c510:	9309      	str	r3, [sp, #36]	; 0x24
 800c512:	e750      	b.n	800c3b6 <_vfiprintf_r+0x42>
 800c514:	fb05 3202 	mla	r2, r5, r2, r3
 800c518:	2001      	movs	r0, #1
 800c51a:	4688      	mov	r8, r1
 800c51c:	e78a      	b.n	800c434 <_vfiprintf_r+0xc0>
 800c51e:	2300      	movs	r3, #0
 800c520:	f108 0801 	add.w	r8, r8, #1
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	4619      	mov	r1, r3
 800c528:	250a      	movs	r5, #10
 800c52a:	4640      	mov	r0, r8
 800c52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c530:	3a30      	subs	r2, #48	; 0x30
 800c532:	2a09      	cmp	r2, #9
 800c534:	d903      	bls.n	800c53e <_vfiprintf_r+0x1ca>
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0c3      	beq.n	800c4c2 <_vfiprintf_r+0x14e>
 800c53a:	9105      	str	r1, [sp, #20]
 800c53c:	e7c1      	b.n	800c4c2 <_vfiprintf_r+0x14e>
 800c53e:	fb05 2101 	mla	r1, r5, r1, r2
 800c542:	2301      	movs	r3, #1
 800c544:	4680      	mov	r8, r0
 800c546:	e7f0      	b.n	800c52a <_vfiprintf_r+0x1b6>
 800c548:	ab03      	add	r3, sp, #12
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	4622      	mov	r2, r4
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <_vfiprintf_r+0x228>)
 800c550:	a904      	add	r1, sp, #16
 800c552:	4630      	mov	r0, r6
 800c554:	f3af 8000 	nop.w
 800c558:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c55c:	4681      	mov	r9, r0
 800c55e:	d1d5      	bne.n	800c50c <_vfiprintf_r+0x198>
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	065b      	lsls	r3, r3, #25
 800c564:	f53f af7e 	bmi.w	800c464 <_vfiprintf_r+0xf0>
 800c568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c56a:	e77d      	b.n	800c468 <_vfiprintf_r+0xf4>
 800c56c:	ab03      	add	r3, sp, #12
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	4622      	mov	r2, r4
 800c572:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <_vfiprintf_r+0x228>)
 800c574:	a904      	add	r1, sp, #16
 800c576:	4630      	mov	r0, r6
 800c578:	f000 f888 	bl	800c68c <_printf_i>
 800c57c:	e7ec      	b.n	800c558 <_vfiprintf_r+0x1e4>
 800c57e:	bf00      	nop
 800c580:	08018214 	.word	0x08018214
 800c584:	080181c0 	.word	0x080181c0
 800c588:	08018234 	.word	0x08018234
 800c58c:	080181f4 	.word	0x080181f4
 800c590:	080181c6 	.word	0x080181c6
 800c594:	080181ca 	.word	0x080181ca
 800c598:	00000000 	.word	0x00000000
 800c59c:	0800c34f 	.word	0x0800c34f

0800c5a0 <_printf_common>:
 800c5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a4:	4691      	mov	r9, r2
 800c5a6:	461f      	mov	r7, r3
 800c5a8:	688a      	ldr	r2, [r1, #8]
 800c5aa:	690b      	ldr	r3, [r1, #16]
 800c5ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	bfb8      	it	lt
 800c5b4:	4613      	movlt	r3, r2
 800c5b6:	f8c9 3000 	str.w	r3, [r9]
 800c5ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	b112      	cbz	r2, 800c5ca <_printf_common+0x2a>
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	f8c9 3000 	str.w	r3, [r9]
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	0699      	lsls	r1, r3, #26
 800c5ce:	bf42      	ittt	mi
 800c5d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c5d4:	3302      	addmi	r3, #2
 800c5d6:	f8c9 3000 	strmi.w	r3, [r9]
 800c5da:	6825      	ldr	r5, [r4, #0]
 800c5dc:	f015 0506 	ands.w	r5, r5, #6
 800c5e0:	d107      	bne.n	800c5f2 <_printf_common+0x52>
 800c5e2:	f104 0a19 	add.w	sl, r4, #25
 800c5e6:	68e3      	ldr	r3, [r4, #12]
 800c5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5ec:	1a9b      	subs	r3, r3, r2
 800c5ee:	42ab      	cmp	r3, r5
 800c5f0:	dc28      	bgt.n	800c644 <_printf_common+0xa4>
 800c5f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	3300      	adds	r3, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2301      	movne	r3, #1
 800c5fe:	0692      	lsls	r2, r2, #26
 800c600:	d42d      	bmi.n	800c65e <_printf_common+0xbe>
 800c602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c606:	4639      	mov	r1, r7
 800c608:	4630      	mov	r0, r6
 800c60a:	47c0      	blx	r8
 800c60c:	3001      	adds	r0, #1
 800c60e:	d020      	beq.n	800c652 <_printf_common+0xb2>
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	68e5      	ldr	r5, [r4, #12]
 800c614:	f8d9 2000 	ldr.w	r2, [r9]
 800c618:	f003 0306 	and.w	r3, r3, #6
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	bf08      	it	eq
 800c620:	1aad      	subeq	r5, r5, r2
 800c622:	68a3      	ldr	r3, [r4, #8]
 800c624:	6922      	ldr	r2, [r4, #16]
 800c626:	bf0c      	ite	eq
 800c628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c62c:	2500      	movne	r5, #0
 800c62e:	4293      	cmp	r3, r2
 800c630:	bfc4      	itt	gt
 800c632:	1a9b      	subgt	r3, r3, r2
 800c634:	18ed      	addgt	r5, r5, r3
 800c636:	f04f 0900 	mov.w	r9, #0
 800c63a:	341a      	adds	r4, #26
 800c63c:	454d      	cmp	r5, r9
 800c63e:	d11a      	bne.n	800c676 <_printf_common+0xd6>
 800c640:	2000      	movs	r0, #0
 800c642:	e008      	b.n	800c656 <_printf_common+0xb6>
 800c644:	2301      	movs	r3, #1
 800c646:	4652      	mov	r2, sl
 800c648:	4639      	mov	r1, r7
 800c64a:	4630      	mov	r0, r6
 800c64c:	47c0      	blx	r8
 800c64e:	3001      	adds	r0, #1
 800c650:	d103      	bne.n	800c65a <_printf_common+0xba>
 800c652:	f04f 30ff 	mov.w	r0, #4294967295
 800c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65a:	3501      	adds	r5, #1
 800c65c:	e7c3      	b.n	800c5e6 <_printf_common+0x46>
 800c65e:	18e1      	adds	r1, r4, r3
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	2030      	movs	r0, #48	; 0x30
 800c664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c668:	4422      	add	r2, r4
 800c66a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c66e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c672:	3302      	adds	r3, #2
 800c674:	e7c5      	b.n	800c602 <_printf_common+0x62>
 800c676:	2301      	movs	r3, #1
 800c678:	4622      	mov	r2, r4
 800c67a:	4639      	mov	r1, r7
 800c67c:	4630      	mov	r0, r6
 800c67e:	47c0      	blx	r8
 800c680:	3001      	adds	r0, #1
 800c682:	d0e6      	beq.n	800c652 <_printf_common+0xb2>
 800c684:	f109 0901 	add.w	r9, r9, #1
 800c688:	e7d8      	b.n	800c63c <_printf_common+0x9c>
	...

0800c68c <_printf_i>:
 800c68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c690:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c694:	460c      	mov	r4, r1
 800c696:	7e09      	ldrb	r1, [r1, #24]
 800c698:	b085      	sub	sp, #20
 800c69a:	296e      	cmp	r1, #110	; 0x6e
 800c69c:	4617      	mov	r7, r2
 800c69e:	4606      	mov	r6, r0
 800c6a0:	4698      	mov	r8, r3
 800c6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6a4:	f000 80b3 	beq.w	800c80e <_printf_i+0x182>
 800c6a8:	d822      	bhi.n	800c6f0 <_printf_i+0x64>
 800c6aa:	2963      	cmp	r1, #99	; 0x63
 800c6ac:	d036      	beq.n	800c71c <_printf_i+0x90>
 800c6ae:	d80a      	bhi.n	800c6c6 <_printf_i+0x3a>
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	f000 80b9 	beq.w	800c828 <_printf_i+0x19c>
 800c6b6:	2958      	cmp	r1, #88	; 0x58
 800c6b8:	f000 8083 	beq.w	800c7c2 <_printf_i+0x136>
 800c6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c6c4:	e032      	b.n	800c72c <_printf_i+0xa0>
 800c6c6:	2964      	cmp	r1, #100	; 0x64
 800c6c8:	d001      	beq.n	800c6ce <_printf_i+0x42>
 800c6ca:	2969      	cmp	r1, #105	; 0x69
 800c6cc:	d1f6      	bne.n	800c6bc <_printf_i+0x30>
 800c6ce:	6820      	ldr	r0, [r4, #0]
 800c6d0:	6813      	ldr	r3, [r2, #0]
 800c6d2:	0605      	lsls	r5, r0, #24
 800c6d4:	f103 0104 	add.w	r1, r3, #4
 800c6d8:	d52a      	bpl.n	800c730 <_printf_i+0xa4>
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6011      	str	r1, [r2, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	da03      	bge.n	800c6ea <_printf_i+0x5e>
 800c6e2:	222d      	movs	r2, #45	; 0x2d
 800c6e4:	425b      	negs	r3, r3
 800c6e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6ea:	486f      	ldr	r0, [pc, #444]	; (800c8a8 <_printf_i+0x21c>)
 800c6ec:	220a      	movs	r2, #10
 800c6ee:	e039      	b.n	800c764 <_printf_i+0xd8>
 800c6f0:	2973      	cmp	r1, #115	; 0x73
 800c6f2:	f000 809d 	beq.w	800c830 <_printf_i+0x1a4>
 800c6f6:	d808      	bhi.n	800c70a <_printf_i+0x7e>
 800c6f8:	296f      	cmp	r1, #111	; 0x6f
 800c6fa:	d020      	beq.n	800c73e <_printf_i+0xb2>
 800c6fc:	2970      	cmp	r1, #112	; 0x70
 800c6fe:	d1dd      	bne.n	800c6bc <_printf_i+0x30>
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	f043 0320 	orr.w	r3, r3, #32
 800c706:	6023      	str	r3, [r4, #0]
 800c708:	e003      	b.n	800c712 <_printf_i+0x86>
 800c70a:	2975      	cmp	r1, #117	; 0x75
 800c70c:	d017      	beq.n	800c73e <_printf_i+0xb2>
 800c70e:	2978      	cmp	r1, #120	; 0x78
 800c710:	d1d4      	bne.n	800c6bc <_printf_i+0x30>
 800c712:	2378      	movs	r3, #120	; 0x78
 800c714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c718:	4864      	ldr	r0, [pc, #400]	; (800c8ac <_printf_i+0x220>)
 800c71a:	e055      	b.n	800c7c8 <_printf_i+0x13c>
 800c71c:	6813      	ldr	r3, [r2, #0]
 800c71e:	1d19      	adds	r1, r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6011      	str	r1, [r2, #0]
 800c724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c72c:	2301      	movs	r3, #1
 800c72e:	e08c      	b.n	800c84a <_printf_i+0x1be>
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6011      	str	r1, [r2, #0]
 800c734:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c738:	bf18      	it	ne
 800c73a:	b21b      	sxthne	r3, r3
 800c73c:	e7cf      	b.n	800c6de <_printf_i+0x52>
 800c73e:	6813      	ldr	r3, [r2, #0]
 800c740:	6825      	ldr	r5, [r4, #0]
 800c742:	1d18      	adds	r0, r3, #4
 800c744:	6010      	str	r0, [r2, #0]
 800c746:	0628      	lsls	r0, r5, #24
 800c748:	d501      	bpl.n	800c74e <_printf_i+0xc2>
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	e002      	b.n	800c754 <_printf_i+0xc8>
 800c74e:	0668      	lsls	r0, r5, #25
 800c750:	d5fb      	bpl.n	800c74a <_printf_i+0xbe>
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	4854      	ldr	r0, [pc, #336]	; (800c8a8 <_printf_i+0x21c>)
 800c756:	296f      	cmp	r1, #111	; 0x6f
 800c758:	bf14      	ite	ne
 800c75a:	220a      	movne	r2, #10
 800c75c:	2208      	moveq	r2, #8
 800c75e:	2100      	movs	r1, #0
 800c760:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c764:	6865      	ldr	r5, [r4, #4]
 800c766:	60a5      	str	r5, [r4, #8]
 800c768:	2d00      	cmp	r5, #0
 800c76a:	f2c0 8095 	blt.w	800c898 <_printf_i+0x20c>
 800c76e:	6821      	ldr	r1, [r4, #0]
 800c770:	f021 0104 	bic.w	r1, r1, #4
 800c774:	6021      	str	r1, [r4, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d13d      	bne.n	800c7f6 <_printf_i+0x16a>
 800c77a:	2d00      	cmp	r5, #0
 800c77c:	f040 808e 	bne.w	800c89c <_printf_i+0x210>
 800c780:	4665      	mov	r5, ip
 800c782:	2a08      	cmp	r2, #8
 800c784:	d10b      	bne.n	800c79e <_printf_i+0x112>
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	07db      	lsls	r3, r3, #31
 800c78a:	d508      	bpl.n	800c79e <_printf_i+0x112>
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	6862      	ldr	r2, [r4, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	bfde      	ittt	le
 800c794:	2330      	movle	r3, #48	; 0x30
 800c796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c79a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c79e:	ebac 0305 	sub.w	r3, ip, r5
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	f8cd 8000 	str.w	r8, [sp]
 800c7a8:	463b      	mov	r3, r7
 800c7aa:	aa03      	add	r2, sp, #12
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff fef6 	bl	800c5a0 <_printf_common>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d14d      	bne.n	800c854 <_printf_i+0x1c8>
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	b005      	add	sp, #20
 800c7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	4839      	ldr	r0, [pc, #228]	; (800c8a8 <_printf_i+0x21c>)
 800c7c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c7c8:	6813      	ldr	r3, [r2, #0]
 800c7ca:	6821      	ldr	r1, [r4, #0]
 800c7cc:	1d1d      	adds	r5, r3, #4
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6015      	str	r5, [r2, #0]
 800c7d2:	060a      	lsls	r2, r1, #24
 800c7d4:	d50b      	bpl.n	800c7ee <_printf_i+0x162>
 800c7d6:	07ca      	lsls	r2, r1, #31
 800c7d8:	bf44      	itt	mi
 800c7da:	f041 0120 	orrmi.w	r1, r1, #32
 800c7de:	6021      	strmi	r1, [r4, #0]
 800c7e0:	b91b      	cbnz	r3, 800c7ea <_printf_i+0x15e>
 800c7e2:	6822      	ldr	r2, [r4, #0]
 800c7e4:	f022 0220 	bic.w	r2, r2, #32
 800c7e8:	6022      	str	r2, [r4, #0]
 800c7ea:	2210      	movs	r2, #16
 800c7ec:	e7b7      	b.n	800c75e <_printf_i+0xd2>
 800c7ee:	064d      	lsls	r5, r1, #25
 800c7f0:	bf48      	it	mi
 800c7f2:	b29b      	uxthmi	r3, r3
 800c7f4:	e7ef      	b.n	800c7d6 <_printf_i+0x14a>
 800c7f6:	4665      	mov	r5, ip
 800c7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7fc:	fb02 3311 	mls	r3, r2, r1, r3
 800c800:	5cc3      	ldrb	r3, [r0, r3]
 800c802:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c806:	460b      	mov	r3, r1
 800c808:	2900      	cmp	r1, #0
 800c80a:	d1f5      	bne.n	800c7f8 <_printf_i+0x16c>
 800c80c:	e7b9      	b.n	800c782 <_printf_i+0xf6>
 800c80e:	6813      	ldr	r3, [r2, #0]
 800c810:	6825      	ldr	r5, [r4, #0]
 800c812:	6961      	ldr	r1, [r4, #20]
 800c814:	1d18      	adds	r0, r3, #4
 800c816:	6010      	str	r0, [r2, #0]
 800c818:	0628      	lsls	r0, r5, #24
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	d501      	bpl.n	800c822 <_printf_i+0x196>
 800c81e:	6019      	str	r1, [r3, #0]
 800c820:	e002      	b.n	800c828 <_printf_i+0x19c>
 800c822:	066a      	lsls	r2, r5, #25
 800c824:	d5fb      	bpl.n	800c81e <_printf_i+0x192>
 800c826:	8019      	strh	r1, [r3, #0]
 800c828:	2300      	movs	r3, #0
 800c82a:	6123      	str	r3, [r4, #16]
 800c82c:	4665      	mov	r5, ip
 800c82e:	e7b9      	b.n	800c7a4 <_printf_i+0x118>
 800c830:	6813      	ldr	r3, [r2, #0]
 800c832:	1d19      	adds	r1, r3, #4
 800c834:	6011      	str	r1, [r2, #0]
 800c836:	681d      	ldr	r5, [r3, #0]
 800c838:	6862      	ldr	r2, [r4, #4]
 800c83a:	2100      	movs	r1, #0
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7f3 fd4f 	bl	80002e0 <memchr>
 800c842:	b108      	cbz	r0, 800c848 <_printf_i+0x1bc>
 800c844:	1b40      	subs	r0, r0, r5
 800c846:	6060      	str	r0, [r4, #4]
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	6123      	str	r3, [r4, #16]
 800c84c:	2300      	movs	r3, #0
 800c84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c852:	e7a7      	b.n	800c7a4 <_printf_i+0x118>
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	462a      	mov	r2, r5
 800c858:	4639      	mov	r1, r7
 800c85a:	4630      	mov	r0, r6
 800c85c:	47c0      	blx	r8
 800c85e:	3001      	adds	r0, #1
 800c860:	d0aa      	beq.n	800c7b8 <_printf_i+0x12c>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	079b      	lsls	r3, r3, #30
 800c866:	d413      	bmi.n	800c890 <_printf_i+0x204>
 800c868:	68e0      	ldr	r0, [r4, #12]
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	4298      	cmp	r0, r3
 800c86e:	bfb8      	it	lt
 800c870:	4618      	movlt	r0, r3
 800c872:	e7a3      	b.n	800c7bc <_printf_i+0x130>
 800c874:	2301      	movs	r3, #1
 800c876:	464a      	mov	r2, r9
 800c878:	4639      	mov	r1, r7
 800c87a:	4630      	mov	r0, r6
 800c87c:	47c0      	blx	r8
 800c87e:	3001      	adds	r0, #1
 800c880:	d09a      	beq.n	800c7b8 <_printf_i+0x12c>
 800c882:	3501      	adds	r5, #1
 800c884:	68e3      	ldr	r3, [r4, #12]
 800c886:	9a03      	ldr	r2, [sp, #12]
 800c888:	1a9b      	subs	r3, r3, r2
 800c88a:	42ab      	cmp	r3, r5
 800c88c:	dcf2      	bgt.n	800c874 <_printf_i+0x1e8>
 800c88e:	e7eb      	b.n	800c868 <_printf_i+0x1dc>
 800c890:	2500      	movs	r5, #0
 800c892:	f104 0919 	add.w	r9, r4, #25
 800c896:	e7f5      	b.n	800c884 <_printf_i+0x1f8>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1ac      	bne.n	800c7f6 <_printf_i+0x16a>
 800c89c:	7803      	ldrb	r3, [r0, #0]
 800c89e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a6:	e76c      	b.n	800c782 <_printf_i+0xf6>
 800c8a8:	080181d1 	.word	0x080181d1
 800c8ac:	080181e2 	.word	0x080181e2

0800c8b0 <iprintf>:
 800c8b0:	b40f      	push	{r0, r1, r2, r3}
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <iprintf+0x2c>)
 800c8b4:	b513      	push	{r0, r1, r4, lr}
 800c8b6:	681c      	ldr	r4, [r3, #0]
 800c8b8:	b124      	cbz	r4, 800c8c4 <iprintf+0x14>
 800c8ba:	69a3      	ldr	r3, [r4, #24]
 800c8bc:	b913      	cbnz	r3, 800c8c4 <iprintf+0x14>
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 fa10 	bl	800cce4 <__sinit>
 800c8c4:	ab05      	add	r3, sp, #20
 800c8c6:	9a04      	ldr	r2, [sp, #16]
 800c8c8:	68a1      	ldr	r1, [r4, #8]
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f7ff fd51 	bl	800c374 <_vfiprintf_r>
 800c8d2:	b002      	add	sp, #8
 800c8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8d8:	b004      	add	sp, #16
 800c8da:	4770      	bx	lr
 800c8dc:	20000104 	.word	0x20000104

0800c8e0 <_sbrk_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4c06      	ldr	r4, [pc, #24]	; (800c8fc <_sbrk_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	f7f5 fa02 	bl	8001cf4 <_sbrk>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_sbrk_r+0x1a>
 800c8f4:	6823      	ldr	r3, [r4, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_sbrk_r+0x1a>
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	20000aec 	.word	0x20000aec

0800c900 <_vsniprintf_r>:
 800c900:	b530      	push	{r4, r5, lr}
 800c902:	1e14      	subs	r4, r2, #0
 800c904:	4605      	mov	r5, r0
 800c906:	b09b      	sub	sp, #108	; 0x6c
 800c908:	4618      	mov	r0, r3
 800c90a:	da05      	bge.n	800c918 <_vsniprintf_r+0x18>
 800c90c:	238b      	movs	r3, #139	; 0x8b
 800c90e:	602b      	str	r3, [r5, #0]
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	b01b      	add	sp, #108	; 0x6c
 800c916:	bd30      	pop	{r4, r5, pc}
 800c918:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c91c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c920:	bf14      	ite	ne
 800c922:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c926:	4623      	moveq	r3, r4
 800c928:	9302      	str	r3, [sp, #8]
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c930:	9100      	str	r1, [sp, #0]
 800c932:	9104      	str	r1, [sp, #16]
 800c934:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c938:	4602      	mov	r2, r0
 800c93a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c93c:	4669      	mov	r1, sp
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 fb40 	bl	800cfc4 <_svfiprintf_r>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	bfbc      	itt	lt
 800c948:	238b      	movlt	r3, #139	; 0x8b
 800c94a:	602b      	strlt	r3, [r5, #0]
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	d0e1      	beq.n	800c914 <_vsniprintf_r+0x14>
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	e7dd      	b.n	800c914 <_vsniprintf_r+0x14>

0800c958 <vsniprintf>:
 800c958:	b507      	push	{r0, r1, r2, lr}
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	4613      	mov	r3, r2
 800c95e:	460a      	mov	r2, r1
 800c960:	4601      	mov	r1, r0
 800c962:	4803      	ldr	r0, [pc, #12]	; (800c970 <vsniprintf+0x18>)
 800c964:	6800      	ldr	r0, [r0, #0]
 800c966:	f7ff ffcb 	bl	800c900 <_vsniprintf_r>
 800c96a:	b003      	add	sp, #12
 800c96c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c970:	20000104 	.word	0x20000104

0800c974 <__swbuf_r>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	460e      	mov	r6, r1
 800c978:	4614      	mov	r4, r2
 800c97a:	4605      	mov	r5, r0
 800c97c:	b118      	cbz	r0, 800c986 <__swbuf_r+0x12>
 800c97e:	6983      	ldr	r3, [r0, #24]
 800c980:	b90b      	cbnz	r3, 800c986 <__swbuf_r+0x12>
 800c982:	f000 f9af 	bl	800cce4 <__sinit>
 800c986:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <__swbuf_r+0x98>)
 800c988:	429c      	cmp	r4, r3
 800c98a:	d12a      	bne.n	800c9e2 <__swbuf_r+0x6e>
 800c98c:	686c      	ldr	r4, [r5, #4]
 800c98e:	69a3      	ldr	r3, [r4, #24]
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	071a      	lsls	r2, r3, #28
 800c996:	d52e      	bpl.n	800c9f6 <__swbuf_r+0x82>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	b363      	cbz	r3, 800c9f6 <__swbuf_r+0x82>
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	6820      	ldr	r0, [r4, #0]
 800c9a0:	1ac0      	subs	r0, r0, r3
 800c9a2:	6963      	ldr	r3, [r4, #20]
 800c9a4:	b2f6      	uxtb	r6, r6
 800c9a6:	4283      	cmp	r3, r0
 800c9a8:	4637      	mov	r7, r6
 800c9aa:	dc04      	bgt.n	800c9b6 <__swbuf_r+0x42>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 f92e 	bl	800cc10 <_fflush_r>
 800c9b4:	bb28      	cbnz	r0, 800ca02 <__swbuf_r+0x8e>
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	60a3      	str	r3, [r4, #8]
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	6022      	str	r2, [r4, #0]
 800c9c2:	701e      	strb	r6, [r3, #0]
 800c9c4:	6963      	ldr	r3, [r4, #20]
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	4283      	cmp	r3, r0
 800c9ca:	d004      	beq.n	800c9d6 <__swbuf_r+0x62>
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	07db      	lsls	r3, r3, #31
 800c9d0:	d519      	bpl.n	800ca06 <__swbuf_r+0x92>
 800c9d2:	2e0a      	cmp	r6, #10
 800c9d4:	d117      	bne.n	800ca06 <__swbuf_r+0x92>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f000 f919 	bl	800cc10 <_fflush_r>
 800c9de:	b190      	cbz	r0, 800ca06 <__swbuf_r+0x92>
 800c9e0:	e00f      	b.n	800ca02 <__swbuf_r+0x8e>
 800c9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <__swbuf_r+0x9c>)
 800c9e4:	429c      	cmp	r4, r3
 800c9e6:	d101      	bne.n	800c9ec <__swbuf_r+0x78>
 800c9e8:	68ac      	ldr	r4, [r5, #8]
 800c9ea:	e7d0      	b.n	800c98e <__swbuf_r+0x1a>
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <__swbuf_r+0xa0>)
 800c9ee:	429c      	cmp	r4, r3
 800c9f0:	bf08      	it	eq
 800c9f2:	68ec      	ldreq	r4, [r5, #12]
 800c9f4:	e7cb      	b.n	800c98e <__swbuf_r+0x1a>
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f000 f80d 	bl	800ca18 <__swsetup_r>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0cc      	beq.n	800c99c <__swbuf_r+0x28>
 800ca02:	f04f 37ff 	mov.w	r7, #4294967295
 800ca06:	4638      	mov	r0, r7
 800ca08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	08018214 	.word	0x08018214
 800ca10:	08018234 	.word	0x08018234
 800ca14:	080181f4 	.word	0x080181f4

0800ca18 <__swsetup_r>:
 800ca18:	4b32      	ldr	r3, [pc, #200]	; (800cae4 <__swsetup_r+0xcc>)
 800ca1a:	b570      	push	{r4, r5, r6, lr}
 800ca1c:	681d      	ldr	r5, [r3, #0]
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460c      	mov	r4, r1
 800ca22:	b125      	cbz	r5, 800ca2e <__swsetup_r+0x16>
 800ca24:	69ab      	ldr	r3, [r5, #24]
 800ca26:	b913      	cbnz	r3, 800ca2e <__swsetup_r+0x16>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f000 f95b 	bl	800cce4 <__sinit>
 800ca2e:	4b2e      	ldr	r3, [pc, #184]	; (800cae8 <__swsetup_r+0xd0>)
 800ca30:	429c      	cmp	r4, r3
 800ca32:	d10f      	bne.n	800ca54 <__swsetup_r+0x3c>
 800ca34:	686c      	ldr	r4, [r5, #4]
 800ca36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	0715      	lsls	r5, r2, #28
 800ca3e:	d42c      	bmi.n	800ca9a <__swsetup_r+0x82>
 800ca40:	06d0      	lsls	r0, r2, #27
 800ca42:	d411      	bmi.n	800ca68 <__swsetup_r+0x50>
 800ca44:	2209      	movs	r2, #9
 800ca46:	6032      	str	r2, [r6, #0]
 800ca48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca52:	e03e      	b.n	800cad2 <__swsetup_r+0xba>
 800ca54:	4b25      	ldr	r3, [pc, #148]	; (800caec <__swsetup_r+0xd4>)
 800ca56:	429c      	cmp	r4, r3
 800ca58:	d101      	bne.n	800ca5e <__swsetup_r+0x46>
 800ca5a:	68ac      	ldr	r4, [r5, #8]
 800ca5c:	e7eb      	b.n	800ca36 <__swsetup_r+0x1e>
 800ca5e:	4b24      	ldr	r3, [pc, #144]	; (800caf0 <__swsetup_r+0xd8>)
 800ca60:	429c      	cmp	r4, r3
 800ca62:	bf08      	it	eq
 800ca64:	68ec      	ldreq	r4, [r5, #12]
 800ca66:	e7e6      	b.n	800ca36 <__swsetup_r+0x1e>
 800ca68:	0751      	lsls	r1, r2, #29
 800ca6a:	d512      	bpl.n	800ca92 <__swsetup_r+0x7a>
 800ca6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca6e:	b141      	cbz	r1, 800ca82 <__swsetup_r+0x6a>
 800ca70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca74:	4299      	cmp	r1, r3
 800ca76:	d002      	beq.n	800ca7e <__swsetup_r+0x66>
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff fba9 	bl	800c1d0 <_free_r>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	6363      	str	r3, [r4, #52]	; 0x34
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6063      	str	r3, [r4, #4]
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	f043 0308 	orr.w	r3, r3, #8
 800ca98:	81a3      	strh	r3, [r4, #12]
 800ca9a:	6923      	ldr	r3, [r4, #16]
 800ca9c:	b94b      	cbnz	r3, 800cab2 <__swsetup_r+0x9a>
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa8:	d003      	beq.n	800cab2 <__swsetup_r+0x9a>
 800caaa:	4621      	mov	r1, r4
 800caac:	4630      	mov	r0, r6
 800caae:	f000 f9c7 	bl	800ce40 <__smakebuf_r>
 800cab2:	89a2      	ldrh	r2, [r4, #12]
 800cab4:	f012 0301 	ands.w	r3, r2, #1
 800cab8:	d00c      	beq.n	800cad4 <__swsetup_r+0xbc>
 800caba:	2300      	movs	r3, #0
 800cabc:	60a3      	str	r3, [r4, #8]
 800cabe:	6963      	ldr	r3, [r4, #20]
 800cac0:	425b      	negs	r3, r3
 800cac2:	61a3      	str	r3, [r4, #24]
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	b953      	cbnz	r3, 800cade <__swsetup_r+0xc6>
 800cac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cacc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cad0:	d1ba      	bne.n	800ca48 <__swsetup_r+0x30>
 800cad2:	bd70      	pop	{r4, r5, r6, pc}
 800cad4:	0792      	lsls	r2, r2, #30
 800cad6:	bf58      	it	pl
 800cad8:	6963      	ldrpl	r3, [r4, #20]
 800cada:	60a3      	str	r3, [r4, #8]
 800cadc:	e7f2      	b.n	800cac4 <__swsetup_r+0xac>
 800cade:	2000      	movs	r0, #0
 800cae0:	e7f7      	b.n	800cad2 <__swsetup_r+0xba>
 800cae2:	bf00      	nop
 800cae4:	20000104 	.word	0x20000104
 800cae8:	08018214 	.word	0x08018214
 800caec:	08018234 	.word	0x08018234
 800caf0:	080181f4 	.word	0x080181f4

0800caf4 <abort>:
 800caf4:	b508      	push	{r3, lr}
 800caf6:	2006      	movs	r0, #6
 800caf8:	f000 fb84 	bl	800d204 <raise>
 800cafc:	2001      	movs	r0, #1
 800cafe:	f7f5 f89d 	bl	8001c3c <_exit>
	...

0800cb04 <__sflush_r>:
 800cb04:	898a      	ldrh	r2, [r1, #12]
 800cb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	0710      	lsls	r0, r2, #28
 800cb0e:	460c      	mov	r4, r1
 800cb10:	d458      	bmi.n	800cbc4 <__sflush_r+0xc0>
 800cb12:	684b      	ldr	r3, [r1, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	dc05      	bgt.n	800cb24 <__sflush_r+0x20>
 800cb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dc02      	bgt.n	800cb24 <__sflush_r+0x20>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	d0f9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb30:	682f      	ldr	r7, [r5, #0]
 800cb32:	6a21      	ldr	r1, [r4, #32]
 800cb34:	602b      	str	r3, [r5, #0]
 800cb36:	d032      	beq.n	800cb9e <__sflush_r+0x9a>
 800cb38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	075a      	lsls	r2, r3, #29
 800cb3e:	d505      	bpl.n	800cb4c <__sflush_r+0x48>
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	1ac0      	subs	r0, r0, r3
 800cb44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb46:	b10b      	cbz	r3, 800cb4c <__sflush_r+0x48>
 800cb48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb4a:	1ac0      	subs	r0, r0, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4602      	mov	r2, r0
 800cb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb52:	6a21      	ldr	r1, [r4, #32]
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b0      	blx	r6
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	d106      	bne.n	800cb6c <__sflush_r+0x68>
 800cb5e:	6829      	ldr	r1, [r5, #0]
 800cb60:	291d      	cmp	r1, #29
 800cb62:	d848      	bhi.n	800cbf6 <__sflush_r+0xf2>
 800cb64:	4a29      	ldr	r2, [pc, #164]	; (800cc0c <__sflush_r+0x108>)
 800cb66:	40ca      	lsrs	r2, r1
 800cb68:	07d6      	lsls	r6, r2, #31
 800cb6a:	d544      	bpl.n	800cbf6 <__sflush_r+0xf2>
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	6062      	str	r2, [r4, #4]
 800cb70:	04d9      	lsls	r1, r3, #19
 800cb72:	6922      	ldr	r2, [r4, #16]
 800cb74:	6022      	str	r2, [r4, #0]
 800cb76:	d504      	bpl.n	800cb82 <__sflush_r+0x7e>
 800cb78:	1c42      	adds	r2, r0, #1
 800cb7a:	d101      	bne.n	800cb80 <__sflush_r+0x7c>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b903      	cbnz	r3, 800cb82 <__sflush_r+0x7e>
 800cb80:	6560      	str	r0, [r4, #84]	; 0x54
 800cb82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb84:	602f      	str	r7, [r5, #0]
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d0c9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cb8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	d002      	beq.n	800cb98 <__sflush_r+0x94>
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7ff fb1c 	bl	800c1d0 <_free_r>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	6360      	str	r0, [r4, #52]	; 0x34
 800cb9c:	e7c0      	b.n	800cb20 <__sflush_r+0x1c>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b0      	blx	r6
 800cba4:	1c41      	adds	r1, r0, #1
 800cba6:	d1c8      	bne.n	800cb3a <__sflush_r+0x36>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0c5      	beq.n	800cb3a <__sflush_r+0x36>
 800cbae:	2b1d      	cmp	r3, #29
 800cbb0:	d001      	beq.n	800cbb6 <__sflush_r+0xb2>
 800cbb2:	2b16      	cmp	r3, #22
 800cbb4:	d101      	bne.n	800cbba <__sflush_r+0xb6>
 800cbb6:	602f      	str	r7, [r5, #0]
 800cbb8:	e7b1      	b.n	800cb1e <__sflush_r+0x1a>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	e7ad      	b.n	800cb20 <__sflush_r+0x1c>
 800cbc4:	690f      	ldr	r7, [r1, #16]
 800cbc6:	2f00      	cmp	r7, #0
 800cbc8:	d0a9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cbca:	0793      	lsls	r3, r2, #30
 800cbcc:	680e      	ldr	r6, [r1, #0]
 800cbce:	bf08      	it	eq
 800cbd0:	694b      	ldreq	r3, [r1, #20]
 800cbd2:	600f      	str	r7, [r1, #0]
 800cbd4:	bf18      	it	ne
 800cbd6:	2300      	movne	r3, #0
 800cbd8:	eba6 0807 	sub.w	r8, r6, r7
 800cbdc:	608b      	str	r3, [r1, #8]
 800cbde:	f1b8 0f00 	cmp.w	r8, #0
 800cbe2:	dd9c      	ble.n	800cb1e <__sflush_r+0x1a>
 800cbe4:	4643      	mov	r3, r8
 800cbe6:	463a      	mov	r2, r7
 800cbe8:	6a21      	ldr	r1, [r4, #32]
 800cbea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b0      	blx	r6
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	dc06      	bgt.n	800cc02 <__sflush_r+0xfe>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cc00:	e78e      	b.n	800cb20 <__sflush_r+0x1c>
 800cc02:	4407      	add	r7, r0
 800cc04:	eba8 0800 	sub.w	r8, r8, r0
 800cc08:	e7e9      	b.n	800cbde <__sflush_r+0xda>
 800cc0a:	bf00      	nop
 800cc0c:	20400001 	.word	0x20400001

0800cc10 <_fflush_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	690b      	ldr	r3, [r1, #16]
 800cc14:	4605      	mov	r5, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	b1db      	cbz	r3, 800cc52 <_fflush_r+0x42>
 800cc1a:	b118      	cbz	r0, 800cc24 <_fflush_r+0x14>
 800cc1c:	6983      	ldr	r3, [r0, #24]
 800cc1e:	b90b      	cbnz	r3, 800cc24 <_fflush_r+0x14>
 800cc20:	f000 f860 	bl	800cce4 <__sinit>
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <_fflush_r+0x48>)
 800cc26:	429c      	cmp	r4, r3
 800cc28:	d109      	bne.n	800cc3e <_fflush_r+0x2e>
 800cc2a:	686c      	ldr	r4, [r5, #4]
 800cc2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc30:	b17b      	cbz	r3, 800cc52 <_fflush_r+0x42>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4628      	mov	r0, r5
 800cc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3a:	f7ff bf63 	b.w	800cb04 <__sflush_r>
 800cc3e:	4b07      	ldr	r3, [pc, #28]	; (800cc5c <_fflush_r+0x4c>)
 800cc40:	429c      	cmp	r4, r3
 800cc42:	d101      	bne.n	800cc48 <_fflush_r+0x38>
 800cc44:	68ac      	ldr	r4, [r5, #8]
 800cc46:	e7f1      	b.n	800cc2c <_fflush_r+0x1c>
 800cc48:	4b05      	ldr	r3, [pc, #20]	; (800cc60 <_fflush_r+0x50>)
 800cc4a:	429c      	cmp	r4, r3
 800cc4c:	bf08      	it	eq
 800cc4e:	68ec      	ldreq	r4, [r5, #12]
 800cc50:	e7ec      	b.n	800cc2c <_fflush_r+0x1c>
 800cc52:	2000      	movs	r0, #0
 800cc54:	bd38      	pop	{r3, r4, r5, pc}
 800cc56:	bf00      	nop
 800cc58:	08018214 	.word	0x08018214
 800cc5c:	08018234 	.word	0x08018234
 800cc60:	080181f4 	.word	0x080181f4

0800cc64 <std>:
 800cc64:	2300      	movs	r3, #0
 800cc66:	b510      	push	{r4, lr}
 800cc68:	4604      	mov	r4, r0
 800cc6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc6e:	6083      	str	r3, [r0, #8]
 800cc70:	8181      	strh	r1, [r0, #12]
 800cc72:	6643      	str	r3, [r0, #100]	; 0x64
 800cc74:	81c2      	strh	r2, [r0, #14]
 800cc76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc7a:	6183      	str	r3, [r0, #24]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	2208      	movs	r2, #8
 800cc80:	305c      	adds	r0, #92	; 0x5c
 800cc82:	f7ff fa9d 	bl	800c1c0 <memset>
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <std+0x38>)
 800cc88:	6263      	str	r3, [r4, #36]	; 0x24
 800cc8a:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <std+0x3c>)
 800cc8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <std+0x40>)
 800cc90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc92:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <std+0x44>)
 800cc94:	6224      	str	r4, [r4, #32]
 800cc96:	6323      	str	r3, [r4, #48]	; 0x30
 800cc98:	bd10      	pop	{r4, pc}
 800cc9a:	bf00      	nop
 800cc9c:	0800d23d 	.word	0x0800d23d
 800cca0:	0800d25f 	.word	0x0800d25f
 800cca4:	0800d297 	.word	0x0800d297
 800cca8:	0800d2bb 	.word	0x0800d2bb

0800ccac <_cleanup_r>:
 800ccac:	4901      	ldr	r1, [pc, #4]	; (800ccb4 <_cleanup_r+0x8>)
 800ccae:	f000 b885 	b.w	800cdbc <_fwalk_reent>
 800ccb2:	bf00      	nop
 800ccb4:	0800cc11 	.word	0x0800cc11

0800ccb8 <__sfmoreglue>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	1e4a      	subs	r2, r1, #1
 800ccbc:	2568      	movs	r5, #104	; 0x68
 800ccbe:	4355      	muls	r5, r2
 800ccc0:	460e      	mov	r6, r1
 800ccc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccc6:	f7ff fad1 	bl	800c26c <_malloc_r>
 800ccca:	4604      	mov	r4, r0
 800cccc:	b140      	cbz	r0, 800cce0 <__sfmoreglue+0x28>
 800ccce:	2100      	movs	r1, #0
 800ccd0:	e9c0 1600 	strd	r1, r6, [r0]
 800ccd4:	300c      	adds	r0, #12
 800ccd6:	60a0      	str	r0, [r4, #8]
 800ccd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccdc:	f7ff fa70 	bl	800c1c0 <memset>
 800cce0:	4620      	mov	r0, r4
 800cce2:	bd70      	pop	{r4, r5, r6, pc}

0800cce4 <__sinit>:
 800cce4:	6983      	ldr	r3, [r0, #24]
 800cce6:	b510      	push	{r4, lr}
 800cce8:	4604      	mov	r4, r0
 800ccea:	bb33      	cbnz	r3, 800cd3a <__sinit+0x56>
 800ccec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ccf0:	6503      	str	r3, [r0, #80]	; 0x50
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <__sinit+0x58>)
 800ccf4:	4a12      	ldr	r2, [pc, #72]	; (800cd40 <__sinit+0x5c>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6282      	str	r2, [r0, #40]	; 0x28
 800ccfa:	4298      	cmp	r0, r3
 800ccfc:	bf04      	itt	eq
 800ccfe:	2301      	moveq	r3, #1
 800cd00:	6183      	streq	r3, [r0, #24]
 800cd02:	f000 f81f 	bl	800cd44 <__sfp>
 800cd06:	6060      	str	r0, [r4, #4]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f81b 	bl	800cd44 <__sfp>
 800cd0e:	60a0      	str	r0, [r4, #8]
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 f817 	bl	800cd44 <__sfp>
 800cd16:	2200      	movs	r2, #0
 800cd18:	60e0      	str	r0, [r4, #12]
 800cd1a:	2104      	movs	r1, #4
 800cd1c:	6860      	ldr	r0, [r4, #4]
 800cd1e:	f7ff ffa1 	bl	800cc64 <std>
 800cd22:	2201      	movs	r2, #1
 800cd24:	2109      	movs	r1, #9
 800cd26:	68a0      	ldr	r0, [r4, #8]
 800cd28:	f7ff ff9c 	bl	800cc64 <std>
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	2112      	movs	r1, #18
 800cd30:	68e0      	ldr	r0, [r4, #12]
 800cd32:	f7ff ff97 	bl	800cc64 <std>
 800cd36:	2301      	movs	r3, #1
 800cd38:	61a3      	str	r3, [r4, #24]
 800cd3a:	bd10      	pop	{r4, pc}
 800cd3c:	080181bc 	.word	0x080181bc
 800cd40:	0800ccad 	.word	0x0800ccad

0800cd44 <__sfp>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	4b1b      	ldr	r3, [pc, #108]	; (800cdb4 <__sfp+0x70>)
 800cd48:	681e      	ldr	r6, [r3, #0]
 800cd4a:	69b3      	ldr	r3, [r6, #24]
 800cd4c:	4607      	mov	r7, r0
 800cd4e:	b913      	cbnz	r3, 800cd56 <__sfp+0x12>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff ffc7 	bl	800cce4 <__sinit>
 800cd56:	3648      	adds	r6, #72	; 0x48
 800cd58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	d503      	bpl.n	800cd68 <__sfp+0x24>
 800cd60:	6833      	ldr	r3, [r6, #0]
 800cd62:	b133      	cbz	r3, 800cd72 <__sfp+0x2e>
 800cd64:	6836      	ldr	r6, [r6, #0]
 800cd66:	e7f7      	b.n	800cd58 <__sfp+0x14>
 800cd68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd6c:	b16d      	cbz	r5, 800cd8a <__sfp+0x46>
 800cd6e:	3468      	adds	r4, #104	; 0x68
 800cd70:	e7f4      	b.n	800cd5c <__sfp+0x18>
 800cd72:	2104      	movs	r1, #4
 800cd74:	4638      	mov	r0, r7
 800cd76:	f7ff ff9f 	bl	800ccb8 <__sfmoreglue>
 800cd7a:	6030      	str	r0, [r6, #0]
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d1f1      	bne.n	800cd64 <__sfp+0x20>
 800cd80:	230c      	movs	r3, #12
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	4604      	mov	r4, r0
 800cd86:	4620      	mov	r0, r4
 800cd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd8a:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <__sfp+0x74>)
 800cd8c:	6665      	str	r5, [r4, #100]	; 0x64
 800cd8e:	e9c4 5500 	strd	r5, r5, [r4]
 800cd92:	60a5      	str	r5, [r4, #8]
 800cd94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd9c:	2208      	movs	r2, #8
 800cd9e:	4629      	mov	r1, r5
 800cda0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cda4:	f7ff fa0c 	bl	800c1c0 <memset>
 800cda8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdb0:	e7e9      	b.n	800cd86 <__sfp+0x42>
 800cdb2:	bf00      	nop
 800cdb4:	080181bc 	.word	0x080181bc
 800cdb8:	ffff0001 	.word	0xffff0001

0800cdbc <_fwalk_reent>:
 800cdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc0:	4680      	mov	r8, r0
 800cdc2:	4689      	mov	r9, r1
 800cdc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdc8:	2600      	movs	r6, #0
 800cdca:	b914      	cbnz	r4, 800cdd2 <_fwalk_reent+0x16>
 800cdcc:	4630      	mov	r0, r6
 800cdce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cdd6:	3f01      	subs	r7, #1
 800cdd8:	d501      	bpl.n	800cdde <_fwalk_reent+0x22>
 800cdda:	6824      	ldr	r4, [r4, #0]
 800cddc:	e7f5      	b.n	800cdca <_fwalk_reent+0xe>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d907      	bls.n	800cdf4 <_fwalk_reent+0x38>
 800cde4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cde8:	3301      	adds	r3, #1
 800cdea:	d003      	beq.n	800cdf4 <_fwalk_reent+0x38>
 800cdec:	4629      	mov	r1, r5
 800cdee:	4640      	mov	r0, r8
 800cdf0:	47c8      	blx	r9
 800cdf2:	4306      	orrs	r6, r0
 800cdf4:	3568      	adds	r5, #104	; 0x68
 800cdf6:	e7ee      	b.n	800cdd6 <_fwalk_reent+0x1a>

0800cdf8 <__swhatbuf_r>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	460e      	mov	r6, r1
 800cdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce00:	2900      	cmp	r1, #0
 800ce02:	b096      	sub	sp, #88	; 0x58
 800ce04:	4614      	mov	r4, r2
 800ce06:	461d      	mov	r5, r3
 800ce08:	da07      	bge.n	800ce1a <__swhatbuf_r+0x22>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	89b3      	ldrh	r3, [r6, #12]
 800ce10:	061a      	lsls	r2, r3, #24
 800ce12:	d410      	bmi.n	800ce36 <__swhatbuf_r+0x3e>
 800ce14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce18:	e00e      	b.n	800ce38 <__swhatbuf_r+0x40>
 800ce1a:	466a      	mov	r2, sp
 800ce1c:	f000 fa74 	bl	800d308 <_fstat_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	dbf2      	blt.n	800ce0a <__swhatbuf_r+0x12>
 800ce24:	9a01      	ldr	r2, [sp, #4]
 800ce26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce2e:	425a      	negs	r2, r3
 800ce30:	415a      	adcs	r2, r3
 800ce32:	602a      	str	r2, [r5, #0]
 800ce34:	e7ee      	b.n	800ce14 <__swhatbuf_r+0x1c>
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	2000      	movs	r0, #0
 800ce3a:	6023      	str	r3, [r4, #0]
 800ce3c:	b016      	add	sp, #88	; 0x58
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}

0800ce40 <__smakebuf_r>:
 800ce40:	898b      	ldrh	r3, [r1, #12]
 800ce42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce44:	079d      	lsls	r5, r3, #30
 800ce46:	4606      	mov	r6, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	d507      	bpl.n	800ce5c <__smakebuf_r+0x1c>
 800ce4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	2301      	movs	r3, #1
 800ce56:	6163      	str	r3, [r4, #20]
 800ce58:	b002      	add	sp, #8
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}
 800ce5c:	ab01      	add	r3, sp, #4
 800ce5e:	466a      	mov	r2, sp
 800ce60:	f7ff ffca 	bl	800cdf8 <__swhatbuf_r>
 800ce64:	9900      	ldr	r1, [sp, #0]
 800ce66:	4605      	mov	r5, r0
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff f9ff 	bl	800c26c <_malloc_r>
 800ce6e:	b948      	cbnz	r0, 800ce84 <__smakebuf_r+0x44>
 800ce70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce74:	059a      	lsls	r2, r3, #22
 800ce76:	d4ef      	bmi.n	800ce58 <__smakebuf_r+0x18>
 800ce78:	f023 0303 	bic.w	r3, r3, #3
 800ce7c:	f043 0302 	orr.w	r3, r3, #2
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	e7e3      	b.n	800ce4c <__smakebuf_r+0xc>
 800ce84:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <__smakebuf_r+0x7c>)
 800ce86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	6020      	str	r0, [r4, #0]
 800ce8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	9b00      	ldr	r3, [sp, #0]
 800ce94:	6163      	str	r3, [r4, #20]
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	6120      	str	r0, [r4, #16]
 800ce9a:	b15b      	cbz	r3, 800ceb4 <__smakebuf_r+0x74>
 800ce9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea0:	4630      	mov	r0, r6
 800cea2:	f000 fa43 	bl	800d32c <_isatty_r>
 800cea6:	b128      	cbz	r0, 800ceb4 <__smakebuf_r+0x74>
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	89a3      	ldrh	r3, [r4, #12]
 800ceb6:	431d      	orrs	r5, r3
 800ceb8:	81a5      	strh	r5, [r4, #12]
 800ceba:	e7cd      	b.n	800ce58 <__smakebuf_r+0x18>
 800cebc:	0800ccad 	.word	0x0800ccad

0800cec0 <__malloc_lock>:
 800cec0:	4770      	bx	lr

0800cec2 <__malloc_unlock>:
 800cec2:	4770      	bx	lr

0800cec4 <_realloc_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	4607      	mov	r7, r0
 800cec8:	4614      	mov	r4, r2
 800ceca:	460e      	mov	r6, r1
 800cecc:	b921      	cbnz	r1, 800ced8 <_realloc_r+0x14>
 800cece:	4611      	mov	r1, r2
 800ced0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ced4:	f7ff b9ca 	b.w	800c26c <_malloc_r>
 800ced8:	b922      	cbnz	r2, 800cee4 <_realloc_r+0x20>
 800ceda:	f7ff f979 	bl	800c1d0 <_free_r>
 800cede:	4625      	mov	r5, r4
 800cee0:	4628      	mov	r0, r5
 800cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee4:	f000 fa44 	bl	800d370 <_malloc_usable_size_r>
 800cee8:	42a0      	cmp	r0, r4
 800ceea:	d20f      	bcs.n	800cf0c <_realloc_r+0x48>
 800ceec:	4621      	mov	r1, r4
 800ceee:	4638      	mov	r0, r7
 800cef0:	f7ff f9bc 	bl	800c26c <_malloc_r>
 800cef4:	4605      	mov	r5, r0
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d0f2      	beq.n	800cee0 <_realloc_r+0x1c>
 800cefa:	4631      	mov	r1, r6
 800cefc:	4622      	mov	r2, r4
 800cefe:	f7ff f93b 	bl	800c178 <memcpy>
 800cf02:	4631      	mov	r1, r6
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7ff f963 	bl	800c1d0 <_free_r>
 800cf0a:	e7e9      	b.n	800cee0 <_realloc_r+0x1c>
 800cf0c:	4635      	mov	r5, r6
 800cf0e:	e7e7      	b.n	800cee0 <_realloc_r+0x1c>

0800cf10 <__ssputs_r>:
 800cf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf14:	688e      	ldr	r6, [r1, #8]
 800cf16:	429e      	cmp	r6, r3
 800cf18:	4682      	mov	sl, r0
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	4690      	mov	r8, r2
 800cf1e:	4699      	mov	r9, r3
 800cf20:	d837      	bhi.n	800cf92 <__ssputs_r+0x82>
 800cf22:	898a      	ldrh	r2, [r1, #12]
 800cf24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf28:	d031      	beq.n	800cf8e <__ssputs_r+0x7e>
 800cf2a:	6825      	ldr	r5, [r4, #0]
 800cf2c:	6909      	ldr	r1, [r1, #16]
 800cf2e:	1a6f      	subs	r7, r5, r1
 800cf30:	6965      	ldr	r5, [r4, #20]
 800cf32:	2302      	movs	r3, #2
 800cf34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf38:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf3c:	f109 0301 	add.w	r3, r9, #1
 800cf40:	443b      	add	r3, r7
 800cf42:	429d      	cmp	r5, r3
 800cf44:	bf38      	it	cc
 800cf46:	461d      	movcc	r5, r3
 800cf48:	0553      	lsls	r3, r2, #21
 800cf4a:	d530      	bpl.n	800cfae <__ssputs_r+0x9e>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7ff f98d 	bl	800c26c <_malloc_r>
 800cf52:	4606      	mov	r6, r0
 800cf54:	b950      	cbnz	r0, 800cf6c <__ssputs_r+0x5c>
 800cf56:	230c      	movs	r3, #12
 800cf58:	f8ca 3000 	str.w	r3, [sl]
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6c:	463a      	mov	r2, r7
 800cf6e:	6921      	ldr	r1, [r4, #16]
 800cf70:	f7ff f902 	bl	800c178 <memcpy>
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	6126      	str	r6, [r4, #16]
 800cf82:	6165      	str	r5, [r4, #20]
 800cf84:	443e      	add	r6, r7
 800cf86:	1bed      	subs	r5, r5, r7
 800cf88:	6026      	str	r6, [r4, #0]
 800cf8a:	60a5      	str	r5, [r4, #8]
 800cf8c:	464e      	mov	r6, r9
 800cf8e:	454e      	cmp	r6, r9
 800cf90:	d900      	bls.n	800cf94 <__ssputs_r+0x84>
 800cf92:	464e      	mov	r6, r9
 800cf94:	4632      	mov	r2, r6
 800cf96:	4641      	mov	r1, r8
 800cf98:	6820      	ldr	r0, [r4, #0]
 800cf9a:	f7ff f8f8 	bl	800c18e <memmove>
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	1b9b      	subs	r3, r3, r6
 800cfa2:	60a3      	str	r3, [r4, #8]
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	441e      	add	r6, r3
 800cfa8:	6026      	str	r6, [r4, #0]
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e7dc      	b.n	800cf68 <__ssputs_r+0x58>
 800cfae:	462a      	mov	r2, r5
 800cfb0:	f7ff ff88 	bl	800cec4 <_realloc_r>
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d1e2      	bne.n	800cf80 <__ssputs_r+0x70>
 800cfba:	6921      	ldr	r1, [r4, #16]
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	f7ff f907 	bl	800c1d0 <_free_r>
 800cfc2:	e7c8      	b.n	800cf56 <__ssputs_r+0x46>

0800cfc4 <_svfiprintf_r>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	461d      	mov	r5, r3
 800cfca:	898b      	ldrh	r3, [r1, #12]
 800cfcc:	061f      	lsls	r7, r3, #24
 800cfce:	b09d      	sub	sp, #116	; 0x74
 800cfd0:	4680      	mov	r8, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	4616      	mov	r6, r2
 800cfd6:	d50f      	bpl.n	800cff8 <_svfiprintf_r+0x34>
 800cfd8:	690b      	ldr	r3, [r1, #16]
 800cfda:	b96b      	cbnz	r3, 800cff8 <_svfiprintf_r+0x34>
 800cfdc:	2140      	movs	r1, #64	; 0x40
 800cfde:	f7ff f945 	bl	800c26c <_malloc_r>
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	6120      	str	r0, [r4, #16]
 800cfe6:	b928      	cbnz	r0, 800cff4 <_svfiprintf_r+0x30>
 800cfe8:	230c      	movs	r3, #12
 800cfea:	f8c8 3000 	str.w	r3, [r8]
 800cfee:	f04f 30ff 	mov.w	r0, #4294967295
 800cff2:	e0c8      	b.n	800d186 <_svfiprintf_r+0x1c2>
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	6163      	str	r3, [r4, #20]
 800cff8:	2300      	movs	r3, #0
 800cffa:	9309      	str	r3, [sp, #36]	; 0x24
 800cffc:	2320      	movs	r3, #32
 800cffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d002:	2330      	movs	r3, #48	; 0x30
 800d004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d008:	9503      	str	r5, [sp, #12]
 800d00a:	f04f 0b01 	mov.w	fp, #1
 800d00e:	4637      	mov	r7, r6
 800d010:	463d      	mov	r5, r7
 800d012:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d016:	b10b      	cbz	r3, 800d01c <_svfiprintf_r+0x58>
 800d018:	2b25      	cmp	r3, #37	; 0x25
 800d01a:	d13e      	bne.n	800d09a <_svfiprintf_r+0xd6>
 800d01c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d020:	d00b      	beq.n	800d03a <_svfiprintf_r+0x76>
 800d022:	4653      	mov	r3, sl
 800d024:	4632      	mov	r2, r6
 800d026:	4621      	mov	r1, r4
 800d028:	4640      	mov	r0, r8
 800d02a:	f7ff ff71 	bl	800cf10 <__ssputs_r>
 800d02e:	3001      	adds	r0, #1
 800d030:	f000 80a4 	beq.w	800d17c <_svfiprintf_r+0x1b8>
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	4453      	add	r3, sl
 800d038:	9309      	str	r3, [sp, #36]	; 0x24
 800d03a:	783b      	ldrb	r3, [r7, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 809d 	beq.w	800d17c <_svfiprintf_r+0x1b8>
 800d042:	2300      	movs	r3, #0
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	9307      	str	r3, [sp, #28]
 800d050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d054:	931a      	str	r3, [sp, #104]	; 0x68
 800d056:	462f      	mov	r7, r5
 800d058:	2205      	movs	r2, #5
 800d05a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d05e:	4850      	ldr	r0, [pc, #320]	; (800d1a0 <_svfiprintf_r+0x1dc>)
 800d060:	f7f3 f93e 	bl	80002e0 <memchr>
 800d064:	9b04      	ldr	r3, [sp, #16]
 800d066:	b9d0      	cbnz	r0, 800d09e <_svfiprintf_r+0xda>
 800d068:	06d9      	lsls	r1, r3, #27
 800d06a:	bf44      	itt	mi
 800d06c:	2220      	movmi	r2, #32
 800d06e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d072:	071a      	lsls	r2, r3, #28
 800d074:	bf44      	itt	mi
 800d076:	222b      	movmi	r2, #43	; 0x2b
 800d078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d07c:	782a      	ldrb	r2, [r5, #0]
 800d07e:	2a2a      	cmp	r2, #42	; 0x2a
 800d080:	d015      	beq.n	800d0ae <_svfiprintf_r+0xea>
 800d082:	9a07      	ldr	r2, [sp, #28]
 800d084:	462f      	mov	r7, r5
 800d086:	2000      	movs	r0, #0
 800d088:	250a      	movs	r5, #10
 800d08a:	4639      	mov	r1, r7
 800d08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d090:	3b30      	subs	r3, #48	; 0x30
 800d092:	2b09      	cmp	r3, #9
 800d094:	d94d      	bls.n	800d132 <_svfiprintf_r+0x16e>
 800d096:	b1b8      	cbz	r0, 800d0c8 <_svfiprintf_r+0x104>
 800d098:	e00f      	b.n	800d0ba <_svfiprintf_r+0xf6>
 800d09a:	462f      	mov	r7, r5
 800d09c:	e7b8      	b.n	800d010 <_svfiprintf_r+0x4c>
 800d09e:	4a40      	ldr	r2, [pc, #256]	; (800d1a0 <_svfiprintf_r+0x1dc>)
 800d0a0:	1a80      	subs	r0, r0, r2
 800d0a2:	fa0b f000 	lsl.w	r0, fp, r0
 800d0a6:	4318      	orrs	r0, r3
 800d0a8:	9004      	str	r0, [sp, #16]
 800d0aa:	463d      	mov	r5, r7
 800d0ac:	e7d3      	b.n	800d056 <_svfiprintf_r+0x92>
 800d0ae:	9a03      	ldr	r2, [sp, #12]
 800d0b0:	1d11      	adds	r1, r2, #4
 800d0b2:	6812      	ldr	r2, [r2, #0]
 800d0b4:	9103      	str	r1, [sp, #12]
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	db01      	blt.n	800d0be <_svfiprintf_r+0xfa>
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	e004      	b.n	800d0c8 <_svfiprintf_r+0x104>
 800d0be:	4252      	negs	r2, r2
 800d0c0:	f043 0302 	orr.w	r3, r3, #2
 800d0c4:	9207      	str	r2, [sp, #28]
 800d0c6:	9304      	str	r3, [sp, #16]
 800d0c8:	783b      	ldrb	r3, [r7, #0]
 800d0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d0cc:	d10c      	bne.n	800d0e8 <_svfiprintf_r+0x124>
 800d0ce:	787b      	ldrb	r3, [r7, #1]
 800d0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d2:	d133      	bne.n	800d13c <_svfiprintf_r+0x178>
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	1d1a      	adds	r2, r3, #4
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	9203      	str	r2, [sp, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bfb8      	it	lt
 800d0e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0e4:	3702      	adds	r7, #2
 800d0e6:	9305      	str	r3, [sp, #20]
 800d0e8:	4d2e      	ldr	r5, [pc, #184]	; (800d1a4 <_svfiprintf_r+0x1e0>)
 800d0ea:	7839      	ldrb	r1, [r7, #0]
 800d0ec:	2203      	movs	r2, #3
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f7f3 f8f6 	bl	80002e0 <memchr>
 800d0f4:	b138      	cbz	r0, 800d106 <_svfiprintf_r+0x142>
 800d0f6:	2340      	movs	r3, #64	; 0x40
 800d0f8:	1b40      	subs	r0, r0, r5
 800d0fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d0fe:	9b04      	ldr	r3, [sp, #16]
 800d100:	4303      	orrs	r3, r0
 800d102:	3701      	adds	r7, #1
 800d104:	9304      	str	r3, [sp, #16]
 800d106:	7839      	ldrb	r1, [r7, #0]
 800d108:	4827      	ldr	r0, [pc, #156]	; (800d1a8 <_svfiprintf_r+0x1e4>)
 800d10a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d10e:	2206      	movs	r2, #6
 800d110:	1c7e      	adds	r6, r7, #1
 800d112:	f7f3 f8e5 	bl	80002e0 <memchr>
 800d116:	2800      	cmp	r0, #0
 800d118:	d038      	beq.n	800d18c <_svfiprintf_r+0x1c8>
 800d11a:	4b24      	ldr	r3, [pc, #144]	; (800d1ac <_svfiprintf_r+0x1e8>)
 800d11c:	bb13      	cbnz	r3, 800d164 <_svfiprintf_r+0x1a0>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	3307      	adds	r3, #7
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	3308      	adds	r3, #8
 800d128:	9303      	str	r3, [sp, #12]
 800d12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12c:	444b      	add	r3, r9
 800d12e:	9309      	str	r3, [sp, #36]	; 0x24
 800d130:	e76d      	b.n	800d00e <_svfiprintf_r+0x4a>
 800d132:	fb05 3202 	mla	r2, r5, r2, r3
 800d136:	2001      	movs	r0, #1
 800d138:	460f      	mov	r7, r1
 800d13a:	e7a6      	b.n	800d08a <_svfiprintf_r+0xc6>
 800d13c:	2300      	movs	r3, #0
 800d13e:	3701      	adds	r7, #1
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	4619      	mov	r1, r3
 800d144:	250a      	movs	r5, #10
 800d146:	4638      	mov	r0, r7
 800d148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d14c:	3a30      	subs	r2, #48	; 0x30
 800d14e:	2a09      	cmp	r2, #9
 800d150:	d903      	bls.n	800d15a <_svfiprintf_r+0x196>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0c8      	beq.n	800d0e8 <_svfiprintf_r+0x124>
 800d156:	9105      	str	r1, [sp, #20]
 800d158:	e7c6      	b.n	800d0e8 <_svfiprintf_r+0x124>
 800d15a:	fb05 2101 	mla	r1, r5, r1, r2
 800d15e:	2301      	movs	r3, #1
 800d160:	4607      	mov	r7, r0
 800d162:	e7f0      	b.n	800d146 <_svfiprintf_r+0x182>
 800d164:	ab03      	add	r3, sp, #12
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	4622      	mov	r2, r4
 800d16a:	4b11      	ldr	r3, [pc, #68]	; (800d1b0 <_svfiprintf_r+0x1ec>)
 800d16c:	a904      	add	r1, sp, #16
 800d16e:	4640      	mov	r0, r8
 800d170:	f3af 8000 	nop.w
 800d174:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d178:	4681      	mov	r9, r0
 800d17a:	d1d6      	bne.n	800d12a <_svfiprintf_r+0x166>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	065b      	lsls	r3, r3, #25
 800d180:	f53f af35 	bmi.w	800cfee <_svfiprintf_r+0x2a>
 800d184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d186:	b01d      	add	sp, #116	; 0x74
 800d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18c:	ab03      	add	r3, sp, #12
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	4622      	mov	r2, r4
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <_svfiprintf_r+0x1ec>)
 800d194:	a904      	add	r1, sp, #16
 800d196:	4640      	mov	r0, r8
 800d198:	f7ff fa78 	bl	800c68c <_printf_i>
 800d19c:	e7ea      	b.n	800d174 <_svfiprintf_r+0x1b0>
 800d19e:	bf00      	nop
 800d1a0:	080181c0 	.word	0x080181c0
 800d1a4:	080181c6 	.word	0x080181c6
 800d1a8:	080181ca 	.word	0x080181ca
 800d1ac:	00000000 	.word	0x00000000
 800d1b0:	0800cf11 	.word	0x0800cf11

0800d1b4 <_raise_r>:
 800d1b4:	291f      	cmp	r1, #31
 800d1b6:	b538      	push	{r3, r4, r5, lr}
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	d904      	bls.n	800d1c8 <_raise_r+0x14>
 800d1be:	2316      	movs	r3, #22
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1ca:	b112      	cbz	r2, 800d1d2 <_raise_r+0x1e>
 800d1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d0:	b94b      	cbnz	r3, 800d1e6 <_raise_r+0x32>
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 f830 	bl	800d238 <_getpid_r>
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4601      	mov	r1, r0
 800d1dc:	4620      	mov	r0, r4
 800d1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e2:	f000 b817 	b.w	800d214 <_kill_r>
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d00a      	beq.n	800d200 <_raise_r+0x4c>
 800d1ea:	1c59      	adds	r1, r3, #1
 800d1ec:	d103      	bne.n	800d1f6 <_raise_r+0x42>
 800d1ee:	2316      	movs	r3, #22
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	e7e7      	b.n	800d1c6 <_raise_r+0x12>
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	4798      	blx	r3
 800d200:	2000      	movs	r0, #0
 800d202:	e7e0      	b.n	800d1c6 <_raise_r+0x12>

0800d204 <raise>:
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <raise+0xc>)
 800d206:	4601      	mov	r1, r0
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	f7ff bfd3 	b.w	800d1b4 <_raise_r>
 800d20e:	bf00      	nop
 800d210:	20000104 	.word	0x20000104

0800d214 <_kill_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4c07      	ldr	r4, [pc, #28]	; (800d234 <_kill_r+0x20>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4605      	mov	r5, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	4611      	mov	r1, r2
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	f7f4 fcfb 	bl	8001c1c <_kill>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	d102      	bne.n	800d230 <_kill_r+0x1c>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	b103      	cbz	r3, 800d230 <_kill_r+0x1c>
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	bf00      	nop
 800d234:	20000aec 	.word	0x20000aec

0800d238 <_getpid_r>:
 800d238:	f7f4 bce8 	b.w	8001c0c <_getpid>

0800d23c <__sread>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	460c      	mov	r4, r1
 800d240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d244:	f000 f89c 	bl	800d380 <_read_r>
 800d248:	2800      	cmp	r0, #0
 800d24a:	bfab      	itete	ge
 800d24c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d24e:	89a3      	ldrhlt	r3, [r4, #12]
 800d250:	181b      	addge	r3, r3, r0
 800d252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d256:	bfac      	ite	ge
 800d258:	6563      	strge	r3, [r4, #84]	; 0x54
 800d25a:	81a3      	strhlt	r3, [r4, #12]
 800d25c:	bd10      	pop	{r4, pc}

0800d25e <__swrite>:
 800d25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d262:	461f      	mov	r7, r3
 800d264:	898b      	ldrh	r3, [r1, #12]
 800d266:	05db      	lsls	r3, r3, #23
 800d268:	4605      	mov	r5, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	4616      	mov	r6, r2
 800d26e:	d505      	bpl.n	800d27c <__swrite+0x1e>
 800d270:	2302      	movs	r3, #2
 800d272:	2200      	movs	r2, #0
 800d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d278:	f000 f868 	bl	800d34c <_lseek_r>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	4632      	mov	r2, r6
 800d28a:	463b      	mov	r3, r7
 800d28c:	4628      	mov	r0, r5
 800d28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d292:	f000 b817 	b.w	800d2c4 <_write_r>

0800d296 <__sseek>:
 800d296:	b510      	push	{r4, lr}
 800d298:	460c      	mov	r4, r1
 800d29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29e:	f000 f855 	bl	800d34c <_lseek_r>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	bf15      	itete	ne
 800d2a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2b2:	81a3      	strheq	r3, [r4, #12]
 800d2b4:	bf18      	it	ne
 800d2b6:	81a3      	strhne	r3, [r4, #12]
 800d2b8:	bd10      	pop	{r4, pc}

0800d2ba <__sclose>:
 800d2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2be:	f000 b813 	b.w	800d2e8 <_close_r>
	...

0800d2c4 <_write_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4c07      	ldr	r4, [pc, #28]	; (800d2e4 <_write_r+0x20>)
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f7f4 f859 	bl	800138a <_write>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_write_r+0x1e>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_write_r+0x1e>
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	20000aec 	.word	0x20000aec

0800d2e8 <_close_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4c06      	ldr	r4, [pc, #24]	; (800d304 <_close_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	f7f4 fcc9 	bl	8001c8a <_close>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_close_r+0x1a>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_close_r+0x1a>
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	20000aec 	.word	0x20000aec

0800d308 <_fstat_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4c07      	ldr	r4, [pc, #28]	; (800d328 <_fstat_r+0x20>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4605      	mov	r5, r0
 800d310:	4608      	mov	r0, r1
 800d312:	4611      	mov	r1, r2
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	f7f4 fcc4 	bl	8001ca2 <_fstat>
 800d31a:	1c43      	adds	r3, r0, #1
 800d31c:	d102      	bne.n	800d324 <_fstat_r+0x1c>
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	b103      	cbz	r3, 800d324 <_fstat_r+0x1c>
 800d322:	602b      	str	r3, [r5, #0]
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	bf00      	nop
 800d328:	20000aec 	.word	0x20000aec

0800d32c <_isatty_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4c06      	ldr	r4, [pc, #24]	; (800d348 <_isatty_r+0x1c>)
 800d330:	2300      	movs	r3, #0
 800d332:	4605      	mov	r5, r0
 800d334:	4608      	mov	r0, r1
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	f7f4 fcc3 	bl	8001cc2 <_isatty>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_isatty_r+0x1a>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	b103      	cbz	r3, 800d346 <_isatty_r+0x1a>
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20000aec 	.word	0x20000aec

0800d34c <_lseek_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4c07      	ldr	r4, [pc, #28]	; (800d36c <_lseek_r+0x20>)
 800d350:	4605      	mov	r5, r0
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	2200      	movs	r2, #0
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f7f4 fcbc 	bl	8001cd8 <_lseek>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_lseek_r+0x1e>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	b103      	cbz	r3, 800d36a <_lseek_r+0x1e>
 800d368:	602b      	str	r3, [r5, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	20000aec 	.word	0x20000aec

0800d370 <_malloc_usable_size_r>:
 800d370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d374:	1f18      	subs	r0, r3, #4
 800d376:	2b00      	cmp	r3, #0
 800d378:	bfbc      	itt	lt
 800d37a:	580b      	ldrlt	r3, [r1, r0]
 800d37c:	18c0      	addlt	r0, r0, r3
 800d37e:	4770      	bx	lr

0800d380 <_read_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	4c07      	ldr	r4, [pc, #28]	; (800d3a0 <_read_r+0x20>)
 800d384:	4605      	mov	r5, r0
 800d386:	4608      	mov	r0, r1
 800d388:	4611      	mov	r1, r2
 800d38a:	2200      	movs	r2, #0
 800d38c:	6022      	str	r2, [r4, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	f7f4 fc5e 	bl	8001c50 <_read>
 800d394:	1c43      	adds	r3, r0, #1
 800d396:	d102      	bne.n	800d39e <_read_r+0x1e>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	b103      	cbz	r3, 800d39e <_read_r+0x1e>
 800d39c:	602b      	str	r3, [r5, #0]
 800d39e:	bd38      	pop	{r3, r4, r5, pc}
 800d3a0:	20000aec 	.word	0x20000aec

0800d3a4 <atanf>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	ee10 5a10 	vmov	r5, s0
 800d3aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d3ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d3b2:	eef0 7a40 	vmov.f32	s15, s0
 800d3b6:	db10      	blt.n	800d3da <atanf+0x36>
 800d3b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d3bc:	dd04      	ble.n	800d3c8 <atanf+0x24>
 800d3be:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d3c2:	eeb0 0a67 	vmov.f32	s0, s15
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d500 <atanf+0x15c>
 800d3cc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d504 <atanf+0x160>
 800d3d0:	2d00      	cmp	r5, #0
 800d3d2:	bfd8      	it	le
 800d3d4:	eef0 7a47 	vmovle.f32	s15, s14
 800d3d8:	e7f3      	b.n	800d3c2 <atanf+0x1e>
 800d3da:	4b4b      	ldr	r3, [pc, #300]	; (800d508 <atanf+0x164>)
 800d3dc:	429c      	cmp	r4, r3
 800d3de:	dc10      	bgt.n	800d402 <atanf+0x5e>
 800d3e0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d3e4:	da0a      	bge.n	800d3fc <atanf+0x58>
 800d3e6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d50c <atanf+0x168>
 800d3ea:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fa:	dce2      	bgt.n	800d3c2 <atanf+0x1e>
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d400:	e013      	b.n	800d42a <atanf+0x86>
 800d402:	f000 f8a3 	bl	800d54c <fabsf>
 800d406:	4b42      	ldr	r3, [pc, #264]	; (800d510 <atanf+0x16c>)
 800d408:	429c      	cmp	r4, r3
 800d40a:	dc4f      	bgt.n	800d4ac <atanf+0x108>
 800d40c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d410:	429c      	cmp	r4, r3
 800d412:	dc41      	bgt.n	800d498 <atanf+0xf4>
 800d414:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d418:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d41c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d420:	2300      	movs	r3, #0
 800d422:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d426:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d430:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d514 <atanf+0x170>
 800d434:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d518 <atanf+0x174>
 800d438:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d51c <atanf+0x178>
 800d43c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d440:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d444:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d520 <atanf+0x17c>
 800d448:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d44c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d524 <atanf+0x180>
 800d450:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d454:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d528 <atanf+0x184>
 800d458:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d45c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d52c <atanf+0x188>
 800d460:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d464:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d530 <atanf+0x18c>
 800d468:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d46c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d534 <atanf+0x190>
 800d470:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d474:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d538 <atanf+0x194>
 800d478:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d47c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d53c <atanf+0x198>
 800d480:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d484:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d488:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d490:	d121      	bne.n	800d4d6 <atanf+0x132>
 800d492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d496:	e794      	b.n	800d3c2 <atanf+0x1e>
 800d498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d49c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d4a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d4aa:	e7be      	b.n	800d42a <atanf+0x86>
 800d4ac:	4b24      	ldr	r3, [pc, #144]	; (800d540 <atanf+0x19c>)
 800d4ae:	429c      	cmp	r4, r3
 800d4b0:	dc0b      	bgt.n	800d4ca <atanf+0x126>
 800d4b2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d4be:	2302      	movs	r3, #2
 800d4c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4c8:	e7af      	b.n	800d42a <atanf+0x86>
 800d4ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d4ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e7a9      	b.n	800d42a <atanf+0x86>
 800d4d6:	4a1b      	ldr	r2, [pc, #108]	; (800d544 <atanf+0x1a0>)
 800d4d8:	491b      	ldr	r1, [pc, #108]	; (800d548 <atanf+0x1a4>)
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	441a      	add	r2, r3
 800d4de:	440b      	add	r3, r1
 800d4e0:	edd3 6a00 	vldr	s13, [r3]
 800d4e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4ee:	ed92 7a00 	vldr	s14, [r2]
 800d4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4f6:	bfb8      	it	lt
 800d4f8:	eef1 7a67 	vneglt.f32	s15, s15
 800d4fc:	e761      	b.n	800d3c2 <atanf+0x1e>
 800d4fe:	bf00      	nop
 800d500:	bfc90fdb 	.word	0xbfc90fdb
 800d504:	3fc90fdb 	.word	0x3fc90fdb
 800d508:	3edfffff 	.word	0x3edfffff
 800d50c:	7149f2ca 	.word	0x7149f2ca
 800d510:	3f97ffff 	.word	0x3f97ffff
 800d514:	3c8569d7 	.word	0x3c8569d7
 800d518:	3d4bda59 	.word	0x3d4bda59
 800d51c:	bd6ef16b 	.word	0xbd6ef16b
 800d520:	3d886b35 	.word	0x3d886b35
 800d524:	3dba2e6e 	.word	0x3dba2e6e
 800d528:	3e124925 	.word	0x3e124925
 800d52c:	3eaaaaab 	.word	0x3eaaaaab
 800d530:	bd15a221 	.word	0xbd15a221
 800d534:	bd9d8795 	.word	0xbd9d8795
 800d538:	bde38e38 	.word	0xbde38e38
 800d53c:	be4ccccd 	.word	0xbe4ccccd
 800d540:	401bffff 	.word	0x401bffff
 800d544:	08018254 	.word	0x08018254
 800d548:	08018264 	.word	0x08018264

0800d54c <fabsf>:
 800d54c:	ee10 3a10 	vmov	r3, s0
 800d550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d554:	ee00 3a10 	vmov	s0, r3
 800d558:	4770      	bx	lr
	...

0800d55c <roundf>:
 800d55c:	ee10 0a10 	vmov	r0, s0
 800d560:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d564:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d568:	2a16      	cmp	r2, #22
 800d56a:	dc15      	bgt.n	800d598 <roundf+0x3c>
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	da08      	bge.n	800d582 <roundf+0x26>
 800d570:	3201      	adds	r2, #1
 800d572:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d576:	d101      	bne.n	800d57c <roundf+0x20>
 800d578:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d57c:	ee00 3a10 	vmov	s0, r3
 800d580:	4770      	bx	lr
 800d582:	4908      	ldr	r1, [pc, #32]	; (800d5a4 <roundf+0x48>)
 800d584:	4111      	asrs	r1, r2
 800d586:	4208      	tst	r0, r1
 800d588:	d0fa      	beq.n	800d580 <roundf+0x24>
 800d58a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d58e:	4113      	asrs	r3, r2
 800d590:	4403      	add	r3, r0
 800d592:	ea23 0301 	bic.w	r3, r3, r1
 800d596:	e7f1      	b.n	800d57c <roundf+0x20>
 800d598:	2a80      	cmp	r2, #128	; 0x80
 800d59a:	d1f1      	bne.n	800d580 <roundf+0x24>
 800d59c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	007fffff 	.word	0x007fffff

0800d5a8 <tanf>:
 800d5a8:	ee10 3a10 	vmov	r3, s0
 800d5ac:	b507      	push	{r0, r1, r2, lr}
 800d5ae:	4a10      	ldr	r2, [pc, #64]	; (800d5f0 <tanf+0x48>)
 800d5b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	dc05      	bgt.n	800d5c4 <tanf+0x1c>
 800d5b8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800d5f4 <tanf+0x4c>
 800d5bc:	2001      	movs	r0, #1
 800d5be:	f000 fdfb 	bl	800e1b8 <__kernel_tanf>
 800d5c2:	e004      	b.n	800d5ce <tanf+0x26>
 800d5c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d5c8:	db04      	blt.n	800d5d4 <tanf+0x2c>
 800d5ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d5ce:	b003      	add	sp, #12
 800d5d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5d4:	4668      	mov	r0, sp
 800d5d6:	f000 fa41 	bl	800da5c <__ieee754_rem_pio2f>
 800d5da:	0040      	lsls	r0, r0, #1
 800d5dc:	f000 0002 	and.w	r0, r0, #2
 800d5e0:	f1c0 0001 	rsb	r0, r0, #1
 800d5e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d5e8:	ed9d 0a00 	vldr	s0, [sp]
 800d5ec:	e7e7      	b.n	800d5be <tanf+0x16>
 800d5ee:	bf00      	nop
 800d5f0:	3f490fda 	.word	0x3f490fda
 800d5f4:	00000000 	.word	0x00000000

0800d5f8 <expf>:
 800d5f8:	b530      	push	{r4, r5, lr}
 800d5fa:	ed2d 8b02 	vpush	{d8}
 800d5fe:	4d35      	ldr	r5, [pc, #212]	; (800d6d4 <expf+0xdc>)
 800d600:	b08b      	sub	sp, #44	; 0x2c
 800d602:	eeb0 8a40 	vmov.f32	s16, s0
 800d606:	f000 f8cd 	bl	800d7a4 <__ieee754_expf>
 800d60a:	f995 3000 	ldrsb.w	r3, [r5]
 800d60e:	3301      	adds	r3, #1
 800d610:	ee10 4a10 	vmov	r4, s0
 800d614:	d030      	beq.n	800d678 <expf+0x80>
 800d616:	eeb0 0a48 	vmov.f32	s0, s16
 800d61a:	f000 feb3 	bl	800e384 <finitef>
 800d61e:	b358      	cbz	r0, 800d678 <expf+0x80>
 800d620:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800d6d8 <expf+0xe0>
 800d624:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	dd35      	ble.n	800d69a <expf+0xa2>
 800d62e:	2303      	movs	r3, #3
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	4b2a      	ldr	r3, [pc, #168]	; (800d6dc <expf+0xe4>)
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	ee18 0a10 	vmov	r0, s16
 800d63a:	2300      	movs	r3, #0
 800d63c:	9308      	str	r3, [sp, #32]
 800d63e:	f7f3 f803 	bl	8000648 <__aeabi_f2d>
 800d642:	f995 3000 	ldrsb.w	r3, [r5]
 800d646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d64e:	b9cb      	cbnz	r3, 800d684 <expf+0x8c>
 800d650:	4b23      	ldr	r3, [pc, #140]	; (800d6e0 <expf+0xe8>)
 800d652:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d65a:	4668      	mov	r0, sp
 800d65c:	f000 fe90 	bl	800e380 <matherr>
 800d660:	b1b0      	cbz	r0, 800d690 <expf+0x98>
 800d662:	9b08      	ldr	r3, [sp, #32]
 800d664:	b11b      	cbz	r3, 800d66e <expf+0x76>
 800d666:	f7fe fd3b 	bl	800c0e0 <__errno>
 800d66a:	9b08      	ldr	r3, [sp, #32]
 800d66c:	6003      	str	r3, [r0, #0]
 800d66e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d672:	f7f3 fa53 	bl	8000b1c <__aeabi_d2f>
 800d676:	4604      	mov	r4, r0
 800d678:	ee00 4a10 	vmov	s0, r4
 800d67c:	b00b      	add	sp, #44	; 0x2c
 800d67e:	ecbd 8b02 	vpop	{d8}
 800d682:	bd30      	pop	{r4, r5, pc}
 800d684:	4917      	ldr	r1, [pc, #92]	; (800d6e4 <expf+0xec>)
 800d686:	2000      	movs	r0, #0
 800d688:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d1e4      	bne.n	800d65a <expf+0x62>
 800d690:	f7fe fd26 	bl	800c0e0 <__errno>
 800d694:	2322      	movs	r3, #34	; 0x22
 800d696:	6003      	str	r3, [r0, #0]
 800d698:	e7e3      	b.n	800d662 <expf+0x6a>
 800d69a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d6e8 <expf+0xf0>
 800d69e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	d5e7      	bpl.n	800d678 <expf+0x80>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	4b0b      	ldr	r3, [pc, #44]	; (800d6dc <expf+0xe4>)
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	ee18 0a10 	vmov	r0, s16
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9308      	str	r3, [sp, #32]
 800d6b8:	f7f2 ffc6 	bl	8000648 <__aeabi_f2d>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2200      	movs	r2, #0
 800d6c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d6c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6cc:	f995 3000 	ldrsb.w	r3, [r5]
 800d6d0:	e7dc      	b.n	800d68c <expf+0x94>
 800d6d2:	bf00      	nop
 800d6d4:	20000168 	.word	0x20000168
 800d6d8:	42b17180 	.word	0x42b17180
 800d6dc:	08018274 	.word	0x08018274
 800d6e0:	47efffff 	.word	0x47efffff
 800d6e4:	7ff00000 	.word	0x7ff00000
 800d6e8:	c2cff1b5 	.word	0xc2cff1b5

0800d6ec <fmodf>:
 800d6ec:	b5d0      	push	{r4, r6, r7, lr}
 800d6ee:	ed2d 8b02 	vpush	{d8}
 800d6f2:	b08a      	sub	sp, #40	; 0x28
 800d6f4:	eef0 8a40 	vmov.f32	s17, s0
 800d6f8:	eeb0 8a60 	vmov.f32	s16, s1
 800d6fc:	f000 f926 	bl	800d94c <__ieee754_fmodf>
 800d700:	4b26      	ldr	r3, [pc, #152]	; (800d79c <fmodf+0xb0>)
 800d702:	f993 4000 	ldrsb.w	r4, [r3]
 800d706:	1c63      	adds	r3, r4, #1
 800d708:	d035      	beq.n	800d776 <fmodf+0x8a>
 800d70a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d712:	d630      	bvs.n	800d776 <fmodf+0x8a>
 800d714:	eef4 8a68 	vcmp.f32	s17, s17
 800d718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71c:	d62b      	bvs.n	800d776 <fmodf+0x8a>
 800d71e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d726:	d126      	bne.n	800d776 <fmodf+0x8a>
 800d728:	2301      	movs	r3, #1
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	4b1c      	ldr	r3, [pc, #112]	; (800d7a0 <fmodf+0xb4>)
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	ee18 0a90 	vmov	r0, s17
 800d734:	2300      	movs	r3, #0
 800d736:	9308      	str	r3, [sp, #32]
 800d738:	f7f2 ff86 	bl	8000648 <__aeabi_f2d>
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	ee18 0a10 	vmov	r0, s16
 800d744:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d748:	f7f2 ff7e 	bl	8000648 <__aeabi_f2d>
 800d74c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d750:	b9ac      	cbnz	r4, 800d77e <fmodf+0x92>
 800d752:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d756:	4668      	mov	r0, sp
 800d758:	f000 fe12 	bl	800e380 <matherr>
 800d75c:	b1c8      	cbz	r0, 800d792 <fmodf+0xa6>
 800d75e:	9b08      	ldr	r3, [sp, #32]
 800d760:	b11b      	cbz	r3, 800d76a <fmodf+0x7e>
 800d762:	f7fe fcbd 	bl	800c0e0 <__errno>
 800d766:	9b08      	ldr	r3, [sp, #32]
 800d768:	6003      	str	r3, [r0, #0]
 800d76a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d76e:	f7f3 f9d5 	bl	8000b1c <__aeabi_d2f>
 800d772:	ee00 0a10 	vmov	s0, r0
 800d776:	b00a      	add	sp, #40	; 0x28
 800d778:	ecbd 8b02 	vpop	{d8}
 800d77c:	bdd0      	pop	{r4, r6, r7, pc}
 800d77e:	2200      	movs	r2, #0
 800d780:	2300      	movs	r3, #0
 800d782:	4610      	mov	r0, r2
 800d784:	4619      	mov	r1, r3
 800d786:	f7f3 f8e1 	bl	800094c <__aeabi_ddiv>
 800d78a:	2c02      	cmp	r4, #2
 800d78c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d790:	d1e1      	bne.n	800d756 <fmodf+0x6a>
 800d792:	f7fe fca5 	bl	800c0e0 <__errno>
 800d796:	2321      	movs	r3, #33	; 0x21
 800d798:	6003      	str	r3, [r0, #0]
 800d79a:	e7e0      	b.n	800d75e <fmodf+0x72>
 800d79c:	20000168 	.word	0x20000168
 800d7a0:	08018279 	.word	0x08018279

0800d7a4 <__ieee754_expf>:
 800d7a4:	ee10 2a10 	vmov	r2, s0
 800d7a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d7ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d7b0:	d902      	bls.n	800d7b8 <__ieee754_expf+0x14>
 800d7b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7b6:	4770      	bx	lr
 800d7b8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d7bc:	d106      	bne.n	800d7cc <__ieee754_expf+0x28>
 800d7be:	eddf 7a51 	vldr	s15, [pc, #324]	; 800d904 <__ieee754_expf+0x160>
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf18      	it	ne
 800d7c6:	eeb0 0a67 	vmovne.f32	s0, s15
 800d7ca:	4770      	bx	lr
 800d7cc:	484e      	ldr	r0, [pc, #312]	; (800d908 <__ieee754_expf+0x164>)
 800d7ce:	4282      	cmp	r2, r0
 800d7d0:	dd04      	ble.n	800d7dc <__ieee754_expf+0x38>
 800d7d2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800d90c <__ieee754_expf+0x168>
 800d7d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d7da:	4770      	bx	lr
 800d7dc:	2a00      	cmp	r2, #0
 800d7de:	da03      	bge.n	800d7e8 <__ieee754_expf+0x44>
 800d7e0:	4a4b      	ldr	r2, [pc, #300]	; (800d910 <__ieee754_expf+0x16c>)
 800d7e2:	4291      	cmp	r1, r2
 800d7e4:	f200 808a 	bhi.w	800d8fc <__ieee754_expf+0x158>
 800d7e8:	4a4a      	ldr	r2, [pc, #296]	; (800d914 <__ieee754_expf+0x170>)
 800d7ea:	4291      	cmp	r1, r2
 800d7ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d7f0:	d954      	bls.n	800d89c <__ieee754_expf+0xf8>
 800d7f2:	4a49      	ldr	r2, [pc, #292]	; (800d918 <__ieee754_expf+0x174>)
 800d7f4:	4291      	cmp	r1, r2
 800d7f6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d7fa:	d836      	bhi.n	800d86a <__ieee754_expf+0xc6>
 800d7fc:	4947      	ldr	r1, [pc, #284]	; (800d91c <__ieee754_expf+0x178>)
 800d7fe:	4411      	add	r1, r2
 800d800:	ed91 7a00 	vldr	s14, [r1]
 800d804:	4946      	ldr	r1, [pc, #280]	; (800d920 <__ieee754_expf+0x17c>)
 800d806:	440a      	add	r2, r1
 800d808:	edd2 7a00 	vldr	s15, [r2]
 800d80c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d810:	f1c3 0201 	rsb	r2, r3, #1
 800d814:	1ad2      	subs	r2, r2, r3
 800d816:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d81a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800d81e:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d924 <__ieee754_expf+0x180>
 800d822:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800d928 <__ieee754_expf+0x184>
 800d826:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800d82a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800d92c <__ieee754_expf+0x188>
 800d82e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800d832:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800d930 <__ieee754_expf+0x18c>
 800d836:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800d83a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d934 <__ieee754_expf+0x190>
 800d83e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800d842:	eeb0 5a40 	vmov.f32	s10, s0
 800d846:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800d84a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d84e:	eef0 6a45 	vmov.f32	s13, s10
 800d852:	ee20 5a05 	vmul.f32	s10, s0, s10
 800d856:	bb92      	cbnz	r2, 800d8be <__ieee754_expf+0x11a>
 800d858:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800d85c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d860:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d864:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d868:	4770      	bx	lr
 800d86a:	4b33      	ldr	r3, [pc, #204]	; (800d938 <__ieee754_expf+0x194>)
 800d86c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d93c <__ieee754_expf+0x198>
 800d870:	4413      	add	r3, r2
 800d872:	edd3 7a00 	vldr	s15, [r3]
 800d876:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d87a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d940 <__ieee754_expf+0x19c>
 800d87e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d882:	ee17 2a90 	vmov	r2, s15
 800d886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d88a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d88e:	eeb0 7a40 	vmov.f32	s14, s0
 800d892:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d944 <__ieee754_expf+0x1a0>
 800d896:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d89a:	e7bc      	b.n	800d816 <__ieee754_expf+0x72>
 800d89c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800d8a0:	d20b      	bcs.n	800d8ba <__ieee754_expf+0x116>
 800d8a2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800d90c <__ieee754_expf+0x168>
 800d8a6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d8aa:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	dd02      	ble.n	800d8ba <__ieee754_expf+0x116>
 800d8b4:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d8b8:	4770      	bx	lr
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	e7ad      	b.n	800d81a <__ieee754_expf+0x76>
 800d8be:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800d8c2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d8c6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d8ca:	bfb8      	it	lt
 800d8cc:	3264      	addlt	r2, #100	; 0x64
 800d8ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d8d2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d8d6:	ee76 7a40 	vsub.f32	s15, s12, s0
 800d8da:	ee17 3a90 	vmov	r3, s15
 800d8de:	bfab      	itete	ge
 800d8e0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d8e4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d8e8:	ee00 3a10 	vmovge	s0, r3
 800d8ec:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800d948 <__ieee754_expf+0x1a4>
 800d8f0:	bfbc      	itt	lt
 800d8f2:	ee00 3a10 	vmovlt	s0, r3
 800d8f6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d8fa:	4770      	bx	lr
 800d8fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d904 <__ieee754_expf+0x160>
 800d900:	4770      	bx	lr
 800d902:	bf00      	nop
 800d904:	00000000 	.word	0x00000000
 800d908:	42b17217 	.word	0x42b17217
 800d90c:	7149f2ca 	.word	0x7149f2ca
 800d910:	42cff1b5 	.word	0x42cff1b5
 800d914:	3eb17218 	.word	0x3eb17218
 800d918:	3f851591 	.word	0x3f851591
 800d91c:	08018288 	.word	0x08018288
 800d920:	08018290 	.word	0x08018290
 800d924:	3331bb4c 	.word	0x3331bb4c
 800d928:	b5ddea0e 	.word	0xb5ddea0e
 800d92c:	388ab355 	.word	0x388ab355
 800d930:	bb360b61 	.word	0xbb360b61
 800d934:	3e2aaaab 	.word	0x3e2aaaab
 800d938:	08018280 	.word	0x08018280
 800d93c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d940:	3f317180 	.word	0x3f317180
 800d944:	3717f7d1 	.word	0x3717f7d1
 800d948:	0d800000 	.word	0x0d800000

0800d94c <__ieee754_fmodf>:
 800d94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94e:	ee10 6a90 	vmov	r6, s1
 800d952:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800d956:	ee10 3a10 	vmov	r3, s0
 800d95a:	d009      	beq.n	800d970 <__ieee754_fmodf+0x24>
 800d95c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d960:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d964:	ee10 7a10 	vmov	r7, s0
 800d968:	da02      	bge.n	800d970 <__ieee754_fmodf+0x24>
 800d96a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d96e:	dd0a      	ble.n	800d986 <__ieee754_fmodf+0x3a>
 800d970:	ee07 3a90 	vmov	s15, r3
 800d974:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800d978:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800d97c:	ee17 3a90 	vmov	r3, s15
 800d980:	ee00 3a10 	vmov	s0, r3
 800d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d986:	42a9      	cmp	r1, r5
 800d988:	dbfa      	blt.n	800d980 <__ieee754_fmodf+0x34>
 800d98a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800d98e:	d105      	bne.n	800d99c <__ieee754_fmodf+0x50>
 800d990:	4a30      	ldr	r2, [pc, #192]	; (800da54 <__ieee754_fmodf+0x108>)
 800d992:	0fe3      	lsrs	r3, r4, #31
 800d994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	e7f1      	b.n	800d980 <__ieee754_fmodf+0x34>
 800d99c:	4b2e      	ldr	r3, [pc, #184]	; (800da58 <__ieee754_fmodf+0x10c>)
 800d99e:	4299      	cmp	r1, r3
 800d9a0:	dc3e      	bgt.n	800da20 <__ieee754_fmodf+0xd4>
 800d9a2:	020a      	lsls	r2, r1, #8
 800d9a4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	dc36      	bgt.n	800da1a <__ieee754_fmodf+0xce>
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	dc3a      	bgt.n	800da26 <__ieee754_fmodf+0xda>
 800d9b0:	022b      	lsls	r3, r5, #8
 800d9b2:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	f102 32ff 	add.w	r2, r2, #4294967295
 800d9bc:	d5fb      	bpl.n	800d9b6 <__ieee754_fmodf+0x6a>
 800d9be:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800d9c2:	bfbb      	ittet	lt
 800d9c4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800d9c8:	1a1b      	sublt	r3, r3, r0
 800d9ca:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800d9ce:	4099      	lsllt	r1, r3
 800d9d0:	bfa8      	it	ge
 800d9d2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800d9d6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800d9da:	bfb5      	itete	lt
 800d9dc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800d9e0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800d9e4:	1a9b      	sublt	r3, r3, r2
 800d9e6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800d9ea:	bfb8      	it	lt
 800d9ec:	409d      	lsllt	r5, r3
 800d9ee:	1a80      	subs	r0, r0, r2
 800d9f0:	1b4b      	subs	r3, r1, r5
 800d9f2:	b9d8      	cbnz	r0, 800da2c <__ieee754_fmodf+0xe0>
 800d9f4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800d9f8:	bf28      	it	cs
 800d9fa:	460b      	movcs	r3, r1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0c7      	beq.n	800d990 <__ieee754_fmodf+0x44>
 800da00:	4915      	ldr	r1, [pc, #84]	; (800da58 <__ieee754_fmodf+0x10c>)
 800da02:	428b      	cmp	r3, r1
 800da04:	dd1a      	ble.n	800da3c <__ieee754_fmodf+0xf0>
 800da06:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800da0a:	db1a      	blt.n	800da42 <__ieee754_fmodf+0xf6>
 800da0c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800da10:	4323      	orrs	r3, r4
 800da12:	327f      	adds	r2, #127	; 0x7f
 800da14:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800da18:	e7b2      	b.n	800d980 <__ieee754_fmodf+0x34>
 800da1a:	3801      	subs	r0, #1
 800da1c:	0052      	lsls	r2, r2, #1
 800da1e:	e7c3      	b.n	800d9a8 <__ieee754_fmodf+0x5c>
 800da20:	15c8      	asrs	r0, r1, #23
 800da22:	387f      	subs	r0, #127	; 0x7f
 800da24:	e7c2      	b.n	800d9ac <__ieee754_fmodf+0x60>
 800da26:	15ea      	asrs	r2, r5, #23
 800da28:	3a7f      	subs	r2, #127	; 0x7f
 800da2a:	e7c8      	b.n	800d9be <__ieee754_fmodf+0x72>
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	da02      	bge.n	800da36 <__ieee754_fmodf+0xea>
 800da30:	0049      	lsls	r1, r1, #1
 800da32:	3801      	subs	r0, #1
 800da34:	e7dc      	b.n	800d9f0 <__ieee754_fmodf+0xa4>
 800da36:	d0ab      	beq.n	800d990 <__ieee754_fmodf+0x44>
 800da38:	0059      	lsls	r1, r3, #1
 800da3a:	e7fa      	b.n	800da32 <__ieee754_fmodf+0xe6>
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	3a01      	subs	r2, #1
 800da40:	e7df      	b.n	800da02 <__ieee754_fmodf+0xb6>
 800da42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800da46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800da4a:	3282      	adds	r2, #130	; 0x82
 800da4c:	4113      	asrs	r3, r2
 800da4e:	4323      	orrs	r3, r4
 800da50:	e796      	b.n	800d980 <__ieee754_fmodf+0x34>
 800da52:	bf00      	nop
 800da54:	08018298 	.word	0x08018298
 800da58:	007fffff 	.word	0x007fffff

0800da5c <__ieee754_rem_pio2f>:
 800da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5e:	ee10 6a10 	vmov	r6, s0
 800da62:	4b86      	ldr	r3, [pc, #536]	; (800dc7c <__ieee754_rem_pio2f+0x220>)
 800da64:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800da68:	429c      	cmp	r4, r3
 800da6a:	b087      	sub	sp, #28
 800da6c:	4605      	mov	r5, r0
 800da6e:	dc05      	bgt.n	800da7c <__ieee754_rem_pio2f+0x20>
 800da70:	2300      	movs	r3, #0
 800da72:	ed85 0a00 	vstr	s0, [r5]
 800da76:	6043      	str	r3, [r0, #4]
 800da78:	2000      	movs	r0, #0
 800da7a:	e020      	b.n	800dabe <__ieee754_rem_pio2f+0x62>
 800da7c:	4b80      	ldr	r3, [pc, #512]	; (800dc80 <__ieee754_rem_pio2f+0x224>)
 800da7e:	429c      	cmp	r4, r3
 800da80:	dc38      	bgt.n	800daf4 <__ieee754_rem_pio2f+0x98>
 800da82:	2e00      	cmp	r6, #0
 800da84:	f024 040f 	bic.w	r4, r4, #15
 800da88:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800dc84 <__ieee754_rem_pio2f+0x228>
 800da8c:	4b7e      	ldr	r3, [pc, #504]	; (800dc88 <__ieee754_rem_pio2f+0x22c>)
 800da8e:	dd18      	ble.n	800dac2 <__ieee754_rem_pio2f+0x66>
 800da90:	429c      	cmp	r4, r3
 800da92:	ee70 7a47 	vsub.f32	s15, s0, s14
 800da96:	bf09      	itett	eq
 800da98:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800dc8c <__ieee754_rem_pio2f+0x230>
 800da9c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800dc90 <__ieee754_rem_pio2f+0x234>
 800daa0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800daa4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800dc94 <__ieee754_rem_pio2f+0x238>
 800daa8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800daac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dab0:	edc0 6a00 	vstr	s13, [r0]
 800dab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dab8:	edc0 7a01 	vstr	s15, [r0, #4]
 800dabc:	2001      	movs	r0, #1
 800dabe:	b007      	add	sp, #28
 800dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac2:	429c      	cmp	r4, r3
 800dac4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800dac8:	bf09      	itett	eq
 800daca:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800dc8c <__ieee754_rem_pio2f+0x230>
 800dace:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800dc90 <__ieee754_rem_pio2f+0x234>
 800dad2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800dad6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800dc94 <__ieee754_rem_pio2f+0x238>
 800dada:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dade:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dae2:	edc0 6a00 	vstr	s13, [r0]
 800dae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daea:	edc0 7a01 	vstr	s15, [r0, #4]
 800daee:	f04f 30ff 	mov.w	r0, #4294967295
 800daf2:	e7e4      	b.n	800dabe <__ieee754_rem_pio2f+0x62>
 800daf4:	4b68      	ldr	r3, [pc, #416]	; (800dc98 <__ieee754_rem_pio2f+0x23c>)
 800daf6:	429c      	cmp	r4, r3
 800daf8:	dc71      	bgt.n	800dbde <__ieee754_rem_pio2f+0x182>
 800dafa:	f7ff fd27 	bl	800d54c <fabsf>
 800dafe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800dc9c <__ieee754_rem_pio2f+0x240>
 800db02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800db06:	eee0 7a07 	vfma.f32	s15, s0, s14
 800db0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db0e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800db12:	ee17 0a90 	vmov	r0, s15
 800db16:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800dc84 <__ieee754_rem_pio2f+0x228>
 800db1a:	eeb1 7a46 	vneg.f32	s14, s12
 800db1e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800db22:	281f      	cmp	r0, #31
 800db24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800dc90 <__ieee754_rem_pio2f+0x234>
 800db28:	ee66 7a27 	vmul.f32	s15, s12, s15
 800db2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800db30:	ee16 3a90 	vmov	r3, s13
 800db34:	dc1c      	bgt.n	800db70 <__ieee754_rem_pio2f+0x114>
 800db36:	1e47      	subs	r7, r0, #1
 800db38:	4959      	ldr	r1, [pc, #356]	; (800dca0 <__ieee754_rem_pio2f+0x244>)
 800db3a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800db3e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800db42:	428a      	cmp	r2, r1
 800db44:	d014      	beq.n	800db70 <__ieee754_rem_pio2f+0x114>
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	ed95 7a00 	vldr	s14, [r5]
 800db4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800db50:	2e00      	cmp	r6, #0
 800db52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db56:	ed85 0a01 	vstr	s0, [r5, #4]
 800db5a:	dab0      	bge.n	800dabe <__ieee754_rem_pio2f+0x62>
 800db5c:	eeb1 7a47 	vneg.f32	s14, s14
 800db60:	eeb1 0a40 	vneg.f32	s0, s0
 800db64:	ed85 7a00 	vstr	s14, [r5]
 800db68:	ed85 0a01 	vstr	s0, [r5, #4]
 800db6c:	4240      	negs	r0, r0
 800db6e:	e7a6      	b.n	800dabe <__ieee754_rem_pio2f+0x62>
 800db70:	15e4      	asrs	r4, r4, #23
 800db72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800db76:	1aa2      	subs	r2, r4, r2
 800db78:	2a08      	cmp	r2, #8
 800db7a:	dde4      	ble.n	800db46 <__ieee754_rem_pio2f+0xea>
 800db7c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800dc8c <__ieee754_rem_pio2f+0x230>
 800db80:	eef0 6a40 	vmov.f32	s13, s0
 800db84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800db88:	ee30 0a66 	vsub.f32	s0, s0, s13
 800db8c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800db90:	eddf 7a40 	vldr	s15, [pc, #256]	; 800dc94 <__ieee754_rem_pio2f+0x238>
 800db94:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800db98:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800db9c:	eef0 7a40 	vmov.f32	s15, s0
 800dba0:	ee15 3a90 	vmov	r3, s11
 800dba4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dba8:	1aa4      	subs	r4, r4, r2
 800dbaa:	2c19      	cmp	r4, #25
 800dbac:	dc04      	bgt.n	800dbb8 <__ieee754_rem_pio2f+0x15c>
 800dbae:	edc5 5a00 	vstr	s11, [r5]
 800dbb2:	eeb0 0a66 	vmov.f32	s0, s13
 800dbb6:	e7c7      	b.n	800db48 <__ieee754_rem_pio2f+0xec>
 800dbb8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800dca4 <__ieee754_rem_pio2f+0x248>
 800dbbc:	eeb0 0a66 	vmov.f32	s0, s13
 800dbc0:	eea7 0a25 	vfma.f32	s0, s14, s11
 800dbc4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800dbc8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800dbcc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800dca8 <__ieee754_rem_pio2f+0x24c>
 800dbd0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800dbd4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dbd8:	ed85 7a00 	vstr	s14, [r5]
 800dbdc:	e7b4      	b.n	800db48 <__ieee754_rem_pio2f+0xec>
 800dbde:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dbe2:	db06      	blt.n	800dbf2 <__ieee754_rem_pio2f+0x196>
 800dbe4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dbe8:	edc0 7a01 	vstr	s15, [r0, #4]
 800dbec:	edc0 7a00 	vstr	s15, [r0]
 800dbf0:	e742      	b.n	800da78 <__ieee754_rem_pio2f+0x1c>
 800dbf2:	15e2      	asrs	r2, r4, #23
 800dbf4:	3a86      	subs	r2, #134	; 0x86
 800dbf6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800dbfa:	ee07 3a90 	vmov	s15, r3
 800dbfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dc02:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800dcac <__ieee754_rem_pio2f+0x250>
 800dc06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc0e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dc12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dc1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc22:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dc26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	edcd 7a05 	vstr	s15, [sp, #20]
 800dc36:	d11e      	bne.n	800dc76 <__ieee754_rem_pio2f+0x21a>
 800dc38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc40:	bf0c      	ite	eq
 800dc42:	2301      	moveq	r3, #1
 800dc44:	2302      	movne	r3, #2
 800dc46:	491a      	ldr	r1, [pc, #104]	; (800dcb0 <__ieee754_rem_pio2f+0x254>)
 800dc48:	9101      	str	r1, [sp, #4]
 800dc4a:	2102      	movs	r1, #2
 800dc4c:	9100      	str	r1, [sp, #0]
 800dc4e:	a803      	add	r0, sp, #12
 800dc50:	4629      	mov	r1, r5
 800dc52:	f000 f82f 	bl	800dcb4 <__kernel_rem_pio2f>
 800dc56:	2e00      	cmp	r6, #0
 800dc58:	f6bf af31 	bge.w	800dabe <__ieee754_rem_pio2f+0x62>
 800dc5c:	edd5 7a00 	vldr	s15, [r5]
 800dc60:	eef1 7a67 	vneg.f32	s15, s15
 800dc64:	edc5 7a00 	vstr	s15, [r5]
 800dc68:	edd5 7a01 	vldr	s15, [r5, #4]
 800dc6c:	eef1 7a67 	vneg.f32	s15, s15
 800dc70:	edc5 7a01 	vstr	s15, [r5, #4]
 800dc74:	e77a      	b.n	800db6c <__ieee754_rem_pio2f+0x110>
 800dc76:	2303      	movs	r3, #3
 800dc78:	e7e5      	b.n	800dc46 <__ieee754_rem_pio2f+0x1ea>
 800dc7a:	bf00      	nop
 800dc7c:	3f490fd8 	.word	0x3f490fd8
 800dc80:	4016cbe3 	.word	0x4016cbe3
 800dc84:	3fc90f80 	.word	0x3fc90f80
 800dc88:	3fc90fd0 	.word	0x3fc90fd0
 800dc8c:	37354400 	.word	0x37354400
 800dc90:	37354443 	.word	0x37354443
 800dc94:	2e85a308 	.word	0x2e85a308
 800dc98:	43490f80 	.word	0x43490f80
 800dc9c:	3f22f984 	.word	0x3f22f984
 800dca0:	080182a0 	.word	0x080182a0
 800dca4:	2e85a300 	.word	0x2e85a300
 800dca8:	248d3132 	.word	0x248d3132
 800dcac:	43800000 	.word	0x43800000
 800dcb0:	08018320 	.word	0x08018320

0800dcb4 <__kernel_rem_pio2f>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	ed2d 8b04 	vpush	{d8-d9}
 800dcbc:	b0d7      	sub	sp, #348	; 0x15c
 800dcbe:	469b      	mov	fp, r3
 800dcc0:	460e      	mov	r6, r1
 800dcc2:	4bbe      	ldr	r3, [pc, #760]	; (800dfbc <__kernel_rem_pio2f+0x308>)
 800dcc4:	9964      	ldr	r1, [sp, #400]	; 0x190
 800dcc6:	9002      	str	r0, [sp, #8]
 800dcc8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800dccc:	9865      	ldr	r0, [sp, #404]	; 0x194
 800dcce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800dcd2:	1ed1      	subs	r1, r2, #3
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	fb91 f1f3 	sdiv	r1, r1, r3
 800dcda:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800dcde:	f10b 3aff 	add.w	sl, fp, #4294967295
 800dce2:	1c4c      	adds	r4, r1, #1
 800dce4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800dce8:	eba1 050a 	sub.w	r5, r1, sl
 800dcec:	aa1a      	add	r2, sp, #104	; 0x68
 800dcee:	eb09 070a 	add.w	r7, r9, sl
 800dcf2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800dcf6:	4696      	mov	lr, r2
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	42bb      	cmp	r3, r7
 800dcfc:	dd0f      	ble.n	800dd1e <__kernel_rem_pio2f+0x6a>
 800dcfe:	af42      	add	r7, sp, #264	; 0x108
 800dd00:	2200      	movs	r2, #0
 800dd02:	454a      	cmp	r2, r9
 800dd04:	dc27      	bgt.n	800dd56 <__kernel_rem_pio2f+0xa2>
 800dd06:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800dd0a:	eb0b 0302 	add.w	r3, fp, r2
 800dd0e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800dd12:	9d02      	ldr	r5, [sp, #8]
 800dd14:	eddf 7aad 	vldr	s15, [pc, #692]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800dd18:	f04f 0c00 	mov.w	ip, #0
 800dd1c:	e015      	b.n	800dd4a <__kernel_rem_pio2f+0x96>
 800dd1e:	42dd      	cmn	r5, r3
 800dd20:	bf5d      	ittte	pl
 800dd22:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800dd26:	ee07 2a90 	vmovpl	s15, r2
 800dd2a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dd2e:	eef0 7a47 	vmovmi.f32	s15, s14
 800dd32:	ecee 7a01 	vstmia	lr!, {s15}
 800dd36:	3301      	adds	r3, #1
 800dd38:	e7df      	b.n	800dcfa <__kernel_rem_pio2f+0x46>
 800dd3a:	ecf5 6a01 	vldmia	r5!, {s13}
 800dd3e:	ed33 7a01 	vldmdb	r3!, {s14}
 800dd42:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dd46:	f10c 0c01 	add.w	ip, ip, #1
 800dd4a:	45d4      	cmp	ip, sl
 800dd4c:	ddf5      	ble.n	800dd3a <__kernel_rem_pio2f+0x86>
 800dd4e:	ece7 7a01 	vstmia	r7!, {s15}
 800dd52:	3201      	adds	r2, #1
 800dd54:	e7d5      	b.n	800dd02 <__kernel_rem_pio2f+0x4e>
 800dd56:	ab06      	add	r3, sp, #24
 800dd58:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800dd5c:	9304      	str	r3, [sp, #16]
 800dd5e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800dfc8 <__kernel_rem_pio2f+0x314>
 800dd62:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800dfc4 <__kernel_rem_pio2f+0x310>
 800dd66:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800dd6a:	9303      	str	r3, [sp, #12]
 800dd6c:	464d      	mov	r5, r9
 800dd6e:	ab56      	add	r3, sp, #344	; 0x158
 800dd70:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800dd74:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800dd78:	3f01      	subs	r7, #1
 800dd7a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800dd7e:	00bf      	lsls	r7, r7, #2
 800dd80:	ab56      	add	r3, sp, #344	; 0x158
 800dd82:	19da      	adds	r2, r3, r7
 800dd84:	3a4c      	subs	r2, #76	; 0x4c
 800dd86:	2300      	movs	r3, #0
 800dd88:	1ae9      	subs	r1, r5, r3
 800dd8a:	2900      	cmp	r1, #0
 800dd8c:	dc4c      	bgt.n	800de28 <__kernel_rem_pio2f+0x174>
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 fb44 	bl	800e41c <scalbnf>
 800dd94:	eeb0 8a40 	vmov.f32	s16, s0
 800dd98:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800dd9c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dda0:	f000 fafa 	bl	800e398 <floorf>
 800dda4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dda8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ddac:	2c00      	cmp	r4, #0
 800ddae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ddb2:	edcd 7a01 	vstr	s15, [sp, #4]
 800ddb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddba:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ddbe:	dd48      	ble.n	800de52 <__kernel_rem_pio2f+0x19e>
 800ddc0:	1e69      	subs	r1, r5, #1
 800ddc2:	ab06      	add	r3, sp, #24
 800ddc4:	f1c4 0008 	rsb	r0, r4, #8
 800ddc8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800ddcc:	9a01      	ldr	r2, [sp, #4]
 800ddce:	fa4c f300 	asr.w	r3, ip, r0
 800ddd2:	441a      	add	r2, r3
 800ddd4:	4083      	lsls	r3, r0
 800ddd6:	9201      	str	r2, [sp, #4]
 800ddd8:	ebac 0203 	sub.w	r2, ip, r3
 800dddc:	ab06      	add	r3, sp, #24
 800ddde:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800dde2:	f1c4 0307 	rsb	r3, r4, #7
 800dde6:	fa42 f803 	asr.w	r8, r2, r3
 800ddea:	f1b8 0f00 	cmp.w	r8, #0
 800ddee:	dd41      	ble.n	800de74 <__kernel_rem_pio2f+0x1c0>
 800ddf0:	9b01      	ldr	r3, [sp, #4]
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	4601      	mov	r1, r0
 800ddfa:	4285      	cmp	r5, r0
 800ddfc:	dc6d      	bgt.n	800deda <__kernel_rem_pio2f+0x226>
 800ddfe:	2c00      	cmp	r4, #0
 800de00:	dd04      	ble.n	800de0c <__kernel_rem_pio2f+0x158>
 800de02:	2c01      	cmp	r4, #1
 800de04:	d07e      	beq.n	800df04 <__kernel_rem_pio2f+0x250>
 800de06:	2c02      	cmp	r4, #2
 800de08:	f000 8086 	beq.w	800df18 <__kernel_rem_pio2f+0x264>
 800de0c:	f1b8 0f02 	cmp.w	r8, #2
 800de10:	d130      	bne.n	800de74 <__kernel_rem_pio2f+0x1c0>
 800de12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800de16:	ee30 8a48 	vsub.f32	s16, s0, s16
 800de1a:	b359      	cbz	r1, 800de74 <__kernel_rem_pio2f+0x1c0>
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fafd 	bl	800e41c <scalbnf>
 800de22:	ee38 8a40 	vsub.f32	s16, s16, s0
 800de26:	e025      	b.n	800de74 <__kernel_rem_pio2f+0x1c0>
 800de28:	ee60 7a28 	vmul.f32	s15, s0, s17
 800de2c:	a806      	add	r0, sp, #24
 800de2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de36:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800de3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800de3e:	ee10 1a10 	vmov	r1, s0
 800de42:	ed32 0a01 	vldmdb	r2!, {s0}
 800de46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800de4a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800de4e:	3301      	adds	r3, #1
 800de50:	e79a      	b.n	800dd88 <__kernel_rem_pio2f+0xd4>
 800de52:	d106      	bne.n	800de62 <__kernel_rem_pio2f+0x1ae>
 800de54:	1e6b      	subs	r3, r5, #1
 800de56:	aa06      	add	r2, sp, #24
 800de58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800de5c:	ea4f 2822 	mov.w	r8, r2, asr #8
 800de60:	e7c3      	b.n	800ddea <__kernel_rem_pio2f+0x136>
 800de62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6e:	da31      	bge.n	800ded4 <__kernel_rem_pio2f+0x220>
 800de70:	f04f 0800 	mov.w	r8, #0
 800de74:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7c:	f040 80a8 	bne.w	800dfd0 <__kernel_rem_pio2f+0x31c>
 800de80:	1e6b      	subs	r3, r5, #1
 800de82:	4618      	mov	r0, r3
 800de84:	2200      	movs	r2, #0
 800de86:	4548      	cmp	r0, r9
 800de88:	da4d      	bge.n	800df26 <__kernel_rem_pio2f+0x272>
 800de8a:	2a00      	cmp	r2, #0
 800de8c:	f000 8087 	beq.w	800df9e <__kernel_rem_pio2f+0x2ea>
 800de90:	aa06      	add	r2, sp, #24
 800de92:	3c08      	subs	r4, #8
 800de94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800de98:	2900      	cmp	r1, #0
 800de9a:	f000 808d 	beq.w	800dfb8 <__kernel_rem_pio2f+0x304>
 800de9e:	4620      	mov	r0, r4
 800dea0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dea4:	9302      	str	r3, [sp, #8]
 800dea6:	f000 fab9 	bl	800e41c <scalbnf>
 800deaa:	9b02      	ldr	r3, [sp, #8]
 800deac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dfc8 <__kernel_rem_pio2f+0x314>
 800deb0:	0099      	lsls	r1, r3, #2
 800deb2:	aa42      	add	r2, sp, #264	; 0x108
 800deb4:	1850      	adds	r0, r2, r1
 800deb6:	1d05      	adds	r5, r0, #4
 800deb8:	461c      	mov	r4, r3
 800deba:	2c00      	cmp	r4, #0
 800debc:	f280 80b8 	bge.w	800e030 <__kernel_rem_pio2f+0x37c>
 800dec0:	2500      	movs	r5, #0
 800dec2:	1b5c      	subs	r4, r3, r5
 800dec4:	2c00      	cmp	r4, #0
 800dec6:	f2c0 80d8 	blt.w	800e07a <__kernel_rem_pio2f+0x3c6>
 800deca:	4f3d      	ldr	r7, [pc, #244]	; (800dfc0 <__kernel_rem_pio2f+0x30c>)
 800decc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800ded0:	2400      	movs	r4, #0
 800ded2:	e0c6      	b.n	800e062 <__kernel_rem_pio2f+0x3ae>
 800ded4:	f04f 0802 	mov.w	r8, #2
 800ded8:	e78a      	b.n	800ddf0 <__kernel_rem_pio2f+0x13c>
 800deda:	ab06      	add	r3, sp, #24
 800dedc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dee0:	b949      	cbnz	r1, 800def6 <__kernel_rem_pio2f+0x242>
 800dee2:	b12b      	cbz	r3, 800def0 <__kernel_rem_pio2f+0x23c>
 800dee4:	aa06      	add	r2, sp, #24
 800dee6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800deea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800deee:	2301      	movs	r3, #1
 800def0:	3001      	adds	r0, #1
 800def2:	4619      	mov	r1, r3
 800def4:	e781      	b.n	800ddfa <__kernel_rem_pio2f+0x146>
 800def6:	aa06      	add	r2, sp, #24
 800def8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800defc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800df00:	460b      	mov	r3, r1
 800df02:	e7f5      	b.n	800def0 <__kernel_rem_pio2f+0x23c>
 800df04:	1e68      	subs	r0, r5, #1
 800df06:	ab06      	add	r3, sp, #24
 800df08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800df0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df10:	aa06      	add	r2, sp, #24
 800df12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800df16:	e779      	b.n	800de0c <__kernel_rem_pio2f+0x158>
 800df18:	1e68      	subs	r0, r5, #1
 800df1a:	ab06      	add	r3, sp, #24
 800df1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800df20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df24:	e7f4      	b.n	800df10 <__kernel_rem_pio2f+0x25c>
 800df26:	a906      	add	r1, sp, #24
 800df28:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800df2c:	3801      	subs	r0, #1
 800df2e:	430a      	orrs	r2, r1
 800df30:	e7a9      	b.n	800de86 <__kernel_rem_pio2f+0x1d2>
 800df32:	f10c 0c01 	add.w	ip, ip, #1
 800df36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	d0f9      	beq.n	800df32 <__kernel_rem_pio2f+0x27e>
 800df3e:	eb0b 0305 	add.w	r3, fp, r5
 800df42:	aa1a      	add	r2, sp, #104	; 0x68
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	1898      	adds	r0, r3, r2
 800df48:	3004      	adds	r0, #4
 800df4a:	1c69      	adds	r1, r5, #1
 800df4c:	3704      	adds	r7, #4
 800df4e:	2200      	movs	r2, #0
 800df50:	4465      	add	r5, ip
 800df52:	9005      	str	r0, [sp, #20]
 800df54:	428d      	cmp	r5, r1
 800df56:	f6ff af0a 	blt.w	800dd6e <__kernel_rem_pio2f+0xba>
 800df5a:	a81a      	add	r0, sp, #104	; 0x68
 800df5c:	eb02 0c03 	add.w	ip, r2, r3
 800df60:	4484      	add	ip, r0
 800df62:	9803      	ldr	r0, [sp, #12]
 800df64:	f8dd e008 	ldr.w	lr, [sp, #8]
 800df68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800df6c:	9001      	str	r0, [sp, #4]
 800df6e:	ee07 0a90 	vmov	s15, r0
 800df72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df76:	9805      	ldr	r0, [sp, #20]
 800df78:	edcc 7a00 	vstr	s15, [ip]
 800df7c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800df80:	eb00 0802 	add.w	r8, r0, r2
 800df84:	f04f 0c00 	mov.w	ip, #0
 800df88:	45d4      	cmp	ip, sl
 800df8a:	dd0c      	ble.n	800dfa6 <__kernel_rem_pio2f+0x2f2>
 800df8c:	eb02 0c07 	add.w	ip, r2, r7
 800df90:	a842      	add	r0, sp, #264	; 0x108
 800df92:	4484      	add	ip, r0
 800df94:	edcc 7a01 	vstr	s15, [ip, #4]
 800df98:	3101      	adds	r1, #1
 800df9a:	3204      	adds	r2, #4
 800df9c:	e7da      	b.n	800df54 <__kernel_rem_pio2f+0x2a0>
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	f04f 0c01 	mov.w	ip, #1
 800dfa4:	e7c7      	b.n	800df36 <__kernel_rem_pio2f+0x282>
 800dfa6:	ecfe 6a01 	vldmia	lr!, {s13}
 800dfaa:	ed38 7a01 	vldmdb	r8!, {s14}
 800dfae:	f10c 0c01 	add.w	ip, ip, #1
 800dfb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dfb6:	e7e7      	b.n	800df88 <__kernel_rem_pio2f+0x2d4>
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	e769      	b.n	800de90 <__kernel_rem_pio2f+0x1dc>
 800dfbc:	08018664 	.word	0x08018664
 800dfc0:	08018638 	.word	0x08018638
 800dfc4:	43800000 	.word	0x43800000
 800dfc8:	3b800000 	.word	0x3b800000
 800dfcc:	00000000 	.word	0x00000000
 800dfd0:	4260      	negs	r0, r4
 800dfd2:	eeb0 0a48 	vmov.f32	s0, s16
 800dfd6:	f000 fa21 	bl	800e41c <scalbnf>
 800dfda:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800dfc4 <__kernel_rem_pio2f+0x310>
 800dfde:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe6:	db1a      	blt.n	800e01e <__kernel_rem_pio2f+0x36a>
 800dfe8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800dfc8 <__kernel_rem_pio2f+0x314>
 800dfec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dff0:	aa06      	add	r2, sp, #24
 800dff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dff6:	a906      	add	r1, sp, #24
 800dff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dffc:	3408      	adds	r4, #8
 800dffe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e006:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e00a:	ee10 3a10 	vmov	r3, s0
 800e00e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e012:	1c6b      	adds	r3, r5, #1
 800e014:	ee17 2a90 	vmov	r2, s15
 800e018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e01c:	e73f      	b.n	800de9e <__kernel_rem_pio2f+0x1ea>
 800e01e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e022:	aa06      	add	r2, sp, #24
 800e024:	ee10 3a10 	vmov	r3, s0
 800e028:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e02c:	462b      	mov	r3, r5
 800e02e:	e736      	b.n	800de9e <__kernel_rem_pio2f+0x1ea>
 800e030:	aa06      	add	r2, sp, #24
 800e032:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800e036:	9202      	str	r2, [sp, #8]
 800e038:	ee07 2a90 	vmov	s15, r2
 800e03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e040:	3c01      	subs	r4, #1
 800e042:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e046:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e04a:	ed65 7a01 	vstmdb	r5!, {s15}
 800e04e:	e734      	b.n	800deba <__kernel_rem_pio2f+0x206>
 800e050:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800e054:	ecf7 6a01 	vldmia	r7!, {s13}
 800e058:	ed9c 7a00 	vldr	s14, [ip]
 800e05c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e060:	3401      	adds	r4, #1
 800e062:	454c      	cmp	r4, r9
 800e064:	dc01      	bgt.n	800e06a <__kernel_rem_pio2f+0x3b6>
 800e066:	42a5      	cmp	r5, r4
 800e068:	daf2      	bge.n	800e050 <__kernel_rem_pio2f+0x39c>
 800e06a:	aa56      	add	r2, sp, #344	; 0x158
 800e06c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800e070:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800e074:	3501      	adds	r5, #1
 800e076:	3804      	subs	r0, #4
 800e078:	e723      	b.n	800dec2 <__kernel_rem_pio2f+0x20e>
 800e07a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e07c:	2a03      	cmp	r2, #3
 800e07e:	d84d      	bhi.n	800e11c <__kernel_rem_pio2f+0x468>
 800e080:	e8df f002 	tbb	[pc, r2]
 800e084:	021f1f3e 	.word	0x021f1f3e
 800e088:	aa56      	add	r2, sp, #344	; 0x158
 800e08a:	4411      	add	r1, r2
 800e08c:	399c      	subs	r1, #156	; 0x9c
 800e08e:	4608      	mov	r0, r1
 800e090:	461c      	mov	r4, r3
 800e092:	2c00      	cmp	r4, #0
 800e094:	dc5f      	bgt.n	800e156 <__kernel_rem_pio2f+0x4a2>
 800e096:	4608      	mov	r0, r1
 800e098:	461c      	mov	r4, r3
 800e09a:	2c01      	cmp	r4, #1
 800e09c:	dc6b      	bgt.n	800e176 <__kernel_rem_pio2f+0x4c2>
 800e09e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	dc77      	bgt.n	800e196 <__kernel_rem_pio2f+0x4e2>
 800e0a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800e0aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800e0ae:	f1b8 0f00 	cmp.w	r8, #0
 800e0b2:	d176      	bne.n	800e1a2 <__kernel_rem_pio2f+0x4ee>
 800e0b4:	edc6 6a00 	vstr	s13, [r6]
 800e0b8:	ed86 7a01 	vstr	s14, [r6, #4]
 800e0bc:	edc6 7a02 	vstr	s15, [r6, #8]
 800e0c0:	e02c      	b.n	800e11c <__kernel_rem_pio2f+0x468>
 800e0c2:	aa56      	add	r2, sp, #344	; 0x158
 800e0c4:	4411      	add	r1, r2
 800e0c6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800e0ca:	399c      	subs	r1, #156	; 0x9c
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	da32      	bge.n	800e138 <__kernel_rem_pio2f+0x484>
 800e0d2:	f1b8 0f00 	cmp.w	r8, #0
 800e0d6:	d035      	beq.n	800e144 <__kernel_rem_pio2f+0x490>
 800e0d8:	eef1 7a47 	vneg.f32	s15, s14
 800e0dc:	edc6 7a00 	vstr	s15, [r6]
 800e0e0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800e0e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0e8:	a82f      	add	r0, sp, #188	; 0xbc
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	da2c      	bge.n	800e14a <__kernel_rem_pio2f+0x496>
 800e0f0:	f1b8 0f00 	cmp.w	r8, #0
 800e0f4:	d001      	beq.n	800e0fa <__kernel_rem_pio2f+0x446>
 800e0f6:	eef1 7a67 	vneg.f32	s15, s15
 800e0fa:	edc6 7a01 	vstr	s15, [r6, #4]
 800e0fe:	e00d      	b.n	800e11c <__kernel_rem_pio2f+0x468>
 800e100:	aa56      	add	r2, sp, #344	; 0x158
 800e102:	4411      	add	r1, r2
 800e104:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800dfcc <__kernel_rem_pio2f+0x318>
 800e108:	399c      	subs	r1, #156	; 0x9c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	da0e      	bge.n	800e12c <__kernel_rem_pio2f+0x478>
 800e10e:	f1b8 0f00 	cmp.w	r8, #0
 800e112:	d001      	beq.n	800e118 <__kernel_rem_pio2f+0x464>
 800e114:	eef1 7a67 	vneg.f32	s15, s15
 800e118:	edc6 7a00 	vstr	s15, [r6]
 800e11c:	9b01      	ldr	r3, [sp, #4]
 800e11e:	f003 0007 	and.w	r0, r3, #7
 800e122:	b057      	add	sp, #348	; 0x15c
 800e124:	ecbd 8b04 	vpop	{d8-d9}
 800e128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12c:	ed31 7a01 	vldmdb	r1!, {s14}
 800e130:	3b01      	subs	r3, #1
 800e132:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e136:	e7e8      	b.n	800e10a <__kernel_rem_pio2f+0x456>
 800e138:	ed71 7a01 	vldmdb	r1!, {s15}
 800e13c:	3801      	subs	r0, #1
 800e13e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e142:	e7c4      	b.n	800e0ce <__kernel_rem_pio2f+0x41a>
 800e144:	eef0 7a47 	vmov.f32	s15, s14
 800e148:	e7c8      	b.n	800e0dc <__kernel_rem_pio2f+0x428>
 800e14a:	ecb0 7a01 	vldmia	r0!, {s14}
 800e14e:	3101      	adds	r1, #1
 800e150:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e154:	e7ca      	b.n	800e0ec <__kernel_rem_pio2f+0x438>
 800e156:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e15a:	ed70 6a01 	vldmdb	r0!, {s13}
 800e15e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e162:	3c01      	subs	r4, #1
 800e164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e168:	ed00 7a01 	vstr	s14, [r0, #-4]
 800e16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e170:	edc0 7a00 	vstr	s15, [r0]
 800e174:	e78d      	b.n	800e092 <__kernel_rem_pio2f+0x3de>
 800e176:	ed50 7a02 	vldr	s15, [r0, #-8]
 800e17a:	ed70 6a01 	vldmdb	r0!, {s13}
 800e17e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e182:	3c01      	subs	r4, #1
 800e184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e188:	ed00 7a01 	vstr	s14, [r0, #-4]
 800e18c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e190:	edc0 7a00 	vstr	s15, [r0]
 800e194:	e781      	b.n	800e09a <__kernel_rem_pio2f+0x3e6>
 800e196:	ed31 7a01 	vldmdb	r1!, {s14}
 800e19a:	3b01      	subs	r3, #1
 800e19c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1a0:	e77f      	b.n	800e0a2 <__kernel_rem_pio2f+0x3ee>
 800e1a2:	eef1 6a66 	vneg.f32	s13, s13
 800e1a6:	eeb1 7a47 	vneg.f32	s14, s14
 800e1aa:	edc6 6a00 	vstr	s13, [r6]
 800e1ae:	ed86 7a01 	vstr	s14, [r6, #4]
 800e1b2:	eef1 7a67 	vneg.f32	s15, s15
 800e1b6:	e781      	b.n	800e0bc <__kernel_rem_pio2f+0x408>

0800e1b8 <__kernel_tanf>:
 800e1b8:	b508      	push	{r3, lr}
 800e1ba:	ee10 3a10 	vmov	r3, s0
 800e1be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e1c2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800e1c6:	eef0 7a40 	vmov.f32	s15, s0
 800e1ca:	da17      	bge.n	800e1fc <__kernel_tanf+0x44>
 800e1cc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800e1d0:	ee17 1a10 	vmov	r1, s14
 800e1d4:	bb41      	cbnz	r1, 800e228 <__kernel_tanf+0x70>
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	d108      	bne.n	800e1ee <__kernel_tanf+0x36>
 800e1dc:	f7ff f9b6 	bl	800d54c <fabsf>
 800e1e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e1e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e1ec:	bd08      	pop	{r3, pc}
 800e1ee:	2801      	cmp	r0, #1
 800e1f0:	d0fa      	beq.n	800e1e8 <__kernel_tanf+0x30>
 800e1f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e1f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e1fa:	e7f5      	b.n	800e1e8 <__kernel_tanf+0x30>
 800e1fc:	494e      	ldr	r1, [pc, #312]	; (800e338 <__kernel_tanf+0x180>)
 800e1fe:	428a      	cmp	r2, r1
 800e200:	dd12      	ble.n	800e228 <__kernel_tanf+0x70>
 800e202:	2b00      	cmp	r3, #0
 800e204:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e33c <__kernel_tanf+0x184>
 800e208:	bfb8      	it	lt
 800e20a:	eef1 7a40 	vneglt.f32	s15, s0
 800e20e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e212:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e340 <__kernel_tanf+0x188>
 800e216:	bfb8      	it	lt
 800e218:	eef1 0a60 	vneglt.f32	s1, s1
 800e21c:	ee77 0a60 	vsub.f32	s1, s14, s1
 800e220:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800e224:	eddf 0a47 	vldr	s1, [pc, #284]	; 800e344 <__kernel_tanf+0x18c>
 800e228:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800e348 <__kernel_tanf+0x190>
 800e22c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800e34c <__kernel_tanf+0x194>
 800e230:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800e350 <__kernel_tanf+0x198>
 800e234:	4940      	ldr	r1, [pc, #256]	; (800e338 <__kernel_tanf+0x180>)
 800e236:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e23a:	428a      	cmp	r2, r1
 800e23c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e240:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800e244:	eee7 5a06 	vfma.f32	s11, s14, s12
 800e248:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800e354 <__kernel_tanf+0x19c>
 800e24c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e250:	eddf 5a41 	vldr	s11, [pc, #260]	; 800e358 <__kernel_tanf+0x1a0>
 800e254:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e258:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800e35c <__kernel_tanf+0x1a4>
 800e25c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800e260:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e360 <__kernel_tanf+0x1a8>
 800e264:	eee6 5a07 	vfma.f32	s11, s12, s14
 800e268:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800e364 <__kernel_tanf+0x1ac>
 800e26c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800e270:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800e368 <__kernel_tanf+0x1b0>
 800e274:	eea6 5a07 	vfma.f32	s10, s12, s14
 800e278:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800e36c <__kernel_tanf+0x1b4>
 800e27c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800e280:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800e370 <__kernel_tanf+0x1b8>
 800e284:	eea6 5a07 	vfma.f32	s10, s12, s14
 800e288:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800e374 <__kernel_tanf+0x1bc>
 800e28c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800e290:	eeb0 7a46 	vmov.f32	s14, s12
 800e294:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e298:	eeb0 6a60 	vmov.f32	s12, s1
 800e29c:	eea7 6a24 	vfma.f32	s12, s14, s9
 800e2a0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e378 <__kernel_tanf+0x1c0>
 800e2a4:	eee6 0a26 	vfma.f32	s1, s12, s13
 800e2a8:	eee4 0a87 	vfma.f32	s1, s9, s14
 800e2ac:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800e2b0:	dd1d      	ble.n	800e2ee <__kernel_tanf+0x136>
 800e2b2:	ee07 0a10 	vmov	s14, r0
 800e2b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e2ba:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800e2be:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e2c2:	179b      	asrs	r3, r3, #30
 800e2c4:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800e2c8:	f003 0302 	and.w	r3, r3, #2
 800e2cc:	f1c3 0301 	rsb	r3, r3, #1
 800e2d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e2d4:	ee76 0a60 	vsub.f32	s1, s12, s1
 800e2d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e2dc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e2e0:	ee07 3a90 	vmov	s15, r3
 800e2e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2ec:	e77c      	b.n	800e1e8 <__kernel_tanf+0x30>
 800e2ee:	2801      	cmp	r0, #1
 800e2f0:	d01f      	beq.n	800e332 <__kernel_tanf+0x17a>
 800e2f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e2f6:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800e2fa:	4b20      	ldr	r3, [pc, #128]	; (800e37c <__kernel_tanf+0x1c4>)
 800e2fc:	ee16 2a90 	vmov	r2, s13
 800e300:	401a      	ands	r2, r3
 800e302:	ee06 2a10 	vmov	s12, r2
 800e306:	ee15 2a90 	vmov	r2, s11
 800e30a:	4013      	ands	r3, r2
 800e30c:	ee07 3a10 	vmov	s14, r3
 800e310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e314:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e318:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e31c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e320:	eef0 7a66 	vmov.f32	s15, s13
 800e324:	eee7 7a20 	vfma.f32	s15, s14, s1
 800e328:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e32c:	eef0 7a47 	vmov.f32	s15, s14
 800e330:	e75a      	b.n	800e1e8 <__kernel_tanf+0x30>
 800e332:	eef0 7a66 	vmov.f32	s15, s13
 800e336:	e757      	b.n	800e1e8 <__kernel_tanf+0x30>
 800e338:	3f2ca13f 	.word	0x3f2ca13f
 800e33c:	3f490fda 	.word	0x3f490fda
 800e340:	33222168 	.word	0x33222168
 800e344:	00000000 	.word	0x00000000
 800e348:	37d95384 	.word	0x37d95384
 800e34c:	3895c07a 	.word	0x3895c07a
 800e350:	b79bae5f 	.word	0xb79bae5f
 800e354:	398137b9 	.word	0x398137b9
 800e358:	3abede48 	.word	0x3abede48
 800e35c:	3c11371f 	.word	0x3c11371f
 800e360:	3d5d0dd1 	.word	0x3d5d0dd1
 800e364:	38a3f445 	.word	0x38a3f445
 800e368:	3a1a26c8 	.word	0x3a1a26c8
 800e36c:	3b6b6916 	.word	0x3b6b6916
 800e370:	3cb327a4 	.word	0x3cb327a4
 800e374:	3e088889 	.word	0x3e088889
 800e378:	3eaaaaab 	.word	0x3eaaaaab
 800e37c:	fffff000 	.word	0xfffff000

0800e380 <matherr>:
 800e380:	2000      	movs	r0, #0
 800e382:	4770      	bx	lr

0800e384 <finitef>:
 800e384:	ee10 3a10 	vmov	r3, s0
 800e388:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e38c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e390:	bfac      	ite	ge
 800e392:	2000      	movge	r0, #0
 800e394:	2001      	movlt	r0, #1
 800e396:	4770      	bx	lr

0800e398 <floorf>:
 800e398:	ee10 3a10 	vmov	r3, s0
 800e39c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e3a0:	0dca      	lsrs	r2, r1, #23
 800e3a2:	3a7f      	subs	r2, #127	; 0x7f
 800e3a4:	2a16      	cmp	r2, #22
 800e3a6:	dc2a      	bgt.n	800e3fe <floorf+0x66>
 800e3a8:	2a00      	cmp	r2, #0
 800e3aa:	da11      	bge.n	800e3d0 <floorf+0x38>
 800e3ac:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e410 <floorf+0x78>
 800e3b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3bc:	dd05      	ble.n	800e3ca <floorf+0x32>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	da23      	bge.n	800e40a <floorf+0x72>
 800e3c2:	4a14      	ldr	r2, [pc, #80]	; (800e414 <floorf+0x7c>)
 800e3c4:	2900      	cmp	r1, #0
 800e3c6:	bf18      	it	ne
 800e3c8:	4613      	movne	r3, r2
 800e3ca:	ee00 3a10 	vmov	s0, r3
 800e3ce:	4770      	bx	lr
 800e3d0:	4911      	ldr	r1, [pc, #68]	; (800e418 <floorf+0x80>)
 800e3d2:	4111      	asrs	r1, r2
 800e3d4:	420b      	tst	r3, r1
 800e3d6:	d0fa      	beq.n	800e3ce <floorf+0x36>
 800e3d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e410 <floorf+0x78>
 800e3dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e8:	ddef      	ble.n	800e3ca <floorf+0x32>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	bfbe      	ittt	lt
 800e3ee:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e3f2:	fa40 f202 	asrlt.w	r2, r0, r2
 800e3f6:	189b      	addlt	r3, r3, r2
 800e3f8:	ea23 0301 	bic.w	r3, r3, r1
 800e3fc:	e7e5      	b.n	800e3ca <floorf+0x32>
 800e3fe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e402:	d3e4      	bcc.n	800e3ce <floorf+0x36>
 800e404:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e408:	4770      	bx	lr
 800e40a:	2300      	movs	r3, #0
 800e40c:	e7dd      	b.n	800e3ca <floorf+0x32>
 800e40e:	bf00      	nop
 800e410:	7149f2ca 	.word	0x7149f2ca
 800e414:	bf800000 	.word	0xbf800000
 800e418:	007fffff 	.word	0x007fffff

0800e41c <scalbnf>:
 800e41c:	b508      	push	{r3, lr}
 800e41e:	ee10 2a10 	vmov	r2, s0
 800e422:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e426:	ed2d 8b02 	vpush	{d8}
 800e42a:	eef0 0a40 	vmov.f32	s1, s0
 800e42e:	d004      	beq.n	800e43a <scalbnf+0x1e>
 800e430:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e434:	d306      	bcc.n	800e444 <scalbnf+0x28>
 800e436:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e43a:	ecbd 8b02 	vpop	{d8}
 800e43e:	eeb0 0a60 	vmov.f32	s0, s1
 800e442:	bd08      	pop	{r3, pc}
 800e444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e448:	d21c      	bcs.n	800e484 <scalbnf+0x68>
 800e44a:	4b1f      	ldr	r3, [pc, #124]	; (800e4c8 <scalbnf+0xac>)
 800e44c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e4cc <scalbnf+0xb0>
 800e450:	4298      	cmp	r0, r3
 800e452:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e456:	db10      	blt.n	800e47a <scalbnf+0x5e>
 800e458:	ee10 2a90 	vmov	r2, s1
 800e45c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e460:	3b19      	subs	r3, #25
 800e462:	4403      	add	r3, r0
 800e464:	2bfe      	cmp	r3, #254	; 0xfe
 800e466:	dd0f      	ble.n	800e488 <scalbnf+0x6c>
 800e468:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e4d0 <scalbnf+0xb4>
 800e46c:	eeb0 0a48 	vmov.f32	s0, s16
 800e470:	f000 f834 	bl	800e4dc <copysignf>
 800e474:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e478:	e7df      	b.n	800e43a <scalbnf+0x1e>
 800e47a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e4d4 <scalbnf+0xb8>
 800e47e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e482:	e7da      	b.n	800e43a <scalbnf+0x1e>
 800e484:	0ddb      	lsrs	r3, r3, #23
 800e486:	e7ec      	b.n	800e462 <scalbnf+0x46>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	dd06      	ble.n	800e49a <scalbnf+0x7e>
 800e48c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e490:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e494:	ee00 3a90 	vmov	s1, r3
 800e498:	e7cf      	b.n	800e43a <scalbnf+0x1e>
 800e49a:	f113 0f16 	cmn.w	r3, #22
 800e49e:	da06      	bge.n	800e4ae <scalbnf+0x92>
 800e4a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e4a4:	4298      	cmp	r0, r3
 800e4a6:	dcdf      	bgt.n	800e468 <scalbnf+0x4c>
 800e4a8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e4d4 <scalbnf+0xb8>
 800e4ac:	e7de      	b.n	800e46c <scalbnf+0x50>
 800e4ae:	3319      	adds	r3, #25
 800e4b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e4b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e4b8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e4d8 <scalbnf+0xbc>
 800e4bc:	ee07 3a10 	vmov	s14, r3
 800e4c0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e4c4:	e7b9      	b.n	800e43a <scalbnf+0x1e>
 800e4c6:	bf00      	nop
 800e4c8:	ffff3cb0 	.word	0xffff3cb0
 800e4cc:	4c000000 	.word	0x4c000000
 800e4d0:	7149f2ca 	.word	0x7149f2ca
 800e4d4:	0da24260 	.word	0x0da24260
 800e4d8:	33000000 	.word	0x33000000

0800e4dc <copysignf>:
 800e4dc:	ee10 3a10 	vmov	r3, s0
 800e4e0:	ee10 2a90 	vmov	r2, s1
 800e4e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	ee00 3a10 	vmov	s0, r3
 800e4f2:	4770      	bx	lr

0800e4f4 <_init>:
 800e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f6:	bf00      	nop
 800e4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fa:	bc08      	pop	{r3}
 800e4fc:	469e      	mov	lr, r3
 800e4fe:	4770      	bx	lr

0800e500 <_fini>:
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e502:	bf00      	nop
 800e504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e506:	bc08      	pop	{r3}
 800e508:	469e      	mov	lr, r3
 800e50a:	4770      	bx	lr
